// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for wasmtime
class Wasmtime {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Wasmtime(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Wasmtime.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memcpy');
  late final _memcpy = _memcpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memmove');
  late final _memmove = _memmovePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memccpy');
  late final _memccpy = _memccpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset(
      __s,
      __c,
      __n,
    );
  }

  late final _memsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memset');
  late final _memset = _memsetPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memcmp');
  late final _memcmp = _memcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('__memcmpeq');
  late final ___memcmpeq = ___memcmpeqPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr(
      __s,
      __c,
      __n,
    );
  }

  late final _memchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memchr');
  late final _memchr = _memchrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy(
      __dest,
      __src,
    );
  }

  late final _strcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy = _strcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strncpy');
  late final _strncpy = _strncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat(
      __dest,
      __src,
    );
  }

  late final _strcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat = _strcatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strncat');
  late final _strncat = _strncatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp(
      __s1,
      __s2,
    );
  }

  late final _strcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp = _strcmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strncmp');
  late final _strncmp = _strncmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll(
      __s1,
      __s2,
    );
  }

  late final _strcollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll = _strcollPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrmPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strxfrm');
  late final _strxfrm = _strxfrmPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l = _strcoll_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size, locale_t)>>('strxfrm_l');
  late final _strxfrm_l = _strxfrm_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup(
      __s,
    );
  }

  late final _strdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup = _strdupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup(
      __string,
      __n,
    );
  }

  late final _strndupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strndup');
  late final _strndup = _strndupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr(
      __s,
      __c,
    );
  }

  late final _strchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr = _strchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr(
      __s,
      __c,
    );
  }

  late final _strrchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr = _strrchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchrnul(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchrnul(
      __s,
      __c,
    );
  }

  late final _strchrnulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchrnul');
  late final _strchrnul = _strchrnulPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn(
      __s,
      __reject,
    );
  }

  late final _strcspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn = _strcspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn(
      __s,
      __accept,
    );
  }

  late final _strspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn = _strspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk(
      __s,
      __accept,
    );
  }

  late final _strpbrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk = _strpbrkPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr(
      __haystack,
      __needle,
    );
  }

  late final _strstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr = _strstrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok(
      __s,
      __delim,
    );
  }

  late final _strtokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok = _strtokPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r = ___strtok_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r = _strtok_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strcasestr(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strcasestr(
      __haystack,
      __needle,
    );
  }

  late final _strcasestrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasestr');
  late final _strcasestr = _strcasestrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> memmem(
    ffi.Pointer<ffi.Void> __haystack,
    int __haystacklen,
    ffi.Pointer<ffi.Void> __needle,
    int __needlelen,
  ) {
    return _memmem(
      __haystack,
      __haystacklen,
      __needle,
      __needlelen,
    );
  }

  late final _memmemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memmem');
  late final _memmem = _memmemPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> __mempcpy(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return ___mempcpy(
      __dest,
      __src,
      __n,
    );
  }

  late final ___mempcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('__mempcpy');
  late final ___mempcpy = ___mempcpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> mempcpy(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _mempcpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _mempcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('mempcpy');
  late final _mempcpy = _mempcpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int strlen(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen(
      __s,
    );
  }

  late final _strlenPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>)>>(
      'strlen');
  late final _strlen =
      _strlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen(
      __string,
      __maxlen,
    );
  }

  late final _strnlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('strnlen');
  late final _strnlen =
      _strnlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror(
    int __errnum,
  ) {
    return _strerror(
      __errnum,
    );
  }

  late final _strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror =
      _strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('strerror_r');
  late final _strerror_r = _strerror_rPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l(
      __errnum,
      __l,
    );
  }

  late final _strerror_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l = _strerror_lPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>>('bcmp');
  late final _bcmp = _bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('bcopy');
  late final _bcopy = _bcopyPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero(
      __s,
      __n,
    );
  }

  late final _bzeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>('bzero');
  late final _bzero =
      _bzeroPtr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index(
      __s,
      __c,
    );
  }

  late final _indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index = _indexPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex(
      __s,
      __c,
    );
  }

  late final _rindexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex = _rindexPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs(
    int __i,
  ) {
    return _ffs(
      __i,
    );
  }

  late final _ffsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs = _ffsPtr.asFunction<int Function(int)>();

  int ffsl(
    int __l,
  ) {
    return _ffsl(
      __l,
    );
  }

  late final _ffslPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl = _ffslPtr.asFunction<int Function(int)>();

  int ffsll(
    int __ll,
  ) {
    return _ffsll(
      __ll,
    );
  }

  late final _ffsllPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll = _ffsllPtr.asFunction<int Function(int)>();

  int strcasecmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp(
      __s1,
      __s2,
    );
  }

  late final _strcasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp = _strcasecmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strncasecmp');
  late final _strncasecmp = _strncasecmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l = _strcasecmp_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l = _strncasecmp_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero(
      __s,
      __n,
    );
  }

  late final _explicit_bzeroPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>(
      'explicit_bzero');
  late final _explicit_bzero = _explicit_bzeroPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep(
      __stringp,
      __delim,
    );
  }

  late final _strsepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep = _strsepPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal(
    int __sig,
  ) {
    return _strsignal(
      __sig,
    );
  }

  late final _strsignalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal =
      _strsignalPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy(
      __dest,
      __src,
    );
  }

  late final ___stpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy = ___stpcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy(
      __dest,
      __src,
    );
  }

  late final _stpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy = _stpcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('__stpncpy');
  late final ___stpncpy = ___stpncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('stpncpy');
  late final _stpncpy = _stpncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strlcpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strlcpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _strlcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strlcpy');
  late final _strlcpy = _strlcpyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strlcat(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strlcat(
      __dest,
      __src,
      __n,
    );
  }

  late final _strlcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strlcat');
  late final _strlcat = _strlcatPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void __assert_fail(
    ffi.Pointer<ffi.Char> __assertion,
    ffi.Pointer<ffi.Char> __file,
    int __line,
    ffi.Pointer<ffi.Char> __function,
  ) {
    return ___assert_fail(
      __assertion,
      __file,
      __line,
      __function,
    );
  }

  late final ___assert_failPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>)>>('__assert_fail');
  late final ___assert_fail = ___assert_failPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>)>();

  void __assert_perror_fail(
    int __errnum,
    ffi.Pointer<ffi.Char> __file,
    int __line,
    ffi.Pointer<ffi.Char> __function,
  ) {
    return ___assert_perror_fail(
      __errnum,
      __file,
      __line,
      __function,
    );
  }

  late final ___assert_perror_failPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>)>>('__assert_perror_fail');
  late final ___assert_perror_fail = ___assert_perror_failPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  void __assert(
    ffi.Pointer<ffi.Char> __assertion,
    ffi.Pointer<ffi.Char> __file,
    int __line,
  ) {
    return ___assert(
      __assertion,
      __file,
      __line,
    );
  }

  late final ___assertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('__assert');
  late final ___assert = ___assertPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void wasm_byte_vec_new_empty(
    ffi.Pointer<wasm_byte_vec_t> out,
  ) {
    return _wasm_byte_vec_new_empty(
      out,
    );
  }

  late final _wasm_byte_vec_new_emptyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasm_byte_vec_t>)>>(
      'wasm_byte_vec_new_empty');
  late final _wasm_byte_vec_new_empty = _wasm_byte_vec_new_emptyPtr
      .asFunction<void Function(ffi.Pointer<wasm_byte_vec_t>)>();

  void wasm_byte_vec_new_uninitialized(
    ffi.Pointer<wasm_byte_vec_t> out,
    int arg1,
  ) {
    return _wasm_byte_vec_new_uninitialized(
      out,
      arg1,
    );
  }

  late final _wasm_byte_vec_new_uninitializedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_byte_vec_t>,
              ffi.Size)>>('wasm_byte_vec_new_uninitialized');
  late final _wasm_byte_vec_new_uninitialized =
      _wasm_byte_vec_new_uninitializedPtr
          .asFunction<void Function(ffi.Pointer<wasm_byte_vec_t>, int)>();

  void wasm_byte_vec_new(
    ffi.Pointer<wasm_byte_vec_t> out,
    int arg1,
    ffi.Pointer<wasm_byte_t> arg2,
  ) {
    return _wasm_byte_vec_new(
      out,
      arg1,
      arg2,
    );
  }

  late final _wasm_byte_vec_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_byte_vec_t>, ffi.Size,
              ffi.Pointer<wasm_byte_t>)>>('wasm_byte_vec_new');
  late final _wasm_byte_vec_new = _wasm_byte_vec_newPtr.asFunction<
      void Function(
          ffi.Pointer<wasm_byte_vec_t>, int, ffi.Pointer<wasm_byte_t>)>();

  void wasm_byte_vec_copy(
    ffi.Pointer<wasm_byte_vec_t> out,
    ffi.Pointer<wasm_byte_vec_t> arg1,
  ) {
    return _wasm_byte_vec_copy(
      out,
      arg1,
    );
  }

  late final _wasm_byte_vec_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_byte_vec_t>,
              ffi.Pointer<wasm_byte_vec_t>)>>('wasm_byte_vec_copy');
  late final _wasm_byte_vec_copy = _wasm_byte_vec_copyPtr.asFunction<
      void Function(
          ffi.Pointer<wasm_byte_vec_t>, ffi.Pointer<wasm_byte_vec_t>)>();

  void wasm_byte_vec_delete(
    ffi.Pointer<wasm_byte_vec_t> arg0,
  ) {
    return _wasm_byte_vec_delete(
      arg0,
    );
  }

  late final _wasm_byte_vec_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasm_byte_vec_t>)>>(
      'wasm_byte_vec_delete');
  late final _wasm_byte_vec_delete = _wasm_byte_vec_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_byte_vec_t>)>();

  void wasm_config_delete(
    ffi.Pointer<wasm_config_t> arg0,
  ) {
    return _wasm_config_delete(
      arg0,
    );
  }

  late final _wasm_config_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasm_config_t>)>>(
      'wasm_config_delete');
  late final _wasm_config_delete = _wasm_config_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_config_t>)>();

  ffi.Pointer<wasm_config_t> wasm_config_new() {
    return _wasm_config_new();
  }

  late final _wasm_config_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wasm_config_t> Function()>>(
          'wasm_config_new');
  late final _wasm_config_new =
      _wasm_config_newPtr.asFunction<ffi.Pointer<wasm_config_t> Function()>();

  void wasm_engine_delete(
    ffi.Pointer<wasm_engine_t> arg0,
  ) {
    return _wasm_engine_delete(
      arg0,
    );
  }

  late final _wasm_engine_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasm_engine_t>)>>(
      'wasm_engine_delete');
  late final _wasm_engine_delete = _wasm_engine_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_engine_t>)>();

  ffi.Pointer<wasm_engine_t> wasm_engine_new() {
    return _wasm_engine_new();
  }

  late final _wasm_engine_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wasm_engine_t> Function()>>(
          'wasm_engine_new');
  late final _wasm_engine_new =
      _wasm_engine_newPtr.asFunction<ffi.Pointer<wasm_engine_t> Function()>();

  ffi.Pointer<wasm_engine_t> wasm_engine_new_with_config(
    ffi.Pointer<wasm_config_t> arg0,
  ) {
    return _wasm_engine_new_with_config(
      arg0,
    );
  }

  late final _wasm_engine_new_with_configPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_engine_t> Function(
              ffi.Pointer<wasm_config_t>)>>('wasm_engine_new_with_config');
  late final _wasm_engine_new_with_config =
      _wasm_engine_new_with_configPtr.asFunction<
          ffi.Pointer<wasm_engine_t> Function(ffi.Pointer<wasm_config_t>)>();

  void wasm_store_delete(
    ffi.Pointer<wasm_store_t> arg0,
  ) {
    return _wasm_store_delete(
      arg0,
    );
  }

  late final _wasm_store_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasm_store_t>)>>(
          'wasm_store_delete');
  late final _wasm_store_delete = _wasm_store_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_store_t>)>();

  ffi.Pointer<wasm_store_t> wasm_store_new(
    ffi.Pointer<wasm_engine_t> arg0,
  ) {
    return _wasm_store_new(
      arg0,
    );
  }

  late final _wasm_store_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_store_t> Function(
              ffi.Pointer<wasm_engine_t>)>>('wasm_store_new');
  late final _wasm_store_new = _wasm_store_newPtr.asFunction<
      ffi.Pointer<wasm_store_t> Function(ffi.Pointer<wasm_engine_t>)>();

  late final ffi.Pointer<ffi.Uint32> _wasm_limits_max_default =
      _lookup<ffi.Uint32>('wasm_limits_max_default');

  int get wasm_limits_max_default => _wasm_limits_max_default.value;

  void wasm_valtype_delete(
    ffi.Pointer<wasm_valtype_t> arg0,
  ) {
    return _wasm_valtype_delete(
      arg0,
    );
  }

  late final _wasm_valtype_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasm_valtype_t>)>>(
      'wasm_valtype_delete');
  late final _wasm_valtype_delete = _wasm_valtype_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_valtype_t>)>();

  void wasm_valtype_vec_new_empty(
    ffi.Pointer<wasm_valtype_vec_t> out,
  ) {
    return _wasm_valtype_vec_new_empty(
      out,
    );
  }

  late final _wasm_valtype_vec_new_emptyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<wasm_valtype_vec_t>)>>(
      'wasm_valtype_vec_new_empty');
  late final _wasm_valtype_vec_new_empty = _wasm_valtype_vec_new_emptyPtr
      .asFunction<void Function(ffi.Pointer<wasm_valtype_vec_t>)>();

  void wasm_valtype_vec_new_uninitialized(
    ffi.Pointer<wasm_valtype_vec_t> out,
    int arg1,
  ) {
    return _wasm_valtype_vec_new_uninitialized(
      out,
      arg1,
    );
  }

  late final _wasm_valtype_vec_new_uninitializedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_valtype_vec_t>,
              ffi.Size)>>('wasm_valtype_vec_new_uninitialized');
  late final _wasm_valtype_vec_new_uninitialized =
      _wasm_valtype_vec_new_uninitializedPtr
          .asFunction<void Function(ffi.Pointer<wasm_valtype_vec_t>, int)>();

  void wasm_valtype_vec_new(
    ffi.Pointer<wasm_valtype_vec_t> out,
    int arg1,
    ffi.Pointer<ffi.Pointer<wasm_valtype_t>> arg2,
  ) {
    return _wasm_valtype_vec_new(
      out,
      arg1,
      arg2,
    );
  }

  late final _wasm_valtype_vec_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<wasm_valtype_vec_t>, ffi.Size,
                  ffi.Pointer<ffi.Pointer<wasm_valtype_t>>)>>(
      'wasm_valtype_vec_new');
  late final _wasm_valtype_vec_new = _wasm_valtype_vec_newPtr.asFunction<
      void Function(ffi.Pointer<wasm_valtype_vec_t>, int,
          ffi.Pointer<ffi.Pointer<wasm_valtype_t>>)>();

  void wasm_valtype_vec_copy(
    ffi.Pointer<wasm_valtype_vec_t> out,
    ffi.Pointer<wasm_valtype_vec_t> arg1,
  ) {
    return _wasm_valtype_vec_copy(
      out,
      arg1,
    );
  }

  late final _wasm_valtype_vec_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_valtype_vec_t>,
              ffi.Pointer<wasm_valtype_vec_t>)>>('wasm_valtype_vec_copy');
  late final _wasm_valtype_vec_copy = _wasm_valtype_vec_copyPtr.asFunction<
      void Function(
          ffi.Pointer<wasm_valtype_vec_t>, ffi.Pointer<wasm_valtype_vec_t>)>();

  void wasm_valtype_vec_delete(
    ffi.Pointer<wasm_valtype_vec_t> arg0,
  ) {
    return _wasm_valtype_vec_delete(
      arg0,
    );
  }

  late final _wasm_valtype_vec_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<wasm_valtype_vec_t>)>>(
      'wasm_valtype_vec_delete');
  late final _wasm_valtype_vec_delete = _wasm_valtype_vec_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_valtype_vec_t>)>();

  ffi.Pointer<wasm_valtype_t> wasm_valtype_copy(
    ffi.Pointer<wasm_valtype_t> arg0,
  ) {
    return _wasm_valtype_copy(
      arg0,
    );
  }

  late final _wasm_valtype_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_valtype_t> Function(
              ffi.Pointer<wasm_valtype_t>)>>('wasm_valtype_copy');
  late final _wasm_valtype_copy = _wasm_valtype_copyPtr.asFunction<
      ffi.Pointer<wasm_valtype_t> Function(ffi.Pointer<wasm_valtype_t>)>();

  ffi.Pointer<wasm_valtype_t> wasm_valtype_new(
    int arg0,
  ) {
    return _wasm_valtype_new(
      arg0,
    );
  }

  late final _wasm_valtype_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_valtype_t> Function(
              wasm_valkind_t)>>('wasm_valtype_new');
  late final _wasm_valtype_new = _wasm_valtype_newPtr
      .asFunction<ffi.Pointer<wasm_valtype_t> Function(int)>();

  int wasm_valtype_kind(
    ffi.Pointer<wasm_valtype_t> arg0,
  ) {
    return _wasm_valtype_kind(
      arg0,
    );
  }

  late final _wasm_valtype_kindPtr = _lookup<
      ffi.NativeFunction<
          wasm_valkind_t Function(
              ffi.Pointer<wasm_valtype_t>)>>('wasm_valtype_kind');
  late final _wasm_valtype_kind = _wasm_valtype_kindPtr
      .asFunction<int Function(ffi.Pointer<wasm_valtype_t>)>();

  void wasm_functype_delete(
    ffi.Pointer<wasm_functype_t> arg0,
  ) {
    return _wasm_functype_delete(
      arg0,
    );
  }

  late final _wasm_functype_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasm_functype_t>)>>(
      'wasm_functype_delete');
  late final _wasm_functype_delete = _wasm_functype_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_functype_t>)>();

  void wasm_functype_vec_new_empty(
    ffi.Pointer<wasm_functype_vec_t> out,
  ) {
    return _wasm_functype_vec_new_empty(
      out,
    );
  }

  late final _wasm_functype_vec_new_emptyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<wasm_functype_vec_t>)>>(
      'wasm_functype_vec_new_empty');
  late final _wasm_functype_vec_new_empty = _wasm_functype_vec_new_emptyPtr
      .asFunction<void Function(ffi.Pointer<wasm_functype_vec_t>)>();

  void wasm_functype_vec_new_uninitialized(
    ffi.Pointer<wasm_functype_vec_t> out,
    int arg1,
  ) {
    return _wasm_functype_vec_new_uninitialized(
      out,
      arg1,
    );
  }

  late final _wasm_functype_vec_new_uninitializedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_functype_vec_t>,
              ffi.Size)>>('wasm_functype_vec_new_uninitialized');
  late final _wasm_functype_vec_new_uninitialized =
      _wasm_functype_vec_new_uninitializedPtr
          .asFunction<void Function(ffi.Pointer<wasm_functype_vec_t>, int)>();

  void wasm_functype_vec_new(
    ffi.Pointer<wasm_functype_vec_t> out,
    int arg1,
    ffi.Pointer<ffi.Pointer<wasm_functype_t>> arg2,
  ) {
    return _wasm_functype_vec_new(
      out,
      arg1,
      arg2,
    );
  }

  late final _wasm_functype_vec_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<wasm_functype_vec_t>, ffi.Size,
                  ffi.Pointer<ffi.Pointer<wasm_functype_t>>)>>(
      'wasm_functype_vec_new');
  late final _wasm_functype_vec_new = _wasm_functype_vec_newPtr.asFunction<
      void Function(ffi.Pointer<wasm_functype_vec_t>, int,
          ffi.Pointer<ffi.Pointer<wasm_functype_t>>)>();

  void wasm_functype_vec_copy(
    ffi.Pointer<wasm_functype_vec_t> out,
    ffi.Pointer<wasm_functype_vec_t> arg1,
  ) {
    return _wasm_functype_vec_copy(
      out,
      arg1,
    );
  }

  late final _wasm_functype_vec_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_functype_vec_t>,
              ffi.Pointer<wasm_functype_vec_t>)>>('wasm_functype_vec_copy');
  late final _wasm_functype_vec_copy = _wasm_functype_vec_copyPtr.asFunction<
      void Function(ffi.Pointer<wasm_functype_vec_t>,
          ffi.Pointer<wasm_functype_vec_t>)>();

  void wasm_functype_vec_delete(
    ffi.Pointer<wasm_functype_vec_t> arg0,
  ) {
    return _wasm_functype_vec_delete(
      arg0,
    );
  }

  late final _wasm_functype_vec_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<wasm_functype_vec_t>)>>(
      'wasm_functype_vec_delete');
  late final _wasm_functype_vec_delete = _wasm_functype_vec_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_functype_vec_t>)>();

  ffi.Pointer<wasm_functype_t> wasm_functype_copy(
    ffi.Pointer<wasm_functype_t> arg0,
  ) {
    return _wasm_functype_copy(
      arg0,
    );
  }

  late final _wasm_functype_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_functype_t> Function(
              ffi.Pointer<wasm_functype_t>)>>('wasm_functype_copy');
  late final _wasm_functype_copy = _wasm_functype_copyPtr.asFunction<
      ffi.Pointer<wasm_functype_t> Function(ffi.Pointer<wasm_functype_t>)>();

  ffi.Pointer<wasm_functype_t> wasm_functype_new(
    ffi.Pointer<wasm_valtype_vec_t> params,
    ffi.Pointer<wasm_valtype_vec_t> results,
  ) {
    return _wasm_functype_new(
      params,
      results,
    );
  }

  late final _wasm_functype_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_functype_t> Function(ffi.Pointer<wasm_valtype_vec_t>,
              ffi.Pointer<wasm_valtype_vec_t>)>>('wasm_functype_new');
  late final _wasm_functype_new = _wasm_functype_newPtr.asFunction<
      ffi.Pointer<wasm_functype_t> Function(
          ffi.Pointer<wasm_valtype_vec_t>, ffi.Pointer<wasm_valtype_vec_t>)>();

  ffi.Pointer<wasm_valtype_vec_t> wasm_functype_params(
    ffi.Pointer<wasm_functype_t> arg0,
  ) {
    return _wasm_functype_params(
      arg0,
    );
  }

  late final _wasm_functype_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_valtype_vec_t> Function(
              ffi.Pointer<wasm_functype_t>)>>('wasm_functype_params');
  late final _wasm_functype_params = _wasm_functype_paramsPtr.asFunction<
      ffi.Pointer<wasm_valtype_vec_t> Function(ffi.Pointer<wasm_functype_t>)>();

  ffi.Pointer<wasm_valtype_vec_t> wasm_functype_results(
    ffi.Pointer<wasm_functype_t> arg0,
  ) {
    return _wasm_functype_results(
      arg0,
    );
  }

  late final _wasm_functype_resultsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_valtype_vec_t> Function(
              ffi.Pointer<wasm_functype_t>)>>('wasm_functype_results');
  late final _wasm_functype_results = _wasm_functype_resultsPtr.asFunction<
      ffi.Pointer<wasm_valtype_vec_t> Function(ffi.Pointer<wasm_functype_t>)>();

  void wasm_globaltype_delete(
    ffi.Pointer<wasm_globaltype_t> arg0,
  ) {
    return _wasm_globaltype_delete(
      arg0,
    );
  }

  late final _wasm_globaltype_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<wasm_globaltype_t>)>>(
      'wasm_globaltype_delete');
  late final _wasm_globaltype_delete = _wasm_globaltype_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_globaltype_t>)>();

  void wasm_globaltype_vec_new_empty(
    ffi.Pointer<wasm_globaltype_vec_t> out,
  ) {
    return _wasm_globaltype_vec_new_empty(
      out,
    );
  }

  late final _wasm_globaltype_vec_new_emptyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<wasm_globaltype_vec_t>)>>(
      'wasm_globaltype_vec_new_empty');
  late final _wasm_globaltype_vec_new_empty = _wasm_globaltype_vec_new_emptyPtr
      .asFunction<void Function(ffi.Pointer<wasm_globaltype_vec_t>)>();

  void wasm_globaltype_vec_new_uninitialized(
    ffi.Pointer<wasm_globaltype_vec_t> out,
    int arg1,
  ) {
    return _wasm_globaltype_vec_new_uninitialized(
      out,
      arg1,
    );
  }

  late final _wasm_globaltype_vec_new_uninitializedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_globaltype_vec_t>,
              ffi.Size)>>('wasm_globaltype_vec_new_uninitialized');
  late final _wasm_globaltype_vec_new_uninitialized =
      _wasm_globaltype_vec_new_uninitializedPtr
          .asFunction<void Function(ffi.Pointer<wasm_globaltype_vec_t>, int)>();

  void wasm_globaltype_vec_new(
    ffi.Pointer<wasm_globaltype_vec_t> out,
    int arg1,
    ffi.Pointer<ffi.Pointer<wasm_globaltype_t>> arg2,
  ) {
    return _wasm_globaltype_vec_new(
      out,
      arg1,
      arg2,
    );
  }

  late final _wasm_globaltype_vec_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<wasm_globaltype_vec_t>, ffi.Size,
                  ffi.Pointer<ffi.Pointer<wasm_globaltype_t>>)>>(
      'wasm_globaltype_vec_new');
  late final _wasm_globaltype_vec_new = _wasm_globaltype_vec_newPtr.asFunction<
      void Function(ffi.Pointer<wasm_globaltype_vec_t>, int,
          ffi.Pointer<ffi.Pointer<wasm_globaltype_t>>)>();

  void wasm_globaltype_vec_copy(
    ffi.Pointer<wasm_globaltype_vec_t> out,
    ffi.Pointer<wasm_globaltype_vec_t> arg1,
  ) {
    return _wasm_globaltype_vec_copy(
      out,
      arg1,
    );
  }

  late final _wasm_globaltype_vec_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_globaltype_vec_t>,
              ffi.Pointer<wasm_globaltype_vec_t>)>>('wasm_globaltype_vec_copy');
  late final _wasm_globaltype_vec_copy =
      _wasm_globaltype_vec_copyPtr.asFunction<
          void Function(ffi.Pointer<wasm_globaltype_vec_t>,
              ffi.Pointer<wasm_globaltype_vec_t>)>();

  void wasm_globaltype_vec_delete(
    ffi.Pointer<wasm_globaltype_vec_t> arg0,
  ) {
    return _wasm_globaltype_vec_delete(
      arg0,
    );
  }

  late final _wasm_globaltype_vec_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<wasm_globaltype_vec_t>)>>(
      'wasm_globaltype_vec_delete');
  late final _wasm_globaltype_vec_delete = _wasm_globaltype_vec_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_globaltype_vec_t>)>();

  ffi.Pointer<wasm_globaltype_t> wasm_globaltype_copy(
    ffi.Pointer<wasm_globaltype_t> arg0,
  ) {
    return _wasm_globaltype_copy(
      arg0,
    );
  }

  late final _wasm_globaltype_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_globaltype_t> Function(
              ffi.Pointer<wasm_globaltype_t>)>>('wasm_globaltype_copy');
  late final _wasm_globaltype_copy = _wasm_globaltype_copyPtr.asFunction<
      ffi.Pointer<wasm_globaltype_t> Function(
          ffi.Pointer<wasm_globaltype_t>)>();

  ffi.Pointer<wasm_globaltype_t> wasm_globaltype_new(
    ffi.Pointer<wasm_valtype_t> arg0,
    int arg1,
  ) {
    return _wasm_globaltype_new(
      arg0,
      arg1,
    );
  }

  late final _wasm_globaltype_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_globaltype_t> Function(ffi.Pointer<wasm_valtype_t>,
              wasm_mutability_t)>>('wasm_globaltype_new');
  late final _wasm_globaltype_new = _wasm_globaltype_newPtr.asFunction<
      ffi.Pointer<wasm_globaltype_t> Function(
          ffi.Pointer<wasm_valtype_t>, int)>();

  ffi.Pointer<wasm_valtype_t> wasm_globaltype_content(
    ffi.Pointer<wasm_globaltype_t> arg0,
  ) {
    return _wasm_globaltype_content(
      arg0,
    );
  }

  late final _wasm_globaltype_contentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_valtype_t> Function(
              ffi.Pointer<wasm_globaltype_t>)>>('wasm_globaltype_content');
  late final _wasm_globaltype_content = _wasm_globaltype_contentPtr.asFunction<
      ffi.Pointer<wasm_valtype_t> Function(ffi.Pointer<wasm_globaltype_t>)>();

  int wasm_globaltype_mutability(
    ffi.Pointer<wasm_globaltype_t> arg0,
  ) {
    return _wasm_globaltype_mutability(
      arg0,
    );
  }

  late final _wasm_globaltype_mutabilityPtr = _lookup<
      ffi.NativeFunction<
          wasm_mutability_t Function(
              ffi.Pointer<wasm_globaltype_t>)>>('wasm_globaltype_mutability');
  late final _wasm_globaltype_mutability = _wasm_globaltype_mutabilityPtr
      .asFunction<int Function(ffi.Pointer<wasm_globaltype_t>)>();

  void wasm_tabletype_delete(
    ffi.Pointer<wasm_tabletype_t> arg0,
  ) {
    return _wasm_tabletype_delete(
      arg0,
    );
  }

  late final _wasm_tabletype_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasm_tabletype_t>)>>(
      'wasm_tabletype_delete');
  late final _wasm_tabletype_delete = _wasm_tabletype_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_tabletype_t>)>();

  void wasm_tabletype_vec_new_empty(
    ffi.Pointer<wasm_tabletype_vec_t> out,
  ) {
    return _wasm_tabletype_vec_new_empty(
      out,
    );
  }

  late final _wasm_tabletype_vec_new_emptyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<wasm_tabletype_vec_t>)>>(
      'wasm_tabletype_vec_new_empty');
  late final _wasm_tabletype_vec_new_empty = _wasm_tabletype_vec_new_emptyPtr
      .asFunction<void Function(ffi.Pointer<wasm_tabletype_vec_t>)>();

  void wasm_tabletype_vec_new_uninitialized(
    ffi.Pointer<wasm_tabletype_vec_t> out,
    int arg1,
  ) {
    return _wasm_tabletype_vec_new_uninitialized(
      out,
      arg1,
    );
  }

  late final _wasm_tabletype_vec_new_uninitializedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_tabletype_vec_t>,
              ffi.Size)>>('wasm_tabletype_vec_new_uninitialized');
  late final _wasm_tabletype_vec_new_uninitialized =
      _wasm_tabletype_vec_new_uninitializedPtr
          .asFunction<void Function(ffi.Pointer<wasm_tabletype_vec_t>, int)>();

  void wasm_tabletype_vec_new(
    ffi.Pointer<wasm_tabletype_vec_t> out,
    int arg1,
    ffi.Pointer<ffi.Pointer<wasm_tabletype_t>> arg2,
  ) {
    return _wasm_tabletype_vec_new(
      out,
      arg1,
      arg2,
    );
  }

  late final _wasm_tabletype_vec_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<wasm_tabletype_vec_t>, ffi.Size,
                  ffi.Pointer<ffi.Pointer<wasm_tabletype_t>>)>>(
      'wasm_tabletype_vec_new');
  late final _wasm_tabletype_vec_new = _wasm_tabletype_vec_newPtr.asFunction<
      void Function(ffi.Pointer<wasm_tabletype_vec_t>, int,
          ffi.Pointer<ffi.Pointer<wasm_tabletype_t>>)>();

  void wasm_tabletype_vec_copy(
    ffi.Pointer<wasm_tabletype_vec_t> out,
    ffi.Pointer<wasm_tabletype_vec_t> arg1,
  ) {
    return _wasm_tabletype_vec_copy(
      out,
      arg1,
    );
  }

  late final _wasm_tabletype_vec_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_tabletype_vec_t>,
              ffi.Pointer<wasm_tabletype_vec_t>)>>('wasm_tabletype_vec_copy');
  late final _wasm_tabletype_vec_copy = _wasm_tabletype_vec_copyPtr.asFunction<
      void Function(ffi.Pointer<wasm_tabletype_vec_t>,
          ffi.Pointer<wasm_tabletype_vec_t>)>();

  void wasm_tabletype_vec_delete(
    ffi.Pointer<wasm_tabletype_vec_t> arg0,
  ) {
    return _wasm_tabletype_vec_delete(
      arg0,
    );
  }

  late final _wasm_tabletype_vec_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<wasm_tabletype_vec_t>)>>('wasm_tabletype_vec_delete');
  late final _wasm_tabletype_vec_delete = _wasm_tabletype_vec_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_tabletype_vec_t>)>();

  ffi.Pointer<wasm_tabletype_t> wasm_tabletype_copy(
    ffi.Pointer<wasm_tabletype_t> arg0,
  ) {
    return _wasm_tabletype_copy(
      arg0,
    );
  }

  late final _wasm_tabletype_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_tabletype_t> Function(
              ffi.Pointer<wasm_tabletype_t>)>>('wasm_tabletype_copy');
  late final _wasm_tabletype_copy = _wasm_tabletype_copyPtr.asFunction<
      ffi.Pointer<wasm_tabletype_t> Function(ffi.Pointer<wasm_tabletype_t>)>();

  ffi.Pointer<wasm_tabletype_t> wasm_tabletype_new(
    ffi.Pointer<wasm_valtype_t> arg0,
    ffi.Pointer<wasm_limits_t> arg1,
  ) {
    return _wasm_tabletype_new(
      arg0,
      arg1,
    );
  }

  late final _wasm_tabletype_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_tabletype_t> Function(ffi.Pointer<wasm_valtype_t>,
              ffi.Pointer<wasm_limits_t>)>>('wasm_tabletype_new');
  late final _wasm_tabletype_new = _wasm_tabletype_newPtr.asFunction<
      ffi.Pointer<wasm_tabletype_t> Function(
          ffi.Pointer<wasm_valtype_t>, ffi.Pointer<wasm_limits_t>)>();

  ffi.Pointer<wasm_valtype_t> wasm_tabletype_element(
    ffi.Pointer<wasm_tabletype_t> arg0,
  ) {
    return _wasm_tabletype_element(
      arg0,
    );
  }

  late final _wasm_tabletype_elementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_valtype_t> Function(
              ffi.Pointer<wasm_tabletype_t>)>>('wasm_tabletype_element');
  late final _wasm_tabletype_element = _wasm_tabletype_elementPtr.asFunction<
      ffi.Pointer<wasm_valtype_t> Function(ffi.Pointer<wasm_tabletype_t>)>();

  ffi.Pointer<wasm_limits_t> wasm_tabletype_limits(
    ffi.Pointer<wasm_tabletype_t> arg0,
  ) {
    return _wasm_tabletype_limits(
      arg0,
    );
  }

  late final _wasm_tabletype_limitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_limits_t> Function(
              ffi.Pointer<wasm_tabletype_t>)>>('wasm_tabletype_limits');
  late final _wasm_tabletype_limits = _wasm_tabletype_limitsPtr.asFunction<
      ffi.Pointer<wasm_limits_t> Function(ffi.Pointer<wasm_tabletype_t>)>();

  void wasm_memorytype_delete(
    ffi.Pointer<wasm_memorytype_t> arg0,
  ) {
    return _wasm_memorytype_delete(
      arg0,
    );
  }

  late final _wasm_memorytype_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<wasm_memorytype_t>)>>(
      'wasm_memorytype_delete');
  late final _wasm_memorytype_delete = _wasm_memorytype_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_memorytype_t>)>();

  void wasm_memorytype_vec_new_empty(
    ffi.Pointer<wasm_memorytype_vec_t> out,
  ) {
    return _wasm_memorytype_vec_new_empty(
      out,
    );
  }

  late final _wasm_memorytype_vec_new_emptyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<wasm_memorytype_vec_t>)>>(
      'wasm_memorytype_vec_new_empty');
  late final _wasm_memorytype_vec_new_empty = _wasm_memorytype_vec_new_emptyPtr
      .asFunction<void Function(ffi.Pointer<wasm_memorytype_vec_t>)>();

  void wasm_memorytype_vec_new_uninitialized(
    ffi.Pointer<wasm_memorytype_vec_t> out,
    int arg1,
  ) {
    return _wasm_memorytype_vec_new_uninitialized(
      out,
      arg1,
    );
  }

  late final _wasm_memorytype_vec_new_uninitializedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_memorytype_vec_t>,
              ffi.Size)>>('wasm_memorytype_vec_new_uninitialized');
  late final _wasm_memorytype_vec_new_uninitialized =
      _wasm_memorytype_vec_new_uninitializedPtr
          .asFunction<void Function(ffi.Pointer<wasm_memorytype_vec_t>, int)>();

  void wasm_memorytype_vec_new(
    ffi.Pointer<wasm_memorytype_vec_t> out,
    int arg1,
    ffi.Pointer<ffi.Pointer<wasm_memorytype_t>> arg2,
  ) {
    return _wasm_memorytype_vec_new(
      out,
      arg1,
      arg2,
    );
  }

  late final _wasm_memorytype_vec_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<wasm_memorytype_vec_t>, ffi.Size,
                  ffi.Pointer<ffi.Pointer<wasm_memorytype_t>>)>>(
      'wasm_memorytype_vec_new');
  late final _wasm_memorytype_vec_new = _wasm_memorytype_vec_newPtr.asFunction<
      void Function(ffi.Pointer<wasm_memorytype_vec_t>, int,
          ffi.Pointer<ffi.Pointer<wasm_memorytype_t>>)>();

  void wasm_memorytype_vec_copy(
    ffi.Pointer<wasm_memorytype_vec_t> out,
    ffi.Pointer<wasm_memorytype_vec_t> arg1,
  ) {
    return _wasm_memorytype_vec_copy(
      out,
      arg1,
    );
  }

  late final _wasm_memorytype_vec_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_memorytype_vec_t>,
              ffi.Pointer<wasm_memorytype_vec_t>)>>('wasm_memorytype_vec_copy');
  late final _wasm_memorytype_vec_copy =
      _wasm_memorytype_vec_copyPtr.asFunction<
          void Function(ffi.Pointer<wasm_memorytype_vec_t>,
              ffi.Pointer<wasm_memorytype_vec_t>)>();

  void wasm_memorytype_vec_delete(
    ffi.Pointer<wasm_memorytype_vec_t> arg0,
  ) {
    return _wasm_memorytype_vec_delete(
      arg0,
    );
  }

  late final _wasm_memorytype_vec_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<wasm_memorytype_vec_t>)>>(
      'wasm_memorytype_vec_delete');
  late final _wasm_memorytype_vec_delete = _wasm_memorytype_vec_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_memorytype_vec_t>)>();

  ffi.Pointer<wasm_memorytype_t> wasm_memorytype_copy(
    ffi.Pointer<wasm_memorytype_t> arg0,
  ) {
    return _wasm_memorytype_copy(
      arg0,
    );
  }

  late final _wasm_memorytype_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_memorytype_t> Function(
              ffi.Pointer<wasm_memorytype_t>)>>('wasm_memorytype_copy');
  late final _wasm_memorytype_copy = _wasm_memorytype_copyPtr.asFunction<
      ffi.Pointer<wasm_memorytype_t> Function(
          ffi.Pointer<wasm_memorytype_t>)>();

  ffi.Pointer<wasm_memorytype_t> wasm_memorytype_new(
    ffi.Pointer<wasm_limits_t> arg0,
  ) {
    return _wasm_memorytype_new(
      arg0,
    );
  }

  late final _wasm_memorytype_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_memorytype_t> Function(
              ffi.Pointer<wasm_limits_t>)>>('wasm_memorytype_new');
  late final _wasm_memorytype_new = _wasm_memorytype_newPtr.asFunction<
      ffi.Pointer<wasm_memorytype_t> Function(ffi.Pointer<wasm_limits_t>)>();

  ffi.Pointer<wasm_limits_t> wasm_memorytype_limits(
    ffi.Pointer<wasm_memorytype_t> arg0,
  ) {
    return _wasm_memorytype_limits(
      arg0,
    );
  }

  late final _wasm_memorytype_limitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_limits_t> Function(
              ffi.Pointer<wasm_memorytype_t>)>>('wasm_memorytype_limits');
  late final _wasm_memorytype_limits = _wasm_memorytype_limitsPtr.asFunction<
      ffi.Pointer<wasm_limits_t> Function(ffi.Pointer<wasm_memorytype_t>)>();

  void wasm_externtype_delete(
    ffi.Pointer<wasm_externtype_t> arg0,
  ) {
    return _wasm_externtype_delete(
      arg0,
    );
  }

  late final _wasm_externtype_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<wasm_externtype_t>)>>(
      'wasm_externtype_delete');
  late final _wasm_externtype_delete = _wasm_externtype_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_externtype_t>)>();

  void wasm_externtype_vec_new_empty(
    ffi.Pointer<wasm_externtype_vec_t> out,
  ) {
    return _wasm_externtype_vec_new_empty(
      out,
    );
  }

  late final _wasm_externtype_vec_new_emptyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<wasm_externtype_vec_t>)>>(
      'wasm_externtype_vec_new_empty');
  late final _wasm_externtype_vec_new_empty = _wasm_externtype_vec_new_emptyPtr
      .asFunction<void Function(ffi.Pointer<wasm_externtype_vec_t>)>();

  void wasm_externtype_vec_new_uninitialized(
    ffi.Pointer<wasm_externtype_vec_t> out,
    int arg1,
  ) {
    return _wasm_externtype_vec_new_uninitialized(
      out,
      arg1,
    );
  }

  late final _wasm_externtype_vec_new_uninitializedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_externtype_vec_t>,
              ffi.Size)>>('wasm_externtype_vec_new_uninitialized');
  late final _wasm_externtype_vec_new_uninitialized =
      _wasm_externtype_vec_new_uninitializedPtr
          .asFunction<void Function(ffi.Pointer<wasm_externtype_vec_t>, int)>();

  void wasm_externtype_vec_new(
    ffi.Pointer<wasm_externtype_vec_t> out,
    int arg1,
    ffi.Pointer<ffi.Pointer<wasm_externtype_t>> arg2,
  ) {
    return _wasm_externtype_vec_new(
      out,
      arg1,
      arg2,
    );
  }

  late final _wasm_externtype_vec_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<wasm_externtype_vec_t>, ffi.Size,
                  ffi.Pointer<ffi.Pointer<wasm_externtype_t>>)>>(
      'wasm_externtype_vec_new');
  late final _wasm_externtype_vec_new = _wasm_externtype_vec_newPtr.asFunction<
      void Function(ffi.Pointer<wasm_externtype_vec_t>, int,
          ffi.Pointer<ffi.Pointer<wasm_externtype_t>>)>();

  void wasm_externtype_vec_copy(
    ffi.Pointer<wasm_externtype_vec_t> out,
    ffi.Pointer<wasm_externtype_vec_t> arg1,
  ) {
    return _wasm_externtype_vec_copy(
      out,
      arg1,
    );
  }

  late final _wasm_externtype_vec_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_externtype_vec_t>,
              ffi.Pointer<wasm_externtype_vec_t>)>>('wasm_externtype_vec_copy');
  late final _wasm_externtype_vec_copy =
      _wasm_externtype_vec_copyPtr.asFunction<
          void Function(ffi.Pointer<wasm_externtype_vec_t>,
              ffi.Pointer<wasm_externtype_vec_t>)>();

  void wasm_externtype_vec_delete(
    ffi.Pointer<wasm_externtype_vec_t> arg0,
  ) {
    return _wasm_externtype_vec_delete(
      arg0,
    );
  }

  late final _wasm_externtype_vec_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<wasm_externtype_vec_t>)>>(
      'wasm_externtype_vec_delete');
  late final _wasm_externtype_vec_delete = _wasm_externtype_vec_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_externtype_vec_t>)>();

  ffi.Pointer<wasm_externtype_t> wasm_externtype_copy(
    ffi.Pointer<wasm_externtype_t> arg0,
  ) {
    return _wasm_externtype_copy(
      arg0,
    );
  }

  late final _wasm_externtype_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_externtype_t> Function(
              ffi.Pointer<wasm_externtype_t>)>>('wasm_externtype_copy');
  late final _wasm_externtype_copy = _wasm_externtype_copyPtr.asFunction<
      ffi.Pointer<wasm_externtype_t> Function(
          ffi.Pointer<wasm_externtype_t>)>();

  int wasm_externtype_kind(
    ffi.Pointer<wasm_externtype_t> arg0,
  ) {
    return _wasm_externtype_kind(
      arg0,
    );
  }

  late final _wasm_externtype_kindPtr = _lookup<
      ffi.NativeFunction<
          wasm_externkind_t Function(
              ffi.Pointer<wasm_externtype_t>)>>('wasm_externtype_kind');
  late final _wasm_externtype_kind = _wasm_externtype_kindPtr
      .asFunction<int Function(ffi.Pointer<wasm_externtype_t>)>();

  ffi.Pointer<wasm_externtype_t> wasm_functype_as_externtype(
    ffi.Pointer<wasm_functype_t> arg0,
  ) {
    return _wasm_functype_as_externtype(
      arg0,
    );
  }

  late final _wasm_functype_as_externtypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_externtype_t> Function(
              ffi.Pointer<wasm_functype_t>)>>('wasm_functype_as_externtype');
  late final _wasm_functype_as_externtype =
      _wasm_functype_as_externtypePtr.asFunction<
          ffi.Pointer<wasm_externtype_t> Function(
              ffi.Pointer<wasm_functype_t>)>();

  ffi.Pointer<wasm_externtype_t> wasm_globaltype_as_externtype(
    ffi.Pointer<wasm_globaltype_t> arg0,
  ) {
    return _wasm_globaltype_as_externtype(
      arg0,
    );
  }

  late final _wasm_globaltype_as_externtypePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wasm_externtype_t> Function(
                  ffi.Pointer<wasm_globaltype_t>)>>(
      'wasm_globaltype_as_externtype');
  late final _wasm_globaltype_as_externtype =
      _wasm_globaltype_as_externtypePtr.asFunction<
          ffi.Pointer<wasm_externtype_t> Function(
              ffi.Pointer<wasm_globaltype_t>)>();

  ffi.Pointer<wasm_externtype_t> wasm_tabletype_as_externtype(
    ffi.Pointer<wasm_tabletype_t> arg0,
  ) {
    return _wasm_tabletype_as_externtype(
      arg0,
    );
  }

  late final _wasm_tabletype_as_externtypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_externtype_t> Function(
              ffi.Pointer<wasm_tabletype_t>)>>('wasm_tabletype_as_externtype');
  late final _wasm_tabletype_as_externtype =
      _wasm_tabletype_as_externtypePtr.asFunction<
          ffi.Pointer<wasm_externtype_t> Function(
              ffi.Pointer<wasm_tabletype_t>)>();

  ffi.Pointer<wasm_externtype_t> wasm_memorytype_as_externtype(
    ffi.Pointer<wasm_memorytype_t> arg0,
  ) {
    return _wasm_memorytype_as_externtype(
      arg0,
    );
  }

  late final _wasm_memorytype_as_externtypePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wasm_externtype_t> Function(
                  ffi.Pointer<wasm_memorytype_t>)>>(
      'wasm_memorytype_as_externtype');
  late final _wasm_memorytype_as_externtype =
      _wasm_memorytype_as_externtypePtr.asFunction<
          ffi.Pointer<wasm_externtype_t> Function(
              ffi.Pointer<wasm_memorytype_t>)>();

  ffi.Pointer<wasm_functype_t> wasm_externtype_as_functype(
    ffi.Pointer<wasm_externtype_t> arg0,
  ) {
    return _wasm_externtype_as_functype(
      arg0,
    );
  }

  late final _wasm_externtype_as_functypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_functype_t> Function(
              ffi.Pointer<wasm_externtype_t>)>>('wasm_externtype_as_functype');
  late final _wasm_externtype_as_functype =
      _wasm_externtype_as_functypePtr.asFunction<
          ffi.Pointer<wasm_functype_t> Function(
              ffi.Pointer<wasm_externtype_t>)>();

  ffi.Pointer<wasm_globaltype_t> wasm_externtype_as_globaltype(
    ffi.Pointer<wasm_externtype_t> arg0,
  ) {
    return _wasm_externtype_as_globaltype(
      arg0,
    );
  }

  late final _wasm_externtype_as_globaltypePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wasm_globaltype_t> Function(
                  ffi.Pointer<wasm_externtype_t>)>>(
      'wasm_externtype_as_globaltype');
  late final _wasm_externtype_as_globaltype =
      _wasm_externtype_as_globaltypePtr.asFunction<
          ffi.Pointer<wasm_globaltype_t> Function(
              ffi.Pointer<wasm_externtype_t>)>();

  ffi.Pointer<wasm_tabletype_t> wasm_externtype_as_tabletype(
    ffi.Pointer<wasm_externtype_t> arg0,
  ) {
    return _wasm_externtype_as_tabletype(
      arg0,
    );
  }

  late final _wasm_externtype_as_tabletypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_tabletype_t> Function(
              ffi.Pointer<wasm_externtype_t>)>>('wasm_externtype_as_tabletype');
  late final _wasm_externtype_as_tabletype =
      _wasm_externtype_as_tabletypePtr.asFunction<
          ffi.Pointer<wasm_tabletype_t> Function(
              ffi.Pointer<wasm_externtype_t>)>();

  ffi.Pointer<wasm_memorytype_t> wasm_externtype_as_memorytype(
    ffi.Pointer<wasm_externtype_t> arg0,
  ) {
    return _wasm_externtype_as_memorytype(
      arg0,
    );
  }

  late final _wasm_externtype_as_memorytypePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wasm_memorytype_t> Function(
                  ffi.Pointer<wasm_externtype_t>)>>(
      'wasm_externtype_as_memorytype');
  late final _wasm_externtype_as_memorytype =
      _wasm_externtype_as_memorytypePtr.asFunction<
          ffi.Pointer<wasm_memorytype_t> Function(
              ffi.Pointer<wasm_externtype_t>)>();

  ffi.Pointer<wasm_externtype_t> wasm_functype_as_externtype_const(
    ffi.Pointer<wasm_functype_t> arg0,
  ) {
    return _wasm_functype_as_externtype_const(
      arg0,
    );
  }

  late final _wasm_functype_as_externtype_constPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wasm_externtype_t> Function(
                  ffi.Pointer<wasm_functype_t>)>>(
      'wasm_functype_as_externtype_const');
  late final _wasm_functype_as_externtype_const =
      _wasm_functype_as_externtype_constPtr.asFunction<
          ffi.Pointer<wasm_externtype_t> Function(
              ffi.Pointer<wasm_functype_t>)>();

  ffi.Pointer<wasm_externtype_t> wasm_globaltype_as_externtype_const(
    ffi.Pointer<wasm_globaltype_t> arg0,
  ) {
    return _wasm_globaltype_as_externtype_const(
      arg0,
    );
  }

  late final _wasm_globaltype_as_externtype_constPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wasm_externtype_t> Function(
                  ffi.Pointer<wasm_globaltype_t>)>>(
      'wasm_globaltype_as_externtype_const');
  late final _wasm_globaltype_as_externtype_const =
      _wasm_globaltype_as_externtype_constPtr.asFunction<
          ffi.Pointer<wasm_externtype_t> Function(
              ffi.Pointer<wasm_globaltype_t>)>();

  ffi.Pointer<wasm_externtype_t> wasm_tabletype_as_externtype_const(
    ffi.Pointer<wasm_tabletype_t> arg0,
  ) {
    return _wasm_tabletype_as_externtype_const(
      arg0,
    );
  }

  late final _wasm_tabletype_as_externtype_constPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wasm_externtype_t> Function(
                  ffi.Pointer<wasm_tabletype_t>)>>(
      'wasm_tabletype_as_externtype_const');
  late final _wasm_tabletype_as_externtype_const =
      _wasm_tabletype_as_externtype_constPtr.asFunction<
          ffi.Pointer<wasm_externtype_t> Function(
              ffi.Pointer<wasm_tabletype_t>)>();

  ffi.Pointer<wasm_externtype_t> wasm_memorytype_as_externtype_const(
    ffi.Pointer<wasm_memorytype_t> arg0,
  ) {
    return _wasm_memorytype_as_externtype_const(
      arg0,
    );
  }

  late final _wasm_memorytype_as_externtype_constPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wasm_externtype_t> Function(
                  ffi.Pointer<wasm_memorytype_t>)>>(
      'wasm_memorytype_as_externtype_const');
  late final _wasm_memorytype_as_externtype_const =
      _wasm_memorytype_as_externtype_constPtr.asFunction<
          ffi.Pointer<wasm_externtype_t> Function(
              ffi.Pointer<wasm_memorytype_t>)>();

  ffi.Pointer<wasm_functype_t> wasm_externtype_as_functype_const(
    ffi.Pointer<wasm_externtype_t> arg0,
  ) {
    return _wasm_externtype_as_functype_const(
      arg0,
    );
  }

  late final _wasm_externtype_as_functype_constPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wasm_functype_t> Function(
                  ffi.Pointer<wasm_externtype_t>)>>(
      'wasm_externtype_as_functype_const');
  late final _wasm_externtype_as_functype_const =
      _wasm_externtype_as_functype_constPtr.asFunction<
          ffi.Pointer<wasm_functype_t> Function(
              ffi.Pointer<wasm_externtype_t>)>();

  ffi.Pointer<wasm_globaltype_t> wasm_externtype_as_globaltype_const(
    ffi.Pointer<wasm_externtype_t> arg0,
  ) {
    return _wasm_externtype_as_globaltype_const(
      arg0,
    );
  }

  late final _wasm_externtype_as_globaltype_constPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wasm_globaltype_t> Function(
                  ffi.Pointer<wasm_externtype_t>)>>(
      'wasm_externtype_as_globaltype_const');
  late final _wasm_externtype_as_globaltype_const =
      _wasm_externtype_as_globaltype_constPtr.asFunction<
          ffi.Pointer<wasm_globaltype_t> Function(
              ffi.Pointer<wasm_externtype_t>)>();

  ffi.Pointer<wasm_tabletype_t> wasm_externtype_as_tabletype_const(
    ffi.Pointer<wasm_externtype_t> arg0,
  ) {
    return _wasm_externtype_as_tabletype_const(
      arg0,
    );
  }

  late final _wasm_externtype_as_tabletype_constPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wasm_tabletype_t> Function(
                  ffi.Pointer<wasm_externtype_t>)>>(
      'wasm_externtype_as_tabletype_const');
  late final _wasm_externtype_as_tabletype_const =
      _wasm_externtype_as_tabletype_constPtr.asFunction<
          ffi.Pointer<wasm_tabletype_t> Function(
              ffi.Pointer<wasm_externtype_t>)>();

  ffi.Pointer<wasm_memorytype_t> wasm_externtype_as_memorytype_const(
    ffi.Pointer<wasm_externtype_t> arg0,
  ) {
    return _wasm_externtype_as_memorytype_const(
      arg0,
    );
  }

  late final _wasm_externtype_as_memorytype_constPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wasm_memorytype_t> Function(
                  ffi.Pointer<wasm_externtype_t>)>>(
      'wasm_externtype_as_memorytype_const');
  late final _wasm_externtype_as_memorytype_const =
      _wasm_externtype_as_memorytype_constPtr.asFunction<
          ffi.Pointer<wasm_memorytype_t> Function(
              ffi.Pointer<wasm_externtype_t>)>();

  void wasm_importtype_delete(
    ffi.Pointer<wasm_importtype_t> arg0,
  ) {
    return _wasm_importtype_delete(
      arg0,
    );
  }

  late final _wasm_importtype_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<wasm_importtype_t>)>>(
      'wasm_importtype_delete');
  late final _wasm_importtype_delete = _wasm_importtype_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_importtype_t>)>();

  void wasm_importtype_vec_new_empty(
    ffi.Pointer<wasm_importtype_vec_t> out,
  ) {
    return _wasm_importtype_vec_new_empty(
      out,
    );
  }

  late final _wasm_importtype_vec_new_emptyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<wasm_importtype_vec_t>)>>(
      'wasm_importtype_vec_new_empty');
  late final _wasm_importtype_vec_new_empty = _wasm_importtype_vec_new_emptyPtr
      .asFunction<void Function(ffi.Pointer<wasm_importtype_vec_t>)>();

  void wasm_importtype_vec_new_uninitialized(
    ffi.Pointer<wasm_importtype_vec_t> out,
    int arg1,
  ) {
    return _wasm_importtype_vec_new_uninitialized(
      out,
      arg1,
    );
  }

  late final _wasm_importtype_vec_new_uninitializedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_importtype_vec_t>,
              ffi.Size)>>('wasm_importtype_vec_new_uninitialized');
  late final _wasm_importtype_vec_new_uninitialized =
      _wasm_importtype_vec_new_uninitializedPtr
          .asFunction<void Function(ffi.Pointer<wasm_importtype_vec_t>, int)>();

  void wasm_importtype_vec_new(
    ffi.Pointer<wasm_importtype_vec_t> out,
    int arg1,
    ffi.Pointer<ffi.Pointer<wasm_importtype_t>> arg2,
  ) {
    return _wasm_importtype_vec_new(
      out,
      arg1,
      arg2,
    );
  }

  late final _wasm_importtype_vec_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<wasm_importtype_vec_t>, ffi.Size,
                  ffi.Pointer<ffi.Pointer<wasm_importtype_t>>)>>(
      'wasm_importtype_vec_new');
  late final _wasm_importtype_vec_new = _wasm_importtype_vec_newPtr.asFunction<
      void Function(ffi.Pointer<wasm_importtype_vec_t>, int,
          ffi.Pointer<ffi.Pointer<wasm_importtype_t>>)>();

  void wasm_importtype_vec_copy(
    ffi.Pointer<wasm_importtype_vec_t> out,
    ffi.Pointer<wasm_importtype_vec_t> arg1,
  ) {
    return _wasm_importtype_vec_copy(
      out,
      arg1,
    );
  }

  late final _wasm_importtype_vec_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_importtype_vec_t>,
              ffi.Pointer<wasm_importtype_vec_t>)>>('wasm_importtype_vec_copy');
  late final _wasm_importtype_vec_copy =
      _wasm_importtype_vec_copyPtr.asFunction<
          void Function(ffi.Pointer<wasm_importtype_vec_t>,
              ffi.Pointer<wasm_importtype_vec_t>)>();

  void wasm_importtype_vec_delete(
    ffi.Pointer<wasm_importtype_vec_t> arg0,
  ) {
    return _wasm_importtype_vec_delete(
      arg0,
    );
  }

  late final _wasm_importtype_vec_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<wasm_importtype_vec_t>)>>(
      'wasm_importtype_vec_delete');
  late final _wasm_importtype_vec_delete = _wasm_importtype_vec_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_importtype_vec_t>)>();

  ffi.Pointer<wasm_importtype_t> wasm_importtype_copy(
    ffi.Pointer<wasm_importtype_t> arg0,
  ) {
    return _wasm_importtype_copy(
      arg0,
    );
  }

  late final _wasm_importtype_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_importtype_t> Function(
              ffi.Pointer<wasm_importtype_t>)>>('wasm_importtype_copy');
  late final _wasm_importtype_copy = _wasm_importtype_copyPtr.asFunction<
      ffi.Pointer<wasm_importtype_t> Function(
          ffi.Pointer<wasm_importtype_t>)>();

  ffi.Pointer<wasm_importtype_t> wasm_importtype_new(
    ffi.Pointer<wasm_name_t> module,
    ffi.Pointer<wasm_name_t> name,
    ffi.Pointer<wasm_externtype_t> arg2,
  ) {
    return _wasm_importtype_new(
      module,
      name,
      arg2,
    );
  }

  late final _wasm_importtype_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_importtype_t> Function(
              ffi.Pointer<wasm_name_t>,
              ffi.Pointer<wasm_name_t>,
              ffi.Pointer<wasm_externtype_t>)>>('wasm_importtype_new');
  late final _wasm_importtype_new = _wasm_importtype_newPtr.asFunction<
      ffi.Pointer<wasm_importtype_t> Function(ffi.Pointer<wasm_name_t>,
          ffi.Pointer<wasm_name_t>, ffi.Pointer<wasm_externtype_t>)>();

  ffi.Pointer<wasm_name_t> wasm_importtype_module(
    ffi.Pointer<wasm_importtype_t> arg0,
  ) {
    return _wasm_importtype_module(
      arg0,
    );
  }

  late final _wasm_importtype_modulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_name_t> Function(
              ffi.Pointer<wasm_importtype_t>)>>('wasm_importtype_module');
  late final _wasm_importtype_module = _wasm_importtype_modulePtr.asFunction<
      ffi.Pointer<wasm_name_t> Function(ffi.Pointer<wasm_importtype_t>)>();

  ffi.Pointer<wasm_name_t> wasm_importtype_name(
    ffi.Pointer<wasm_importtype_t> arg0,
  ) {
    return _wasm_importtype_name(
      arg0,
    );
  }

  late final _wasm_importtype_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_name_t> Function(
              ffi.Pointer<wasm_importtype_t>)>>('wasm_importtype_name');
  late final _wasm_importtype_name = _wasm_importtype_namePtr.asFunction<
      ffi.Pointer<wasm_name_t> Function(ffi.Pointer<wasm_importtype_t>)>();

  ffi.Pointer<wasm_externtype_t> wasm_importtype_type(
    ffi.Pointer<wasm_importtype_t> arg0,
  ) {
    return _wasm_importtype_type(
      arg0,
    );
  }

  late final _wasm_importtype_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_externtype_t> Function(
              ffi.Pointer<wasm_importtype_t>)>>('wasm_importtype_type');
  late final _wasm_importtype_type = _wasm_importtype_typePtr.asFunction<
      ffi.Pointer<wasm_externtype_t> Function(
          ffi.Pointer<wasm_importtype_t>)>();

  void wasm_exporttype_delete(
    ffi.Pointer<wasm_exporttype_t> arg0,
  ) {
    return _wasm_exporttype_delete(
      arg0,
    );
  }

  late final _wasm_exporttype_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<wasm_exporttype_t>)>>(
      'wasm_exporttype_delete');
  late final _wasm_exporttype_delete = _wasm_exporttype_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_exporttype_t>)>();

  void wasm_exporttype_vec_new_empty(
    ffi.Pointer<wasm_exporttype_vec_t> out,
  ) {
    return _wasm_exporttype_vec_new_empty(
      out,
    );
  }

  late final _wasm_exporttype_vec_new_emptyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<wasm_exporttype_vec_t>)>>(
      'wasm_exporttype_vec_new_empty');
  late final _wasm_exporttype_vec_new_empty = _wasm_exporttype_vec_new_emptyPtr
      .asFunction<void Function(ffi.Pointer<wasm_exporttype_vec_t>)>();

  void wasm_exporttype_vec_new_uninitialized(
    ffi.Pointer<wasm_exporttype_vec_t> out,
    int arg1,
  ) {
    return _wasm_exporttype_vec_new_uninitialized(
      out,
      arg1,
    );
  }

  late final _wasm_exporttype_vec_new_uninitializedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_exporttype_vec_t>,
              ffi.Size)>>('wasm_exporttype_vec_new_uninitialized');
  late final _wasm_exporttype_vec_new_uninitialized =
      _wasm_exporttype_vec_new_uninitializedPtr
          .asFunction<void Function(ffi.Pointer<wasm_exporttype_vec_t>, int)>();

  void wasm_exporttype_vec_new(
    ffi.Pointer<wasm_exporttype_vec_t> out,
    int arg1,
    ffi.Pointer<ffi.Pointer<wasm_exporttype_t>> arg2,
  ) {
    return _wasm_exporttype_vec_new(
      out,
      arg1,
      arg2,
    );
  }

  late final _wasm_exporttype_vec_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<wasm_exporttype_vec_t>, ffi.Size,
                  ffi.Pointer<ffi.Pointer<wasm_exporttype_t>>)>>(
      'wasm_exporttype_vec_new');
  late final _wasm_exporttype_vec_new = _wasm_exporttype_vec_newPtr.asFunction<
      void Function(ffi.Pointer<wasm_exporttype_vec_t>, int,
          ffi.Pointer<ffi.Pointer<wasm_exporttype_t>>)>();

  void wasm_exporttype_vec_copy(
    ffi.Pointer<wasm_exporttype_vec_t> out,
    ffi.Pointer<wasm_exporttype_vec_t> arg1,
  ) {
    return _wasm_exporttype_vec_copy(
      out,
      arg1,
    );
  }

  late final _wasm_exporttype_vec_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_exporttype_vec_t>,
              ffi.Pointer<wasm_exporttype_vec_t>)>>('wasm_exporttype_vec_copy');
  late final _wasm_exporttype_vec_copy =
      _wasm_exporttype_vec_copyPtr.asFunction<
          void Function(ffi.Pointer<wasm_exporttype_vec_t>,
              ffi.Pointer<wasm_exporttype_vec_t>)>();

  void wasm_exporttype_vec_delete(
    ffi.Pointer<wasm_exporttype_vec_t> arg0,
  ) {
    return _wasm_exporttype_vec_delete(
      arg0,
    );
  }

  late final _wasm_exporttype_vec_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<wasm_exporttype_vec_t>)>>(
      'wasm_exporttype_vec_delete');
  late final _wasm_exporttype_vec_delete = _wasm_exporttype_vec_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_exporttype_vec_t>)>();

  ffi.Pointer<wasm_exporttype_t> wasm_exporttype_copy(
    ffi.Pointer<wasm_exporttype_t> arg0,
  ) {
    return _wasm_exporttype_copy(
      arg0,
    );
  }

  late final _wasm_exporttype_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_exporttype_t> Function(
              ffi.Pointer<wasm_exporttype_t>)>>('wasm_exporttype_copy');
  late final _wasm_exporttype_copy = _wasm_exporttype_copyPtr.asFunction<
      ffi.Pointer<wasm_exporttype_t> Function(
          ffi.Pointer<wasm_exporttype_t>)>();

  ffi.Pointer<wasm_exporttype_t> wasm_exporttype_new(
    ffi.Pointer<wasm_name_t> arg0,
    ffi.Pointer<wasm_externtype_t> arg1,
  ) {
    return _wasm_exporttype_new(
      arg0,
      arg1,
    );
  }

  late final _wasm_exporttype_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_exporttype_t> Function(ffi.Pointer<wasm_name_t>,
              ffi.Pointer<wasm_externtype_t>)>>('wasm_exporttype_new');
  late final _wasm_exporttype_new = _wasm_exporttype_newPtr.asFunction<
      ffi.Pointer<wasm_exporttype_t> Function(
          ffi.Pointer<wasm_name_t>, ffi.Pointer<wasm_externtype_t>)>();

  ffi.Pointer<wasm_name_t> wasm_exporttype_name(
    ffi.Pointer<wasm_exporttype_t> arg0,
  ) {
    return _wasm_exporttype_name(
      arg0,
    );
  }

  late final _wasm_exporttype_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_name_t> Function(
              ffi.Pointer<wasm_exporttype_t>)>>('wasm_exporttype_name');
  late final _wasm_exporttype_name = _wasm_exporttype_namePtr.asFunction<
      ffi.Pointer<wasm_name_t> Function(ffi.Pointer<wasm_exporttype_t>)>();

  ffi.Pointer<wasm_externtype_t> wasm_exporttype_type(
    ffi.Pointer<wasm_exporttype_t> arg0,
  ) {
    return _wasm_exporttype_type(
      arg0,
    );
  }

  late final _wasm_exporttype_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_externtype_t> Function(
              ffi.Pointer<wasm_exporttype_t>)>>('wasm_exporttype_type');
  late final _wasm_exporttype_type = _wasm_exporttype_typePtr.asFunction<
      ffi.Pointer<wasm_externtype_t> Function(
          ffi.Pointer<wasm_exporttype_t>)>();

  void wasm_val_delete(
    ffi.Pointer<wasm_val_t> v,
  ) {
    return _wasm_val_delete(
      v,
    );
  }

  late final _wasm_val_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasm_val_t>)>>(
          'wasm_val_delete');
  late final _wasm_val_delete =
      _wasm_val_deletePtr.asFunction<void Function(ffi.Pointer<wasm_val_t>)>();

  void wasm_val_copy(
    ffi.Pointer<wasm_val_t> out,
    ffi.Pointer<wasm_val_t> arg1,
  ) {
    return _wasm_val_copy(
      out,
      arg1,
    );
  }

  late final _wasm_val_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_val_t>,
              ffi.Pointer<wasm_val_t>)>>('wasm_val_copy');
  late final _wasm_val_copy = _wasm_val_copyPtr.asFunction<
      void Function(ffi.Pointer<wasm_val_t>, ffi.Pointer<wasm_val_t>)>();

  void wasm_val_vec_new_empty(
    ffi.Pointer<wasm_val_vec_t> out,
  ) {
    return _wasm_val_vec_new_empty(
      out,
    );
  }

  late final _wasm_val_vec_new_emptyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasm_val_vec_t>)>>(
      'wasm_val_vec_new_empty');
  late final _wasm_val_vec_new_empty = _wasm_val_vec_new_emptyPtr
      .asFunction<void Function(ffi.Pointer<wasm_val_vec_t>)>();

  void wasm_val_vec_new_uninitialized(
    ffi.Pointer<wasm_val_vec_t> out,
    int arg1,
  ) {
    return _wasm_val_vec_new_uninitialized(
      out,
      arg1,
    );
  }

  late final _wasm_val_vec_new_uninitializedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_val_vec_t>,
              ffi.Size)>>('wasm_val_vec_new_uninitialized');
  late final _wasm_val_vec_new_uninitialized =
      _wasm_val_vec_new_uninitializedPtr
          .asFunction<void Function(ffi.Pointer<wasm_val_vec_t>, int)>();

  void wasm_val_vec_new(
    ffi.Pointer<wasm_val_vec_t> out,
    int arg1,
    ffi.Pointer<wasm_val_t> arg2,
  ) {
    return _wasm_val_vec_new(
      out,
      arg1,
      arg2,
    );
  }

  late final _wasm_val_vec_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_val_vec_t>, ffi.Size,
              ffi.Pointer<wasm_val_t>)>>('wasm_val_vec_new');
  late final _wasm_val_vec_new = _wasm_val_vec_newPtr.asFunction<
      void Function(
          ffi.Pointer<wasm_val_vec_t>, int, ffi.Pointer<wasm_val_t>)>();

  void wasm_val_vec_copy(
    ffi.Pointer<wasm_val_vec_t> out,
    ffi.Pointer<wasm_val_vec_t> arg1,
  ) {
    return _wasm_val_vec_copy(
      out,
      arg1,
    );
  }

  late final _wasm_val_vec_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_val_vec_t>,
              ffi.Pointer<wasm_val_vec_t>)>>('wasm_val_vec_copy');
  late final _wasm_val_vec_copy = _wasm_val_vec_copyPtr.asFunction<
      void Function(
          ffi.Pointer<wasm_val_vec_t>, ffi.Pointer<wasm_val_vec_t>)>();

  void wasm_val_vec_delete(
    ffi.Pointer<wasm_val_vec_t> arg0,
  ) {
    return _wasm_val_vec_delete(
      arg0,
    );
  }

  late final _wasm_val_vec_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasm_val_vec_t>)>>(
      'wasm_val_vec_delete');
  late final _wasm_val_vec_delete = _wasm_val_vec_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_val_vec_t>)>();

  void wasm_ref_delete(
    ffi.Pointer<wasm_ref_t> arg0,
  ) {
    return _wasm_ref_delete(
      arg0,
    );
  }

  late final _wasm_ref_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasm_ref_t>)>>(
          'wasm_ref_delete');
  late final _wasm_ref_delete =
      _wasm_ref_deletePtr.asFunction<void Function(ffi.Pointer<wasm_ref_t>)>();

  ffi.Pointer<wasm_ref_t> wasm_ref_copy(
    ffi.Pointer<wasm_ref_t> arg0,
  ) {
    return _wasm_ref_copy(
      arg0,
    );
  }

  late final _wasm_ref_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_ref_t> Function(
              ffi.Pointer<wasm_ref_t>)>>('wasm_ref_copy');
  late final _wasm_ref_copy = _wasm_ref_copyPtr
      .asFunction<ffi.Pointer<wasm_ref_t> Function(ffi.Pointer<wasm_ref_t>)>();

  bool wasm_ref_same(
    ffi.Pointer<wasm_ref_t> arg0,
    ffi.Pointer<wasm_ref_t> arg1,
  ) {
    return _wasm_ref_same(
      arg0,
      arg1,
    );
  }

  late final _wasm_ref_samePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<wasm_ref_t>,
              ffi.Pointer<wasm_ref_t>)>>('wasm_ref_same');
  late final _wasm_ref_same = _wasm_ref_samePtr.asFunction<
      bool Function(ffi.Pointer<wasm_ref_t>, ffi.Pointer<wasm_ref_t>)>();

  ffi.Pointer<ffi.Void> wasm_ref_get_host_info(
    ffi.Pointer<wasm_ref_t> arg0,
  ) {
    return _wasm_ref_get_host_info(
      arg0,
    );
  }

  late final _wasm_ref_get_host_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<wasm_ref_t>)>>('wasm_ref_get_host_info');
  late final _wasm_ref_get_host_info = _wasm_ref_get_host_infoPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<wasm_ref_t>)>();

  void wasm_ref_set_host_info(
    ffi.Pointer<wasm_ref_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _wasm_ref_set_host_info(
      arg0,
      arg1,
    );
  }

  late final _wasm_ref_set_host_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_ref_t>,
              ffi.Pointer<ffi.Void>)>>('wasm_ref_set_host_info');
  late final _wasm_ref_set_host_info = _wasm_ref_set_host_infoPtr.asFunction<
      void Function(ffi.Pointer<wasm_ref_t>, ffi.Pointer<ffi.Void>)>();

  void wasm_ref_set_host_info_with_finalizer(
    ffi.Pointer<wasm_ref_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg2,
  ) {
    return _wasm_ref_set_host_info_with_finalizer(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wasm_ref_set_host_info_with_finalizerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<wasm_ref_t>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
      'wasm_ref_set_host_info_with_finalizer');
  late final _wasm_ref_set_host_info_with_finalizer =
      _wasm_ref_set_host_info_with_finalizerPtr.asFunction<
          void Function(
              ffi.Pointer<wasm_ref_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  void wasm_frame_delete(
    ffi.Pointer<wasm_frame_t> arg0,
  ) {
    return _wasm_frame_delete(
      arg0,
    );
  }

  late final _wasm_frame_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasm_frame_t>)>>(
          'wasm_frame_delete');
  late final _wasm_frame_delete = _wasm_frame_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_frame_t>)>();

  void wasm_frame_vec_new_empty(
    ffi.Pointer<wasm_frame_vec_t> out,
  ) {
    return _wasm_frame_vec_new_empty(
      out,
    );
  }

  late final _wasm_frame_vec_new_emptyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasm_frame_vec_t>)>>(
      'wasm_frame_vec_new_empty');
  late final _wasm_frame_vec_new_empty = _wasm_frame_vec_new_emptyPtr
      .asFunction<void Function(ffi.Pointer<wasm_frame_vec_t>)>();

  void wasm_frame_vec_new_uninitialized(
    ffi.Pointer<wasm_frame_vec_t> out,
    int arg1,
  ) {
    return _wasm_frame_vec_new_uninitialized(
      out,
      arg1,
    );
  }

  late final _wasm_frame_vec_new_uninitializedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_frame_vec_t>,
              ffi.Size)>>('wasm_frame_vec_new_uninitialized');
  late final _wasm_frame_vec_new_uninitialized =
      _wasm_frame_vec_new_uninitializedPtr
          .asFunction<void Function(ffi.Pointer<wasm_frame_vec_t>, int)>();

  void wasm_frame_vec_new(
    ffi.Pointer<wasm_frame_vec_t> out,
    int arg1,
    ffi.Pointer<ffi.Pointer<wasm_frame_t>> arg2,
  ) {
    return _wasm_frame_vec_new(
      out,
      arg1,
      arg2,
    );
  }

  late final _wasm_frame_vec_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_frame_vec_t>, ffi.Size,
              ffi.Pointer<ffi.Pointer<wasm_frame_t>>)>>('wasm_frame_vec_new');
  late final _wasm_frame_vec_new = _wasm_frame_vec_newPtr.asFunction<
      void Function(ffi.Pointer<wasm_frame_vec_t>, int,
          ffi.Pointer<ffi.Pointer<wasm_frame_t>>)>();

  void wasm_frame_vec_copy(
    ffi.Pointer<wasm_frame_vec_t> out,
    ffi.Pointer<wasm_frame_vec_t> arg1,
  ) {
    return _wasm_frame_vec_copy(
      out,
      arg1,
    );
  }

  late final _wasm_frame_vec_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_frame_vec_t>,
              ffi.Pointer<wasm_frame_vec_t>)>>('wasm_frame_vec_copy');
  late final _wasm_frame_vec_copy = _wasm_frame_vec_copyPtr.asFunction<
      void Function(
          ffi.Pointer<wasm_frame_vec_t>, ffi.Pointer<wasm_frame_vec_t>)>();

  void wasm_frame_vec_delete(
    ffi.Pointer<wasm_frame_vec_t> arg0,
  ) {
    return _wasm_frame_vec_delete(
      arg0,
    );
  }

  late final _wasm_frame_vec_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasm_frame_vec_t>)>>(
      'wasm_frame_vec_delete');
  late final _wasm_frame_vec_delete = _wasm_frame_vec_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_frame_vec_t>)>();

  ffi.Pointer<wasm_frame_t> wasm_frame_copy(
    ffi.Pointer<wasm_frame_t> arg0,
  ) {
    return _wasm_frame_copy(
      arg0,
    );
  }

  late final _wasm_frame_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_frame_t> Function(
              ffi.Pointer<wasm_frame_t>)>>('wasm_frame_copy');
  late final _wasm_frame_copy = _wasm_frame_copyPtr.asFunction<
      ffi.Pointer<wasm_frame_t> Function(ffi.Pointer<wasm_frame_t>)>();

  ffi.Pointer<wasm_instance_t> wasm_frame_instance(
    ffi.Pointer<wasm_frame_t> arg0,
  ) {
    return _wasm_frame_instance(
      arg0,
    );
  }

  late final _wasm_frame_instancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_instance_t> Function(
              ffi.Pointer<wasm_frame_t>)>>('wasm_frame_instance');
  late final _wasm_frame_instance = _wasm_frame_instancePtr.asFunction<
      ffi.Pointer<wasm_instance_t> Function(ffi.Pointer<wasm_frame_t>)>();

  int wasm_frame_func_index(
    ffi.Pointer<wasm_frame_t> arg0,
  ) {
    return _wasm_frame_func_index(
      arg0,
    );
  }

  late final _wasm_frame_func_indexPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<wasm_frame_t>)>>(
      'wasm_frame_func_index');
  late final _wasm_frame_func_index = _wasm_frame_func_indexPtr
      .asFunction<int Function(ffi.Pointer<wasm_frame_t>)>();

  int wasm_frame_func_offset(
    ffi.Pointer<wasm_frame_t> arg0,
  ) {
    return _wasm_frame_func_offset(
      arg0,
    );
  }

  late final _wasm_frame_func_offsetPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<wasm_frame_t>)>>(
          'wasm_frame_func_offset');
  late final _wasm_frame_func_offset = _wasm_frame_func_offsetPtr
      .asFunction<int Function(ffi.Pointer<wasm_frame_t>)>();

  int wasm_frame_module_offset(
    ffi.Pointer<wasm_frame_t> arg0,
  ) {
    return _wasm_frame_module_offset(
      arg0,
    );
  }

  late final _wasm_frame_module_offsetPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<wasm_frame_t>)>>(
          'wasm_frame_module_offset');
  late final _wasm_frame_module_offset = _wasm_frame_module_offsetPtr
      .asFunction<int Function(ffi.Pointer<wasm_frame_t>)>();

  void wasm_trap_delete(
    ffi.Pointer<wasm_trap_t> arg0,
  ) {
    return _wasm_trap_delete(
      arg0,
    );
  }

  late final _wasm_trap_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasm_trap_t>)>>(
          'wasm_trap_delete');
  late final _wasm_trap_delete = _wasm_trap_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_trap_t>)>();

  ffi.Pointer<wasm_trap_t> wasm_trap_copy(
    ffi.Pointer<wasm_trap_t> arg0,
  ) {
    return _wasm_trap_copy(
      arg0,
    );
  }

  late final _wasm_trap_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_trap_t> Function(
              ffi.Pointer<wasm_trap_t>)>>('wasm_trap_copy');
  late final _wasm_trap_copy = _wasm_trap_copyPtr.asFunction<
      ffi.Pointer<wasm_trap_t> Function(ffi.Pointer<wasm_trap_t>)>();

  bool wasm_trap_same(
    ffi.Pointer<wasm_trap_t> arg0,
    ffi.Pointer<wasm_trap_t> arg1,
  ) {
    return _wasm_trap_same(
      arg0,
      arg1,
    );
  }

  late final _wasm_trap_samePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<wasm_trap_t>,
              ffi.Pointer<wasm_trap_t>)>>('wasm_trap_same');
  late final _wasm_trap_same = _wasm_trap_samePtr.asFunction<
      bool Function(ffi.Pointer<wasm_trap_t>, ffi.Pointer<wasm_trap_t>)>();

  ffi.Pointer<ffi.Void> wasm_trap_get_host_info(
    ffi.Pointer<wasm_trap_t> arg0,
  ) {
    return _wasm_trap_get_host_info(
      arg0,
    );
  }

  late final _wasm_trap_get_host_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<wasm_trap_t>)>>('wasm_trap_get_host_info');
  late final _wasm_trap_get_host_info = _wasm_trap_get_host_infoPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<wasm_trap_t>)>();

  void wasm_trap_set_host_info(
    ffi.Pointer<wasm_trap_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _wasm_trap_set_host_info(
      arg0,
      arg1,
    );
  }

  late final _wasm_trap_set_host_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_trap_t>,
              ffi.Pointer<ffi.Void>)>>('wasm_trap_set_host_info');
  late final _wasm_trap_set_host_info = _wasm_trap_set_host_infoPtr.asFunction<
      void Function(ffi.Pointer<wasm_trap_t>, ffi.Pointer<ffi.Void>)>();

  void wasm_trap_set_host_info_with_finalizer(
    ffi.Pointer<wasm_trap_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg2,
  ) {
    return _wasm_trap_set_host_info_with_finalizer(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wasm_trap_set_host_info_with_finalizerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<wasm_trap_t>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
      'wasm_trap_set_host_info_with_finalizer');
  late final _wasm_trap_set_host_info_with_finalizer =
      _wasm_trap_set_host_info_with_finalizerPtr.asFunction<
          void Function(
              ffi.Pointer<wasm_trap_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<wasm_ref_t> wasm_trap_as_ref(
    ffi.Pointer<wasm_trap_t> arg0,
  ) {
    return _wasm_trap_as_ref(
      arg0,
    );
  }

  late final _wasm_trap_as_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_ref_t> Function(
              ffi.Pointer<wasm_trap_t>)>>('wasm_trap_as_ref');
  late final _wasm_trap_as_ref = _wasm_trap_as_refPtr
      .asFunction<ffi.Pointer<wasm_ref_t> Function(ffi.Pointer<wasm_trap_t>)>();

  ffi.Pointer<wasm_trap_t> wasm_ref_as_trap(
    ffi.Pointer<wasm_ref_t> arg0,
  ) {
    return _wasm_ref_as_trap(
      arg0,
    );
  }

  late final _wasm_ref_as_trapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_trap_t> Function(
              ffi.Pointer<wasm_ref_t>)>>('wasm_ref_as_trap');
  late final _wasm_ref_as_trap = _wasm_ref_as_trapPtr
      .asFunction<ffi.Pointer<wasm_trap_t> Function(ffi.Pointer<wasm_ref_t>)>();

  ffi.Pointer<wasm_ref_t> wasm_trap_as_ref_const(
    ffi.Pointer<wasm_trap_t> arg0,
  ) {
    return _wasm_trap_as_ref_const(
      arg0,
    );
  }

  late final _wasm_trap_as_ref_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_ref_t> Function(
              ffi.Pointer<wasm_trap_t>)>>('wasm_trap_as_ref_const');
  late final _wasm_trap_as_ref_const = _wasm_trap_as_ref_constPtr
      .asFunction<ffi.Pointer<wasm_ref_t> Function(ffi.Pointer<wasm_trap_t>)>();

  ffi.Pointer<wasm_trap_t> wasm_ref_as_trap_const(
    ffi.Pointer<wasm_ref_t> arg0,
  ) {
    return _wasm_ref_as_trap_const(
      arg0,
    );
  }

  late final _wasm_ref_as_trap_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_trap_t> Function(
              ffi.Pointer<wasm_ref_t>)>>('wasm_ref_as_trap_const');
  late final _wasm_ref_as_trap_const = _wasm_ref_as_trap_constPtr
      .asFunction<ffi.Pointer<wasm_trap_t> Function(ffi.Pointer<wasm_ref_t>)>();

  ffi.Pointer<wasm_trap_t> wasm_trap_new(
    ffi.Pointer<wasm_store_t> store,
    ffi.Pointer<wasm_message_t> arg1,
  ) {
    return _wasm_trap_new(
      store,
      arg1,
    );
  }

  late final _wasm_trap_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_trap_t> Function(ffi.Pointer<wasm_store_t>,
              ffi.Pointer<wasm_message_t>)>>('wasm_trap_new');
  late final _wasm_trap_new = _wasm_trap_newPtr.asFunction<
      ffi.Pointer<wasm_trap_t> Function(
          ffi.Pointer<wasm_store_t>, ffi.Pointer<wasm_message_t>)>();

  void wasm_trap_message(
    ffi.Pointer<wasm_trap_t> arg0,
    ffi.Pointer<wasm_message_t> out,
  ) {
    return _wasm_trap_message(
      arg0,
      out,
    );
  }

  late final _wasm_trap_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_trap_t>,
              ffi.Pointer<wasm_message_t>)>>('wasm_trap_message');
  late final _wasm_trap_message = _wasm_trap_messagePtr.asFunction<
      void Function(ffi.Pointer<wasm_trap_t>, ffi.Pointer<wasm_message_t>)>();

  ffi.Pointer<wasm_frame_t> wasm_trap_origin(
    ffi.Pointer<wasm_trap_t> arg0,
  ) {
    return _wasm_trap_origin(
      arg0,
    );
  }

  late final _wasm_trap_originPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_frame_t> Function(
              ffi.Pointer<wasm_trap_t>)>>('wasm_trap_origin');
  late final _wasm_trap_origin = _wasm_trap_originPtr.asFunction<
      ffi.Pointer<wasm_frame_t> Function(ffi.Pointer<wasm_trap_t>)>();

  void wasm_trap_trace(
    ffi.Pointer<wasm_trap_t> arg0,
    ffi.Pointer<wasm_frame_vec_t> out,
  ) {
    return _wasm_trap_trace(
      arg0,
      out,
    );
  }

  late final _wasm_trap_tracePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_trap_t>,
              ffi.Pointer<wasm_frame_vec_t>)>>('wasm_trap_trace');
  late final _wasm_trap_trace = _wasm_trap_tracePtr.asFunction<
      void Function(ffi.Pointer<wasm_trap_t>, ffi.Pointer<wasm_frame_vec_t>)>();

  void wasm_foreign_delete(
    ffi.Pointer<wasm_foreign_t> arg0,
  ) {
    return _wasm_foreign_delete(
      arg0,
    );
  }

  late final _wasm_foreign_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasm_foreign_t>)>>(
      'wasm_foreign_delete');
  late final _wasm_foreign_delete = _wasm_foreign_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_foreign_t>)>();

  ffi.Pointer<wasm_foreign_t> wasm_foreign_copy(
    ffi.Pointer<wasm_foreign_t> arg0,
  ) {
    return _wasm_foreign_copy(
      arg0,
    );
  }

  late final _wasm_foreign_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_foreign_t> Function(
              ffi.Pointer<wasm_foreign_t>)>>('wasm_foreign_copy');
  late final _wasm_foreign_copy = _wasm_foreign_copyPtr.asFunction<
      ffi.Pointer<wasm_foreign_t> Function(ffi.Pointer<wasm_foreign_t>)>();

  bool wasm_foreign_same(
    ffi.Pointer<wasm_foreign_t> arg0,
    ffi.Pointer<wasm_foreign_t> arg1,
  ) {
    return _wasm_foreign_same(
      arg0,
      arg1,
    );
  }

  late final _wasm_foreign_samePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<wasm_foreign_t>,
              ffi.Pointer<wasm_foreign_t>)>>('wasm_foreign_same');
  late final _wasm_foreign_same = _wasm_foreign_samePtr.asFunction<
      bool Function(
          ffi.Pointer<wasm_foreign_t>, ffi.Pointer<wasm_foreign_t>)>();

  ffi.Pointer<ffi.Void> wasm_foreign_get_host_info(
    ffi.Pointer<wasm_foreign_t> arg0,
  ) {
    return _wasm_foreign_get_host_info(
      arg0,
    );
  }

  late final _wasm_foreign_get_host_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<wasm_foreign_t>)>>('wasm_foreign_get_host_info');
  late final _wasm_foreign_get_host_info =
      _wasm_foreign_get_host_infoPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<wasm_foreign_t>)>();

  void wasm_foreign_set_host_info(
    ffi.Pointer<wasm_foreign_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _wasm_foreign_set_host_info(
      arg0,
      arg1,
    );
  }

  late final _wasm_foreign_set_host_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_foreign_t>,
              ffi.Pointer<ffi.Void>)>>('wasm_foreign_set_host_info');
  late final _wasm_foreign_set_host_info =
      _wasm_foreign_set_host_infoPtr.asFunction<
          void Function(ffi.Pointer<wasm_foreign_t>, ffi.Pointer<ffi.Void>)>();

  void wasm_foreign_set_host_info_with_finalizer(
    ffi.Pointer<wasm_foreign_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg2,
  ) {
    return _wasm_foreign_set_host_info_with_finalizer(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wasm_foreign_set_host_info_with_finalizerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<wasm_foreign_t>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
      'wasm_foreign_set_host_info_with_finalizer');
  late final _wasm_foreign_set_host_info_with_finalizer =
      _wasm_foreign_set_host_info_with_finalizerPtr.asFunction<
          void Function(
              ffi.Pointer<wasm_foreign_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<wasm_ref_t> wasm_foreign_as_ref(
    ffi.Pointer<wasm_foreign_t> arg0,
  ) {
    return _wasm_foreign_as_ref(
      arg0,
    );
  }

  late final _wasm_foreign_as_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_ref_t> Function(
              ffi.Pointer<wasm_foreign_t>)>>('wasm_foreign_as_ref');
  late final _wasm_foreign_as_ref = _wasm_foreign_as_refPtr.asFunction<
      ffi.Pointer<wasm_ref_t> Function(ffi.Pointer<wasm_foreign_t>)>();

  ffi.Pointer<wasm_foreign_t> wasm_ref_as_foreign(
    ffi.Pointer<wasm_ref_t> arg0,
  ) {
    return _wasm_ref_as_foreign(
      arg0,
    );
  }

  late final _wasm_ref_as_foreignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_foreign_t> Function(
              ffi.Pointer<wasm_ref_t>)>>('wasm_ref_as_foreign');
  late final _wasm_ref_as_foreign = _wasm_ref_as_foreignPtr.asFunction<
      ffi.Pointer<wasm_foreign_t> Function(ffi.Pointer<wasm_ref_t>)>();

  ffi.Pointer<wasm_ref_t> wasm_foreign_as_ref_const(
    ffi.Pointer<wasm_foreign_t> arg0,
  ) {
    return _wasm_foreign_as_ref_const(
      arg0,
    );
  }

  late final _wasm_foreign_as_ref_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_ref_t> Function(
              ffi.Pointer<wasm_foreign_t>)>>('wasm_foreign_as_ref_const');
  late final _wasm_foreign_as_ref_const =
      _wasm_foreign_as_ref_constPtr.asFunction<
          ffi.Pointer<wasm_ref_t> Function(ffi.Pointer<wasm_foreign_t>)>();

  ffi.Pointer<wasm_foreign_t> wasm_ref_as_foreign_const(
    ffi.Pointer<wasm_ref_t> arg0,
  ) {
    return _wasm_ref_as_foreign_const(
      arg0,
    );
  }

  late final _wasm_ref_as_foreign_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_foreign_t> Function(
              ffi.Pointer<wasm_ref_t>)>>('wasm_ref_as_foreign_const');
  late final _wasm_ref_as_foreign_const =
      _wasm_ref_as_foreign_constPtr.asFunction<
          ffi.Pointer<wasm_foreign_t> Function(ffi.Pointer<wasm_ref_t>)>();

  ffi.Pointer<wasm_foreign_t> wasm_foreign_new(
    ffi.Pointer<wasm_store_t> arg0,
  ) {
    return _wasm_foreign_new(
      arg0,
    );
  }

  late final _wasm_foreign_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_foreign_t> Function(
              ffi.Pointer<wasm_store_t>)>>('wasm_foreign_new');
  late final _wasm_foreign_new = _wasm_foreign_newPtr.asFunction<
      ffi.Pointer<wasm_foreign_t> Function(ffi.Pointer<wasm_store_t>)>();

  void wasm_module_delete(
    ffi.Pointer<wasm_module_t> arg0,
  ) {
    return _wasm_module_delete(
      arg0,
    );
  }

  late final _wasm_module_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasm_module_t>)>>(
      'wasm_module_delete');
  late final _wasm_module_delete = _wasm_module_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_module_t>)>();

  ffi.Pointer<wasm_module_t> wasm_module_copy(
    ffi.Pointer<wasm_module_t> arg0,
  ) {
    return _wasm_module_copy(
      arg0,
    );
  }

  late final _wasm_module_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_module_t> Function(
              ffi.Pointer<wasm_module_t>)>>('wasm_module_copy');
  late final _wasm_module_copy = _wasm_module_copyPtr.asFunction<
      ffi.Pointer<wasm_module_t> Function(ffi.Pointer<wasm_module_t>)>();

  bool wasm_module_same(
    ffi.Pointer<wasm_module_t> arg0,
    ffi.Pointer<wasm_module_t> arg1,
  ) {
    return _wasm_module_same(
      arg0,
      arg1,
    );
  }

  late final _wasm_module_samePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<wasm_module_t>,
              ffi.Pointer<wasm_module_t>)>>('wasm_module_same');
  late final _wasm_module_same = _wasm_module_samePtr.asFunction<
      bool Function(ffi.Pointer<wasm_module_t>, ffi.Pointer<wasm_module_t>)>();

  ffi.Pointer<ffi.Void> wasm_module_get_host_info(
    ffi.Pointer<wasm_module_t> arg0,
  ) {
    return _wasm_module_get_host_info(
      arg0,
    );
  }

  late final _wasm_module_get_host_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<wasm_module_t>)>>('wasm_module_get_host_info');
  late final _wasm_module_get_host_info = _wasm_module_get_host_infoPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<wasm_module_t>)>();

  void wasm_module_set_host_info(
    ffi.Pointer<wasm_module_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _wasm_module_set_host_info(
      arg0,
      arg1,
    );
  }

  late final _wasm_module_set_host_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_module_t>,
              ffi.Pointer<ffi.Void>)>>('wasm_module_set_host_info');
  late final _wasm_module_set_host_info =
      _wasm_module_set_host_infoPtr.asFunction<
          void Function(ffi.Pointer<wasm_module_t>, ffi.Pointer<ffi.Void>)>();

  void wasm_module_set_host_info_with_finalizer(
    ffi.Pointer<wasm_module_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg2,
  ) {
    return _wasm_module_set_host_info_with_finalizer(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wasm_module_set_host_info_with_finalizerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<wasm_module_t>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
      'wasm_module_set_host_info_with_finalizer');
  late final _wasm_module_set_host_info_with_finalizer =
      _wasm_module_set_host_info_with_finalizerPtr.asFunction<
          void Function(
              ffi.Pointer<wasm_module_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<wasm_ref_t> wasm_module_as_ref(
    ffi.Pointer<wasm_module_t> arg0,
  ) {
    return _wasm_module_as_ref(
      arg0,
    );
  }

  late final _wasm_module_as_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_ref_t> Function(
              ffi.Pointer<wasm_module_t>)>>('wasm_module_as_ref');
  late final _wasm_module_as_ref = _wasm_module_as_refPtr.asFunction<
      ffi.Pointer<wasm_ref_t> Function(ffi.Pointer<wasm_module_t>)>();

  ffi.Pointer<wasm_module_t> wasm_ref_as_module(
    ffi.Pointer<wasm_ref_t> arg0,
  ) {
    return _wasm_ref_as_module(
      arg0,
    );
  }

  late final _wasm_ref_as_modulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_module_t> Function(
              ffi.Pointer<wasm_ref_t>)>>('wasm_ref_as_module');
  late final _wasm_ref_as_module = _wasm_ref_as_modulePtr.asFunction<
      ffi.Pointer<wasm_module_t> Function(ffi.Pointer<wasm_ref_t>)>();

  ffi.Pointer<wasm_ref_t> wasm_module_as_ref_const(
    ffi.Pointer<wasm_module_t> arg0,
  ) {
    return _wasm_module_as_ref_const(
      arg0,
    );
  }

  late final _wasm_module_as_ref_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_ref_t> Function(
              ffi.Pointer<wasm_module_t>)>>('wasm_module_as_ref_const');
  late final _wasm_module_as_ref_const =
      _wasm_module_as_ref_constPtr.asFunction<
          ffi.Pointer<wasm_ref_t> Function(ffi.Pointer<wasm_module_t>)>();

  ffi.Pointer<wasm_module_t> wasm_ref_as_module_const(
    ffi.Pointer<wasm_ref_t> arg0,
  ) {
    return _wasm_ref_as_module_const(
      arg0,
    );
  }

  late final _wasm_ref_as_module_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_module_t> Function(
              ffi.Pointer<wasm_ref_t>)>>('wasm_ref_as_module_const');
  late final _wasm_ref_as_module_const =
      _wasm_ref_as_module_constPtr.asFunction<
          ffi.Pointer<wasm_module_t> Function(ffi.Pointer<wasm_ref_t>)>();

  void wasm_shared_module_delete(
    ffi.Pointer<wasm_shared_module_t> arg0,
  ) {
    return _wasm_shared_module_delete(
      arg0,
    );
  }

  late final _wasm_shared_module_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<wasm_shared_module_t>)>>('wasm_shared_module_delete');
  late final _wasm_shared_module_delete = _wasm_shared_module_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_shared_module_t>)>();

  ffi.Pointer<wasm_shared_module_t> wasm_module_share(
    ffi.Pointer<wasm_module_t> arg0,
  ) {
    return _wasm_module_share(
      arg0,
    );
  }

  late final _wasm_module_sharePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_shared_module_t> Function(
              ffi.Pointer<wasm_module_t>)>>('wasm_module_share');
  late final _wasm_module_share = _wasm_module_sharePtr.asFunction<
      ffi.Pointer<wasm_shared_module_t> Function(ffi.Pointer<wasm_module_t>)>();

  ffi.Pointer<wasm_module_t> wasm_module_obtain(
    ffi.Pointer<wasm_store_t> arg0,
    ffi.Pointer<wasm_shared_module_t> arg1,
  ) {
    return _wasm_module_obtain(
      arg0,
      arg1,
    );
  }

  late final _wasm_module_obtainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_module_t> Function(ffi.Pointer<wasm_store_t>,
              ffi.Pointer<wasm_shared_module_t>)>>('wasm_module_obtain');
  late final _wasm_module_obtain = _wasm_module_obtainPtr.asFunction<
      ffi.Pointer<wasm_module_t> Function(
          ffi.Pointer<wasm_store_t>, ffi.Pointer<wasm_shared_module_t>)>();

  ffi.Pointer<wasm_module_t> wasm_module_new(
    ffi.Pointer<wasm_store_t> arg0,
    ffi.Pointer<wasm_byte_vec_t> binary,
  ) {
    return _wasm_module_new(
      arg0,
      binary,
    );
  }

  late final _wasm_module_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_module_t> Function(ffi.Pointer<wasm_store_t>,
              ffi.Pointer<wasm_byte_vec_t>)>>('wasm_module_new');
  late final _wasm_module_new = _wasm_module_newPtr.asFunction<
      ffi.Pointer<wasm_module_t> Function(
          ffi.Pointer<wasm_store_t>, ffi.Pointer<wasm_byte_vec_t>)>();

  bool wasm_module_validate(
    ffi.Pointer<wasm_store_t> arg0,
    ffi.Pointer<wasm_byte_vec_t> binary,
  ) {
    return _wasm_module_validate(
      arg0,
      binary,
    );
  }

  late final _wasm_module_validatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<wasm_store_t>,
              ffi.Pointer<wasm_byte_vec_t>)>>('wasm_module_validate');
  late final _wasm_module_validate = _wasm_module_validatePtr.asFunction<
      bool Function(ffi.Pointer<wasm_store_t>, ffi.Pointer<wasm_byte_vec_t>)>();

  void wasm_module_imports(
    ffi.Pointer<wasm_module_t> arg0,
    ffi.Pointer<wasm_importtype_vec_t> out,
  ) {
    return _wasm_module_imports(
      arg0,
      out,
    );
  }

  late final _wasm_module_importsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_module_t>,
              ffi.Pointer<wasm_importtype_vec_t>)>>('wasm_module_imports');
  late final _wasm_module_imports = _wasm_module_importsPtr.asFunction<
      void Function(
          ffi.Pointer<wasm_module_t>, ffi.Pointer<wasm_importtype_vec_t>)>();

  void wasm_module_exports(
    ffi.Pointer<wasm_module_t> arg0,
    ffi.Pointer<wasm_exporttype_vec_t> out,
  ) {
    return _wasm_module_exports(
      arg0,
      out,
    );
  }

  late final _wasm_module_exportsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_module_t>,
              ffi.Pointer<wasm_exporttype_vec_t>)>>('wasm_module_exports');
  late final _wasm_module_exports = _wasm_module_exportsPtr.asFunction<
      void Function(
          ffi.Pointer<wasm_module_t>, ffi.Pointer<wasm_exporttype_vec_t>)>();

  void wasm_module_serialize(
    ffi.Pointer<wasm_module_t> arg0,
    ffi.Pointer<wasm_byte_vec_t> out,
  ) {
    return _wasm_module_serialize(
      arg0,
      out,
    );
  }

  late final _wasm_module_serializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_module_t>,
              ffi.Pointer<wasm_byte_vec_t>)>>('wasm_module_serialize');
  late final _wasm_module_serialize = _wasm_module_serializePtr.asFunction<
      void Function(
          ffi.Pointer<wasm_module_t>, ffi.Pointer<wasm_byte_vec_t>)>();

  ffi.Pointer<wasm_module_t> wasm_module_deserialize(
    ffi.Pointer<wasm_store_t> arg0,
    ffi.Pointer<wasm_byte_vec_t> arg1,
  ) {
    return _wasm_module_deserialize(
      arg0,
      arg1,
    );
  }

  late final _wasm_module_deserializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_module_t> Function(ffi.Pointer<wasm_store_t>,
              ffi.Pointer<wasm_byte_vec_t>)>>('wasm_module_deserialize');
  late final _wasm_module_deserialize = _wasm_module_deserializePtr.asFunction<
      ffi.Pointer<wasm_module_t> Function(
          ffi.Pointer<wasm_store_t>, ffi.Pointer<wasm_byte_vec_t>)>();

  void wasm_func_delete(
    ffi.Pointer<wasm_func_t> arg0,
  ) {
    return _wasm_func_delete(
      arg0,
    );
  }

  late final _wasm_func_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasm_func_t>)>>(
          'wasm_func_delete');
  late final _wasm_func_delete = _wasm_func_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_func_t>)>();

  ffi.Pointer<wasm_func_t> wasm_func_copy(
    ffi.Pointer<wasm_func_t> arg0,
  ) {
    return _wasm_func_copy(
      arg0,
    );
  }

  late final _wasm_func_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_func_t> Function(
              ffi.Pointer<wasm_func_t>)>>('wasm_func_copy');
  late final _wasm_func_copy = _wasm_func_copyPtr.asFunction<
      ffi.Pointer<wasm_func_t> Function(ffi.Pointer<wasm_func_t>)>();

  bool wasm_func_same(
    ffi.Pointer<wasm_func_t> arg0,
    ffi.Pointer<wasm_func_t> arg1,
  ) {
    return _wasm_func_same(
      arg0,
      arg1,
    );
  }

  late final _wasm_func_samePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<wasm_func_t>,
              ffi.Pointer<wasm_func_t>)>>('wasm_func_same');
  late final _wasm_func_same = _wasm_func_samePtr.asFunction<
      bool Function(ffi.Pointer<wasm_func_t>, ffi.Pointer<wasm_func_t>)>();

  ffi.Pointer<ffi.Void> wasm_func_get_host_info(
    ffi.Pointer<wasm_func_t> arg0,
  ) {
    return _wasm_func_get_host_info(
      arg0,
    );
  }

  late final _wasm_func_get_host_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<wasm_func_t>)>>('wasm_func_get_host_info');
  late final _wasm_func_get_host_info = _wasm_func_get_host_infoPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<wasm_func_t>)>();

  void wasm_func_set_host_info(
    ffi.Pointer<wasm_func_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _wasm_func_set_host_info(
      arg0,
      arg1,
    );
  }

  late final _wasm_func_set_host_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_func_t>,
              ffi.Pointer<ffi.Void>)>>('wasm_func_set_host_info');
  late final _wasm_func_set_host_info = _wasm_func_set_host_infoPtr.asFunction<
      void Function(ffi.Pointer<wasm_func_t>, ffi.Pointer<ffi.Void>)>();

  void wasm_func_set_host_info_with_finalizer(
    ffi.Pointer<wasm_func_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg2,
  ) {
    return _wasm_func_set_host_info_with_finalizer(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wasm_func_set_host_info_with_finalizerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<wasm_func_t>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
      'wasm_func_set_host_info_with_finalizer');
  late final _wasm_func_set_host_info_with_finalizer =
      _wasm_func_set_host_info_with_finalizerPtr.asFunction<
          void Function(
              ffi.Pointer<wasm_func_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<wasm_ref_t> wasm_func_as_ref(
    ffi.Pointer<wasm_func_t> arg0,
  ) {
    return _wasm_func_as_ref(
      arg0,
    );
  }

  late final _wasm_func_as_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_ref_t> Function(
              ffi.Pointer<wasm_func_t>)>>('wasm_func_as_ref');
  late final _wasm_func_as_ref = _wasm_func_as_refPtr
      .asFunction<ffi.Pointer<wasm_ref_t> Function(ffi.Pointer<wasm_func_t>)>();

  ffi.Pointer<wasm_func_t> wasm_ref_as_func(
    ffi.Pointer<wasm_ref_t> arg0,
  ) {
    return _wasm_ref_as_func(
      arg0,
    );
  }

  late final _wasm_ref_as_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_func_t> Function(
              ffi.Pointer<wasm_ref_t>)>>('wasm_ref_as_func');
  late final _wasm_ref_as_func = _wasm_ref_as_funcPtr
      .asFunction<ffi.Pointer<wasm_func_t> Function(ffi.Pointer<wasm_ref_t>)>();

  ffi.Pointer<wasm_ref_t> wasm_func_as_ref_const(
    ffi.Pointer<wasm_func_t> arg0,
  ) {
    return _wasm_func_as_ref_const(
      arg0,
    );
  }

  late final _wasm_func_as_ref_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_ref_t> Function(
              ffi.Pointer<wasm_func_t>)>>('wasm_func_as_ref_const');
  late final _wasm_func_as_ref_const = _wasm_func_as_ref_constPtr
      .asFunction<ffi.Pointer<wasm_ref_t> Function(ffi.Pointer<wasm_func_t>)>();

  ffi.Pointer<wasm_func_t> wasm_ref_as_func_const(
    ffi.Pointer<wasm_ref_t> arg0,
  ) {
    return _wasm_ref_as_func_const(
      arg0,
    );
  }

  late final _wasm_ref_as_func_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_func_t> Function(
              ffi.Pointer<wasm_ref_t>)>>('wasm_ref_as_func_const');
  late final _wasm_ref_as_func_const = _wasm_ref_as_func_constPtr
      .asFunction<ffi.Pointer<wasm_func_t> Function(ffi.Pointer<wasm_ref_t>)>();

  ffi.Pointer<wasm_func_t> wasm_func_new(
    ffi.Pointer<wasm_store_t> arg0,
    ffi.Pointer<wasm_functype_t> arg1,
    wasm_func_callback_t arg2,
  ) {
    return _wasm_func_new(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wasm_func_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_func_t> Function(
              ffi.Pointer<wasm_store_t>,
              ffi.Pointer<wasm_functype_t>,
              wasm_func_callback_t)>>('wasm_func_new');
  late final _wasm_func_new = _wasm_func_newPtr.asFunction<
      ffi.Pointer<wasm_func_t> Function(ffi.Pointer<wasm_store_t>,
          ffi.Pointer<wasm_functype_t>, wasm_func_callback_t)>();

  ffi.Pointer<wasm_func_t> wasm_func_new_with_env(
    ffi.Pointer<wasm_store_t> arg0,
    ffi.Pointer<wasm_functype_t> type,
    wasm_func_callback_with_env_t arg2,
    ffi.Pointer<ffi.Void> env,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        finalizer,
  ) {
    return _wasm_func_new_with_env(
      arg0,
      type,
      arg2,
      env,
      finalizer,
    );
  }

  late final _wasm_func_new_with_envPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_func_t> Function(
              ffi.Pointer<wasm_store_t>,
              ffi.Pointer<wasm_functype_t>,
              wasm_func_callback_with_env_t,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('wasm_func_new_with_env');
  late final _wasm_func_new_with_env = _wasm_func_new_with_envPtr.asFunction<
      ffi.Pointer<wasm_func_t> Function(
          ffi.Pointer<wasm_store_t>,
          ffi.Pointer<wasm_functype_t>,
          wasm_func_callback_with_env_t,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<wasm_functype_t> wasm_func_type(
    ffi.Pointer<wasm_func_t> arg0,
  ) {
    return _wasm_func_type(
      arg0,
    );
  }

  late final _wasm_func_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_functype_t> Function(
              ffi.Pointer<wasm_func_t>)>>('wasm_func_type');
  late final _wasm_func_type = _wasm_func_typePtr.asFunction<
      ffi.Pointer<wasm_functype_t> Function(ffi.Pointer<wasm_func_t>)>();

  int wasm_func_param_arity(
    ffi.Pointer<wasm_func_t> arg0,
  ) {
    return _wasm_func_param_arity(
      arg0,
    );
  }

  late final _wasm_func_param_arityPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<wasm_func_t>)>>(
          'wasm_func_param_arity');
  late final _wasm_func_param_arity = _wasm_func_param_arityPtr
      .asFunction<int Function(ffi.Pointer<wasm_func_t>)>();

  int wasm_func_result_arity(
    ffi.Pointer<wasm_func_t> arg0,
  ) {
    return _wasm_func_result_arity(
      arg0,
    );
  }

  late final _wasm_func_result_arityPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<wasm_func_t>)>>(
          'wasm_func_result_arity');
  late final _wasm_func_result_arity = _wasm_func_result_arityPtr
      .asFunction<int Function(ffi.Pointer<wasm_func_t>)>();

  ffi.Pointer<wasm_trap_t> wasm_func_call(
    ffi.Pointer<wasm_func_t> arg0,
    ffi.Pointer<wasm_val_vec_t> args,
    ffi.Pointer<wasm_val_vec_t> results,
  ) {
    return _wasm_func_call(
      arg0,
      args,
      results,
    );
  }

  late final _wasm_func_callPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_trap_t> Function(
              ffi.Pointer<wasm_func_t>,
              ffi.Pointer<wasm_val_vec_t>,
              ffi.Pointer<wasm_val_vec_t>)>>('wasm_func_call');
  late final _wasm_func_call = _wasm_func_callPtr.asFunction<
      ffi.Pointer<wasm_trap_t> Function(ffi.Pointer<wasm_func_t>,
          ffi.Pointer<wasm_val_vec_t>, ffi.Pointer<wasm_val_vec_t>)>();

  void wasm_global_delete(
    ffi.Pointer<wasm_global_t> arg0,
  ) {
    return _wasm_global_delete(
      arg0,
    );
  }

  late final _wasm_global_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasm_global_t>)>>(
      'wasm_global_delete');
  late final _wasm_global_delete = _wasm_global_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_global_t>)>();

  ffi.Pointer<wasm_global_t> wasm_global_copy(
    ffi.Pointer<wasm_global_t> arg0,
  ) {
    return _wasm_global_copy(
      arg0,
    );
  }

  late final _wasm_global_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_global_t> Function(
              ffi.Pointer<wasm_global_t>)>>('wasm_global_copy');
  late final _wasm_global_copy = _wasm_global_copyPtr.asFunction<
      ffi.Pointer<wasm_global_t> Function(ffi.Pointer<wasm_global_t>)>();

  bool wasm_global_same(
    ffi.Pointer<wasm_global_t> arg0,
    ffi.Pointer<wasm_global_t> arg1,
  ) {
    return _wasm_global_same(
      arg0,
      arg1,
    );
  }

  late final _wasm_global_samePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<wasm_global_t>,
              ffi.Pointer<wasm_global_t>)>>('wasm_global_same');
  late final _wasm_global_same = _wasm_global_samePtr.asFunction<
      bool Function(ffi.Pointer<wasm_global_t>, ffi.Pointer<wasm_global_t>)>();

  ffi.Pointer<ffi.Void> wasm_global_get_host_info(
    ffi.Pointer<wasm_global_t> arg0,
  ) {
    return _wasm_global_get_host_info(
      arg0,
    );
  }

  late final _wasm_global_get_host_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<wasm_global_t>)>>('wasm_global_get_host_info');
  late final _wasm_global_get_host_info = _wasm_global_get_host_infoPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<wasm_global_t>)>();

  void wasm_global_set_host_info(
    ffi.Pointer<wasm_global_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _wasm_global_set_host_info(
      arg0,
      arg1,
    );
  }

  late final _wasm_global_set_host_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_global_t>,
              ffi.Pointer<ffi.Void>)>>('wasm_global_set_host_info');
  late final _wasm_global_set_host_info =
      _wasm_global_set_host_infoPtr.asFunction<
          void Function(ffi.Pointer<wasm_global_t>, ffi.Pointer<ffi.Void>)>();

  void wasm_global_set_host_info_with_finalizer(
    ffi.Pointer<wasm_global_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg2,
  ) {
    return _wasm_global_set_host_info_with_finalizer(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wasm_global_set_host_info_with_finalizerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<wasm_global_t>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
      'wasm_global_set_host_info_with_finalizer');
  late final _wasm_global_set_host_info_with_finalizer =
      _wasm_global_set_host_info_with_finalizerPtr.asFunction<
          void Function(
              ffi.Pointer<wasm_global_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<wasm_ref_t> wasm_global_as_ref(
    ffi.Pointer<wasm_global_t> arg0,
  ) {
    return _wasm_global_as_ref(
      arg0,
    );
  }

  late final _wasm_global_as_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_ref_t> Function(
              ffi.Pointer<wasm_global_t>)>>('wasm_global_as_ref');
  late final _wasm_global_as_ref = _wasm_global_as_refPtr.asFunction<
      ffi.Pointer<wasm_ref_t> Function(ffi.Pointer<wasm_global_t>)>();

  ffi.Pointer<wasm_global_t> wasm_ref_as_global(
    ffi.Pointer<wasm_ref_t> arg0,
  ) {
    return _wasm_ref_as_global(
      arg0,
    );
  }

  late final _wasm_ref_as_globalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_global_t> Function(
              ffi.Pointer<wasm_ref_t>)>>('wasm_ref_as_global');
  late final _wasm_ref_as_global = _wasm_ref_as_globalPtr.asFunction<
      ffi.Pointer<wasm_global_t> Function(ffi.Pointer<wasm_ref_t>)>();

  ffi.Pointer<wasm_ref_t> wasm_global_as_ref_const(
    ffi.Pointer<wasm_global_t> arg0,
  ) {
    return _wasm_global_as_ref_const(
      arg0,
    );
  }

  late final _wasm_global_as_ref_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_ref_t> Function(
              ffi.Pointer<wasm_global_t>)>>('wasm_global_as_ref_const');
  late final _wasm_global_as_ref_const =
      _wasm_global_as_ref_constPtr.asFunction<
          ffi.Pointer<wasm_ref_t> Function(ffi.Pointer<wasm_global_t>)>();

  ffi.Pointer<wasm_global_t> wasm_ref_as_global_const(
    ffi.Pointer<wasm_ref_t> arg0,
  ) {
    return _wasm_ref_as_global_const(
      arg0,
    );
  }

  late final _wasm_ref_as_global_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_global_t> Function(
              ffi.Pointer<wasm_ref_t>)>>('wasm_ref_as_global_const');
  late final _wasm_ref_as_global_const =
      _wasm_ref_as_global_constPtr.asFunction<
          ffi.Pointer<wasm_global_t> Function(ffi.Pointer<wasm_ref_t>)>();

  ffi.Pointer<wasm_global_t> wasm_global_new(
    ffi.Pointer<wasm_store_t> arg0,
    ffi.Pointer<wasm_globaltype_t> arg1,
    ffi.Pointer<wasm_val_t> arg2,
  ) {
    return _wasm_global_new(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wasm_global_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_global_t> Function(
              ffi.Pointer<wasm_store_t>,
              ffi.Pointer<wasm_globaltype_t>,
              ffi.Pointer<wasm_val_t>)>>('wasm_global_new');
  late final _wasm_global_new = _wasm_global_newPtr.asFunction<
      ffi.Pointer<wasm_global_t> Function(ffi.Pointer<wasm_store_t>,
          ffi.Pointer<wasm_globaltype_t>, ffi.Pointer<wasm_val_t>)>();

  ffi.Pointer<wasm_globaltype_t> wasm_global_type(
    ffi.Pointer<wasm_global_t> arg0,
  ) {
    return _wasm_global_type(
      arg0,
    );
  }

  late final _wasm_global_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_globaltype_t> Function(
              ffi.Pointer<wasm_global_t>)>>('wasm_global_type');
  late final _wasm_global_type = _wasm_global_typePtr.asFunction<
      ffi.Pointer<wasm_globaltype_t> Function(ffi.Pointer<wasm_global_t>)>();

  void wasm_global_get(
    ffi.Pointer<wasm_global_t> arg0,
    ffi.Pointer<wasm_val_t> out,
  ) {
    return _wasm_global_get(
      arg0,
      out,
    );
  }

  late final _wasm_global_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_global_t>,
              ffi.Pointer<wasm_val_t>)>>('wasm_global_get');
  late final _wasm_global_get = _wasm_global_getPtr.asFunction<
      void Function(ffi.Pointer<wasm_global_t>, ffi.Pointer<wasm_val_t>)>();

  void wasm_global_set(
    ffi.Pointer<wasm_global_t> arg0,
    ffi.Pointer<wasm_val_t> arg1,
  ) {
    return _wasm_global_set(
      arg0,
      arg1,
    );
  }

  late final _wasm_global_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_global_t>,
              ffi.Pointer<wasm_val_t>)>>('wasm_global_set');
  late final _wasm_global_set = _wasm_global_setPtr.asFunction<
      void Function(ffi.Pointer<wasm_global_t>, ffi.Pointer<wasm_val_t>)>();

  void wasm_table_delete(
    ffi.Pointer<wasm_table_t> arg0,
  ) {
    return _wasm_table_delete(
      arg0,
    );
  }

  late final _wasm_table_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasm_table_t>)>>(
          'wasm_table_delete');
  late final _wasm_table_delete = _wasm_table_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_table_t>)>();

  ffi.Pointer<wasm_table_t> wasm_table_copy(
    ffi.Pointer<wasm_table_t> arg0,
  ) {
    return _wasm_table_copy(
      arg0,
    );
  }

  late final _wasm_table_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_table_t> Function(
              ffi.Pointer<wasm_table_t>)>>('wasm_table_copy');
  late final _wasm_table_copy = _wasm_table_copyPtr.asFunction<
      ffi.Pointer<wasm_table_t> Function(ffi.Pointer<wasm_table_t>)>();

  bool wasm_table_same(
    ffi.Pointer<wasm_table_t> arg0,
    ffi.Pointer<wasm_table_t> arg1,
  ) {
    return _wasm_table_same(
      arg0,
      arg1,
    );
  }

  late final _wasm_table_samePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<wasm_table_t>,
              ffi.Pointer<wasm_table_t>)>>('wasm_table_same');
  late final _wasm_table_same = _wasm_table_samePtr.asFunction<
      bool Function(ffi.Pointer<wasm_table_t>, ffi.Pointer<wasm_table_t>)>();

  ffi.Pointer<ffi.Void> wasm_table_get_host_info(
    ffi.Pointer<wasm_table_t> arg0,
  ) {
    return _wasm_table_get_host_info(
      arg0,
    );
  }

  late final _wasm_table_get_host_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<wasm_table_t>)>>('wasm_table_get_host_info');
  late final _wasm_table_get_host_info = _wasm_table_get_host_infoPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<wasm_table_t>)>();

  void wasm_table_set_host_info(
    ffi.Pointer<wasm_table_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _wasm_table_set_host_info(
      arg0,
      arg1,
    );
  }

  late final _wasm_table_set_host_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_table_t>,
              ffi.Pointer<ffi.Void>)>>('wasm_table_set_host_info');
  late final _wasm_table_set_host_info =
      _wasm_table_set_host_infoPtr.asFunction<
          void Function(ffi.Pointer<wasm_table_t>, ffi.Pointer<ffi.Void>)>();

  void wasm_table_set_host_info_with_finalizer(
    ffi.Pointer<wasm_table_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg2,
  ) {
    return _wasm_table_set_host_info_with_finalizer(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wasm_table_set_host_info_with_finalizerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<wasm_table_t>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
      'wasm_table_set_host_info_with_finalizer');
  late final _wasm_table_set_host_info_with_finalizer =
      _wasm_table_set_host_info_with_finalizerPtr.asFunction<
          void Function(
              ffi.Pointer<wasm_table_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<wasm_ref_t> wasm_table_as_ref(
    ffi.Pointer<wasm_table_t> arg0,
  ) {
    return _wasm_table_as_ref(
      arg0,
    );
  }

  late final _wasm_table_as_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_ref_t> Function(
              ffi.Pointer<wasm_table_t>)>>('wasm_table_as_ref');
  late final _wasm_table_as_ref = _wasm_table_as_refPtr.asFunction<
      ffi.Pointer<wasm_ref_t> Function(ffi.Pointer<wasm_table_t>)>();

  ffi.Pointer<wasm_table_t> wasm_ref_as_table(
    ffi.Pointer<wasm_ref_t> arg0,
  ) {
    return _wasm_ref_as_table(
      arg0,
    );
  }

  late final _wasm_ref_as_tablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_table_t> Function(
              ffi.Pointer<wasm_ref_t>)>>('wasm_ref_as_table');
  late final _wasm_ref_as_table = _wasm_ref_as_tablePtr.asFunction<
      ffi.Pointer<wasm_table_t> Function(ffi.Pointer<wasm_ref_t>)>();

  ffi.Pointer<wasm_ref_t> wasm_table_as_ref_const(
    ffi.Pointer<wasm_table_t> arg0,
  ) {
    return _wasm_table_as_ref_const(
      arg0,
    );
  }

  late final _wasm_table_as_ref_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_ref_t> Function(
              ffi.Pointer<wasm_table_t>)>>('wasm_table_as_ref_const');
  late final _wasm_table_as_ref_const = _wasm_table_as_ref_constPtr.asFunction<
      ffi.Pointer<wasm_ref_t> Function(ffi.Pointer<wasm_table_t>)>();

  ffi.Pointer<wasm_table_t> wasm_ref_as_table_const(
    ffi.Pointer<wasm_ref_t> arg0,
  ) {
    return _wasm_ref_as_table_const(
      arg0,
    );
  }

  late final _wasm_ref_as_table_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_table_t> Function(
              ffi.Pointer<wasm_ref_t>)>>('wasm_ref_as_table_const');
  late final _wasm_ref_as_table_const = _wasm_ref_as_table_constPtr.asFunction<
      ffi.Pointer<wasm_table_t> Function(ffi.Pointer<wasm_ref_t>)>();

  ffi.Pointer<wasm_table_t> wasm_table_new(
    ffi.Pointer<wasm_store_t> arg0,
    ffi.Pointer<wasm_tabletype_t> arg1,
    ffi.Pointer<wasm_ref_t> init,
  ) {
    return _wasm_table_new(
      arg0,
      arg1,
      init,
    );
  }

  late final _wasm_table_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_table_t> Function(
              ffi.Pointer<wasm_store_t>,
              ffi.Pointer<wasm_tabletype_t>,
              ffi.Pointer<wasm_ref_t>)>>('wasm_table_new');
  late final _wasm_table_new = _wasm_table_newPtr.asFunction<
      ffi.Pointer<wasm_table_t> Function(ffi.Pointer<wasm_store_t>,
          ffi.Pointer<wasm_tabletype_t>, ffi.Pointer<wasm_ref_t>)>();

  ffi.Pointer<wasm_tabletype_t> wasm_table_type(
    ffi.Pointer<wasm_table_t> arg0,
  ) {
    return _wasm_table_type(
      arg0,
    );
  }

  late final _wasm_table_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_tabletype_t> Function(
              ffi.Pointer<wasm_table_t>)>>('wasm_table_type');
  late final _wasm_table_type = _wasm_table_typePtr.asFunction<
      ffi.Pointer<wasm_tabletype_t> Function(ffi.Pointer<wasm_table_t>)>();

  ffi.Pointer<wasm_ref_t> wasm_table_get(
    ffi.Pointer<wasm_table_t> arg0,
    int index,
  ) {
    return _wasm_table_get(
      arg0,
      index,
    );
  }

  late final _wasm_table_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_ref_t> Function(
              ffi.Pointer<wasm_table_t>, wasm_table_size_t)>>('wasm_table_get');
  late final _wasm_table_get = _wasm_table_getPtr.asFunction<
      ffi.Pointer<wasm_ref_t> Function(ffi.Pointer<wasm_table_t>, int)>();

  bool wasm_table_set(
    ffi.Pointer<wasm_table_t> arg0,
    int index,
    ffi.Pointer<wasm_ref_t> arg2,
  ) {
    return _wasm_table_set(
      arg0,
      index,
      arg2,
    );
  }

  late final _wasm_table_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<wasm_table_t>, wasm_table_size_t,
              ffi.Pointer<wasm_ref_t>)>>('wasm_table_set');
  late final _wasm_table_set = _wasm_table_setPtr.asFunction<
      bool Function(ffi.Pointer<wasm_table_t>, int, ffi.Pointer<wasm_ref_t>)>();

  int wasm_table_size(
    ffi.Pointer<wasm_table_t> arg0,
  ) {
    return _wasm_table_size(
      arg0,
    );
  }

  late final _wasm_table_sizePtr = _lookup<
      ffi.NativeFunction<
          wasm_table_size_t Function(
              ffi.Pointer<wasm_table_t>)>>('wasm_table_size');
  late final _wasm_table_size =
      _wasm_table_sizePtr.asFunction<int Function(ffi.Pointer<wasm_table_t>)>();

  bool wasm_table_grow(
    ffi.Pointer<wasm_table_t> arg0,
    int delta,
    ffi.Pointer<wasm_ref_t> init,
  ) {
    return _wasm_table_grow(
      arg0,
      delta,
      init,
    );
  }

  late final _wasm_table_growPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<wasm_table_t>, wasm_table_size_t,
              ffi.Pointer<wasm_ref_t>)>>('wasm_table_grow');
  late final _wasm_table_grow = _wasm_table_growPtr.asFunction<
      bool Function(ffi.Pointer<wasm_table_t>, int, ffi.Pointer<wasm_ref_t>)>();

  void wasm_memory_delete(
    ffi.Pointer<wasm_memory_t> arg0,
  ) {
    return _wasm_memory_delete(
      arg0,
    );
  }

  late final _wasm_memory_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasm_memory_t>)>>(
      'wasm_memory_delete');
  late final _wasm_memory_delete = _wasm_memory_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_memory_t>)>();

  ffi.Pointer<wasm_memory_t> wasm_memory_copy(
    ffi.Pointer<wasm_memory_t> arg0,
  ) {
    return _wasm_memory_copy(
      arg0,
    );
  }

  late final _wasm_memory_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_memory_t> Function(
              ffi.Pointer<wasm_memory_t>)>>('wasm_memory_copy');
  late final _wasm_memory_copy = _wasm_memory_copyPtr.asFunction<
      ffi.Pointer<wasm_memory_t> Function(ffi.Pointer<wasm_memory_t>)>();

  bool wasm_memory_same(
    ffi.Pointer<wasm_memory_t> arg0,
    ffi.Pointer<wasm_memory_t> arg1,
  ) {
    return _wasm_memory_same(
      arg0,
      arg1,
    );
  }

  late final _wasm_memory_samePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<wasm_memory_t>,
              ffi.Pointer<wasm_memory_t>)>>('wasm_memory_same');
  late final _wasm_memory_same = _wasm_memory_samePtr.asFunction<
      bool Function(ffi.Pointer<wasm_memory_t>, ffi.Pointer<wasm_memory_t>)>();

  ffi.Pointer<ffi.Void> wasm_memory_get_host_info(
    ffi.Pointer<wasm_memory_t> arg0,
  ) {
    return _wasm_memory_get_host_info(
      arg0,
    );
  }

  late final _wasm_memory_get_host_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<wasm_memory_t>)>>('wasm_memory_get_host_info');
  late final _wasm_memory_get_host_info = _wasm_memory_get_host_infoPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<wasm_memory_t>)>();

  void wasm_memory_set_host_info(
    ffi.Pointer<wasm_memory_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _wasm_memory_set_host_info(
      arg0,
      arg1,
    );
  }

  late final _wasm_memory_set_host_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_memory_t>,
              ffi.Pointer<ffi.Void>)>>('wasm_memory_set_host_info');
  late final _wasm_memory_set_host_info =
      _wasm_memory_set_host_infoPtr.asFunction<
          void Function(ffi.Pointer<wasm_memory_t>, ffi.Pointer<ffi.Void>)>();

  void wasm_memory_set_host_info_with_finalizer(
    ffi.Pointer<wasm_memory_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg2,
  ) {
    return _wasm_memory_set_host_info_with_finalizer(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wasm_memory_set_host_info_with_finalizerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<wasm_memory_t>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
      'wasm_memory_set_host_info_with_finalizer');
  late final _wasm_memory_set_host_info_with_finalizer =
      _wasm_memory_set_host_info_with_finalizerPtr.asFunction<
          void Function(
              ffi.Pointer<wasm_memory_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<wasm_ref_t> wasm_memory_as_ref(
    ffi.Pointer<wasm_memory_t> arg0,
  ) {
    return _wasm_memory_as_ref(
      arg0,
    );
  }

  late final _wasm_memory_as_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_ref_t> Function(
              ffi.Pointer<wasm_memory_t>)>>('wasm_memory_as_ref');
  late final _wasm_memory_as_ref = _wasm_memory_as_refPtr.asFunction<
      ffi.Pointer<wasm_ref_t> Function(ffi.Pointer<wasm_memory_t>)>();

  ffi.Pointer<wasm_memory_t> wasm_ref_as_memory(
    ffi.Pointer<wasm_ref_t> arg0,
  ) {
    return _wasm_ref_as_memory(
      arg0,
    );
  }

  late final _wasm_ref_as_memoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_memory_t> Function(
              ffi.Pointer<wasm_ref_t>)>>('wasm_ref_as_memory');
  late final _wasm_ref_as_memory = _wasm_ref_as_memoryPtr.asFunction<
      ffi.Pointer<wasm_memory_t> Function(ffi.Pointer<wasm_ref_t>)>();

  ffi.Pointer<wasm_ref_t> wasm_memory_as_ref_const(
    ffi.Pointer<wasm_memory_t> arg0,
  ) {
    return _wasm_memory_as_ref_const(
      arg0,
    );
  }

  late final _wasm_memory_as_ref_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_ref_t> Function(
              ffi.Pointer<wasm_memory_t>)>>('wasm_memory_as_ref_const');
  late final _wasm_memory_as_ref_const =
      _wasm_memory_as_ref_constPtr.asFunction<
          ffi.Pointer<wasm_ref_t> Function(ffi.Pointer<wasm_memory_t>)>();

  ffi.Pointer<wasm_memory_t> wasm_ref_as_memory_const(
    ffi.Pointer<wasm_ref_t> arg0,
  ) {
    return _wasm_ref_as_memory_const(
      arg0,
    );
  }

  late final _wasm_ref_as_memory_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_memory_t> Function(
              ffi.Pointer<wasm_ref_t>)>>('wasm_ref_as_memory_const');
  late final _wasm_ref_as_memory_const =
      _wasm_ref_as_memory_constPtr.asFunction<
          ffi.Pointer<wasm_memory_t> Function(ffi.Pointer<wasm_ref_t>)>();

  late final ffi.Pointer<ffi.Size> _MEMORY_PAGE_SIZE =
      _lookup<ffi.Size>('MEMORY_PAGE_SIZE');

  int get MEMORY_PAGE_SIZE => _MEMORY_PAGE_SIZE.value;

  ffi.Pointer<wasm_memory_t> wasm_memory_new(
    ffi.Pointer<wasm_store_t> arg0,
    ffi.Pointer<wasm_memorytype_t> arg1,
  ) {
    return _wasm_memory_new(
      arg0,
      arg1,
    );
  }

  late final _wasm_memory_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_memory_t> Function(ffi.Pointer<wasm_store_t>,
              ffi.Pointer<wasm_memorytype_t>)>>('wasm_memory_new');
  late final _wasm_memory_new = _wasm_memory_newPtr.asFunction<
      ffi.Pointer<wasm_memory_t> Function(
          ffi.Pointer<wasm_store_t>, ffi.Pointer<wasm_memorytype_t>)>();

  ffi.Pointer<wasm_memorytype_t> wasm_memory_type(
    ffi.Pointer<wasm_memory_t> arg0,
  ) {
    return _wasm_memory_type(
      arg0,
    );
  }

  late final _wasm_memory_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_memorytype_t> Function(
              ffi.Pointer<wasm_memory_t>)>>('wasm_memory_type');
  late final _wasm_memory_type = _wasm_memory_typePtr.asFunction<
      ffi.Pointer<wasm_memorytype_t> Function(ffi.Pointer<wasm_memory_t>)>();

  ffi.Pointer<byte_t> wasm_memory_data(
    ffi.Pointer<wasm_memory_t> arg0,
  ) {
    return _wasm_memory_data(
      arg0,
    );
  }

  late final _wasm_memory_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<byte_t> Function(
              ffi.Pointer<wasm_memory_t>)>>('wasm_memory_data');
  late final _wasm_memory_data = _wasm_memory_dataPtr
      .asFunction<ffi.Pointer<byte_t> Function(ffi.Pointer<wasm_memory_t>)>();

  int wasm_memory_data_size(
    ffi.Pointer<wasm_memory_t> arg0,
  ) {
    return _wasm_memory_data_size(
      arg0,
    );
  }

  late final _wasm_memory_data_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<wasm_memory_t>)>>(
      'wasm_memory_data_size');
  late final _wasm_memory_data_size = _wasm_memory_data_sizePtr
      .asFunction<int Function(ffi.Pointer<wasm_memory_t>)>();

  int wasm_memory_size(
    ffi.Pointer<wasm_memory_t> arg0,
  ) {
    return _wasm_memory_size(
      arg0,
    );
  }

  late final _wasm_memory_sizePtr = _lookup<
      ffi.NativeFunction<
          wasm_memory_pages_t Function(
              ffi.Pointer<wasm_memory_t>)>>('wasm_memory_size');
  late final _wasm_memory_size = _wasm_memory_sizePtr
      .asFunction<int Function(ffi.Pointer<wasm_memory_t>)>();

  bool wasm_memory_grow(
    ffi.Pointer<wasm_memory_t> arg0,
    int delta,
  ) {
    return _wasm_memory_grow(
      arg0,
      delta,
    );
  }

  late final _wasm_memory_growPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<wasm_memory_t>,
              wasm_memory_pages_t)>>('wasm_memory_grow');
  late final _wasm_memory_grow = _wasm_memory_growPtr
      .asFunction<bool Function(ffi.Pointer<wasm_memory_t>, int)>();

  void wasm_extern_delete(
    ffi.Pointer<wasm_extern_t> arg0,
  ) {
    return _wasm_extern_delete(
      arg0,
    );
  }

  late final _wasm_extern_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasm_extern_t>)>>(
      'wasm_extern_delete');
  late final _wasm_extern_delete = _wasm_extern_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_extern_t>)>();

  ffi.Pointer<wasm_extern_t> wasm_extern_copy(
    ffi.Pointer<wasm_extern_t> arg0,
  ) {
    return _wasm_extern_copy(
      arg0,
    );
  }

  late final _wasm_extern_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_extern_t> Function(
              ffi.Pointer<wasm_extern_t>)>>('wasm_extern_copy');
  late final _wasm_extern_copy = _wasm_extern_copyPtr.asFunction<
      ffi.Pointer<wasm_extern_t> Function(ffi.Pointer<wasm_extern_t>)>();

  bool wasm_extern_same(
    ffi.Pointer<wasm_extern_t> arg0,
    ffi.Pointer<wasm_extern_t> arg1,
  ) {
    return _wasm_extern_same(
      arg0,
      arg1,
    );
  }

  late final _wasm_extern_samePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<wasm_extern_t>,
              ffi.Pointer<wasm_extern_t>)>>('wasm_extern_same');
  late final _wasm_extern_same = _wasm_extern_samePtr.asFunction<
      bool Function(ffi.Pointer<wasm_extern_t>, ffi.Pointer<wasm_extern_t>)>();

  ffi.Pointer<ffi.Void> wasm_extern_get_host_info(
    ffi.Pointer<wasm_extern_t> arg0,
  ) {
    return _wasm_extern_get_host_info(
      arg0,
    );
  }

  late final _wasm_extern_get_host_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<wasm_extern_t>)>>('wasm_extern_get_host_info');
  late final _wasm_extern_get_host_info = _wasm_extern_get_host_infoPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<wasm_extern_t>)>();

  void wasm_extern_set_host_info(
    ffi.Pointer<wasm_extern_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _wasm_extern_set_host_info(
      arg0,
      arg1,
    );
  }

  late final _wasm_extern_set_host_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_extern_t>,
              ffi.Pointer<ffi.Void>)>>('wasm_extern_set_host_info');
  late final _wasm_extern_set_host_info =
      _wasm_extern_set_host_infoPtr.asFunction<
          void Function(ffi.Pointer<wasm_extern_t>, ffi.Pointer<ffi.Void>)>();

  void wasm_extern_set_host_info_with_finalizer(
    ffi.Pointer<wasm_extern_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg2,
  ) {
    return _wasm_extern_set_host_info_with_finalizer(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wasm_extern_set_host_info_with_finalizerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<wasm_extern_t>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
      'wasm_extern_set_host_info_with_finalizer');
  late final _wasm_extern_set_host_info_with_finalizer =
      _wasm_extern_set_host_info_with_finalizerPtr.asFunction<
          void Function(
              ffi.Pointer<wasm_extern_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<wasm_ref_t> wasm_extern_as_ref(
    ffi.Pointer<wasm_extern_t> arg0,
  ) {
    return _wasm_extern_as_ref(
      arg0,
    );
  }

  late final _wasm_extern_as_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_ref_t> Function(
              ffi.Pointer<wasm_extern_t>)>>('wasm_extern_as_ref');
  late final _wasm_extern_as_ref = _wasm_extern_as_refPtr.asFunction<
      ffi.Pointer<wasm_ref_t> Function(ffi.Pointer<wasm_extern_t>)>();

  ffi.Pointer<wasm_extern_t> wasm_ref_as_extern(
    ffi.Pointer<wasm_ref_t> arg0,
  ) {
    return _wasm_ref_as_extern(
      arg0,
    );
  }

  late final _wasm_ref_as_externPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_extern_t> Function(
              ffi.Pointer<wasm_ref_t>)>>('wasm_ref_as_extern');
  late final _wasm_ref_as_extern = _wasm_ref_as_externPtr.asFunction<
      ffi.Pointer<wasm_extern_t> Function(ffi.Pointer<wasm_ref_t>)>();

  ffi.Pointer<wasm_ref_t> wasm_extern_as_ref_const(
    ffi.Pointer<wasm_extern_t> arg0,
  ) {
    return _wasm_extern_as_ref_const(
      arg0,
    );
  }

  late final _wasm_extern_as_ref_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_ref_t> Function(
              ffi.Pointer<wasm_extern_t>)>>('wasm_extern_as_ref_const');
  late final _wasm_extern_as_ref_const =
      _wasm_extern_as_ref_constPtr.asFunction<
          ffi.Pointer<wasm_ref_t> Function(ffi.Pointer<wasm_extern_t>)>();

  ffi.Pointer<wasm_extern_t> wasm_ref_as_extern_const(
    ffi.Pointer<wasm_ref_t> arg0,
  ) {
    return _wasm_ref_as_extern_const(
      arg0,
    );
  }

  late final _wasm_ref_as_extern_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_extern_t> Function(
              ffi.Pointer<wasm_ref_t>)>>('wasm_ref_as_extern_const');
  late final _wasm_ref_as_extern_const =
      _wasm_ref_as_extern_constPtr.asFunction<
          ffi.Pointer<wasm_extern_t> Function(ffi.Pointer<wasm_ref_t>)>();

  void wasm_extern_vec_new_empty(
    ffi.Pointer<wasm_extern_vec_t> out,
  ) {
    return _wasm_extern_vec_new_empty(
      out,
    );
  }

  late final _wasm_extern_vec_new_emptyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<wasm_extern_vec_t>)>>(
      'wasm_extern_vec_new_empty');
  late final _wasm_extern_vec_new_empty = _wasm_extern_vec_new_emptyPtr
      .asFunction<void Function(ffi.Pointer<wasm_extern_vec_t>)>();

  void wasm_extern_vec_new_uninitialized(
    ffi.Pointer<wasm_extern_vec_t> out,
    int arg1,
  ) {
    return _wasm_extern_vec_new_uninitialized(
      out,
      arg1,
    );
  }

  late final _wasm_extern_vec_new_uninitializedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_extern_vec_t>,
              ffi.Size)>>('wasm_extern_vec_new_uninitialized');
  late final _wasm_extern_vec_new_uninitialized =
      _wasm_extern_vec_new_uninitializedPtr
          .asFunction<void Function(ffi.Pointer<wasm_extern_vec_t>, int)>();

  void wasm_extern_vec_new(
    ffi.Pointer<wasm_extern_vec_t> out,
    int arg1,
    ffi.Pointer<ffi.Pointer<wasm_extern_t>> arg2,
  ) {
    return _wasm_extern_vec_new(
      out,
      arg1,
      arg2,
    );
  }

  late final _wasm_extern_vec_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_extern_vec_t>, ffi.Size,
              ffi.Pointer<ffi.Pointer<wasm_extern_t>>)>>('wasm_extern_vec_new');
  late final _wasm_extern_vec_new = _wasm_extern_vec_newPtr.asFunction<
      void Function(ffi.Pointer<wasm_extern_vec_t>, int,
          ffi.Pointer<ffi.Pointer<wasm_extern_t>>)>();

  void wasm_extern_vec_copy(
    ffi.Pointer<wasm_extern_vec_t> out,
    ffi.Pointer<wasm_extern_vec_t> arg1,
  ) {
    return _wasm_extern_vec_copy(
      out,
      arg1,
    );
  }

  late final _wasm_extern_vec_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_extern_vec_t>,
              ffi.Pointer<wasm_extern_vec_t>)>>('wasm_extern_vec_copy');
  late final _wasm_extern_vec_copy = _wasm_extern_vec_copyPtr.asFunction<
      void Function(
          ffi.Pointer<wasm_extern_vec_t>, ffi.Pointer<wasm_extern_vec_t>)>();

  void wasm_extern_vec_delete(
    ffi.Pointer<wasm_extern_vec_t> arg0,
  ) {
    return _wasm_extern_vec_delete(
      arg0,
    );
  }

  late final _wasm_extern_vec_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<wasm_extern_vec_t>)>>(
      'wasm_extern_vec_delete');
  late final _wasm_extern_vec_delete = _wasm_extern_vec_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_extern_vec_t>)>();

  int wasm_extern_kind(
    ffi.Pointer<wasm_extern_t> arg0,
  ) {
    return _wasm_extern_kind(
      arg0,
    );
  }

  late final _wasm_extern_kindPtr = _lookup<
      ffi.NativeFunction<
          wasm_externkind_t Function(
              ffi.Pointer<wasm_extern_t>)>>('wasm_extern_kind');
  late final _wasm_extern_kind = _wasm_extern_kindPtr
      .asFunction<int Function(ffi.Pointer<wasm_extern_t>)>();

  ffi.Pointer<wasm_externtype_t> wasm_extern_type(
    ffi.Pointer<wasm_extern_t> arg0,
  ) {
    return _wasm_extern_type(
      arg0,
    );
  }

  late final _wasm_extern_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_externtype_t> Function(
              ffi.Pointer<wasm_extern_t>)>>('wasm_extern_type');
  late final _wasm_extern_type = _wasm_extern_typePtr.asFunction<
      ffi.Pointer<wasm_externtype_t> Function(ffi.Pointer<wasm_extern_t>)>();

  ffi.Pointer<wasm_extern_t> wasm_func_as_extern(
    ffi.Pointer<wasm_func_t> arg0,
  ) {
    return _wasm_func_as_extern(
      arg0,
    );
  }

  late final _wasm_func_as_externPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_extern_t> Function(
              ffi.Pointer<wasm_func_t>)>>('wasm_func_as_extern');
  late final _wasm_func_as_extern = _wasm_func_as_externPtr.asFunction<
      ffi.Pointer<wasm_extern_t> Function(ffi.Pointer<wasm_func_t>)>();

  ffi.Pointer<wasm_extern_t> wasm_global_as_extern(
    ffi.Pointer<wasm_global_t> arg0,
  ) {
    return _wasm_global_as_extern(
      arg0,
    );
  }

  late final _wasm_global_as_externPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_extern_t> Function(
              ffi.Pointer<wasm_global_t>)>>('wasm_global_as_extern');
  late final _wasm_global_as_extern = _wasm_global_as_externPtr.asFunction<
      ffi.Pointer<wasm_extern_t> Function(ffi.Pointer<wasm_global_t>)>();

  ffi.Pointer<wasm_extern_t> wasm_table_as_extern(
    ffi.Pointer<wasm_table_t> arg0,
  ) {
    return _wasm_table_as_extern(
      arg0,
    );
  }

  late final _wasm_table_as_externPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_extern_t> Function(
              ffi.Pointer<wasm_table_t>)>>('wasm_table_as_extern');
  late final _wasm_table_as_extern = _wasm_table_as_externPtr.asFunction<
      ffi.Pointer<wasm_extern_t> Function(ffi.Pointer<wasm_table_t>)>();

  ffi.Pointer<wasm_extern_t> wasm_memory_as_extern(
    ffi.Pointer<wasm_memory_t> arg0,
  ) {
    return _wasm_memory_as_extern(
      arg0,
    );
  }

  late final _wasm_memory_as_externPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_extern_t> Function(
              ffi.Pointer<wasm_memory_t>)>>('wasm_memory_as_extern');
  late final _wasm_memory_as_extern = _wasm_memory_as_externPtr.asFunction<
      ffi.Pointer<wasm_extern_t> Function(ffi.Pointer<wasm_memory_t>)>();

  ffi.Pointer<wasm_func_t> wasm_extern_as_func(
    ffi.Pointer<wasm_extern_t> arg0,
  ) {
    return _wasm_extern_as_func(
      arg0,
    );
  }

  late final _wasm_extern_as_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_func_t> Function(
              ffi.Pointer<wasm_extern_t>)>>('wasm_extern_as_func');
  late final _wasm_extern_as_func = _wasm_extern_as_funcPtr.asFunction<
      ffi.Pointer<wasm_func_t> Function(ffi.Pointer<wasm_extern_t>)>();

  ffi.Pointer<wasm_global_t> wasm_extern_as_global(
    ffi.Pointer<wasm_extern_t> arg0,
  ) {
    return _wasm_extern_as_global(
      arg0,
    );
  }

  late final _wasm_extern_as_globalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_global_t> Function(
              ffi.Pointer<wasm_extern_t>)>>('wasm_extern_as_global');
  late final _wasm_extern_as_global = _wasm_extern_as_globalPtr.asFunction<
      ffi.Pointer<wasm_global_t> Function(ffi.Pointer<wasm_extern_t>)>();

  ffi.Pointer<wasm_table_t> wasm_extern_as_table(
    ffi.Pointer<wasm_extern_t> arg0,
  ) {
    return _wasm_extern_as_table(
      arg0,
    );
  }

  late final _wasm_extern_as_tablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_table_t> Function(
              ffi.Pointer<wasm_extern_t>)>>('wasm_extern_as_table');
  late final _wasm_extern_as_table = _wasm_extern_as_tablePtr.asFunction<
      ffi.Pointer<wasm_table_t> Function(ffi.Pointer<wasm_extern_t>)>();

  ffi.Pointer<wasm_memory_t> wasm_extern_as_memory(
    ffi.Pointer<wasm_extern_t> arg0,
  ) {
    return _wasm_extern_as_memory(
      arg0,
    );
  }

  late final _wasm_extern_as_memoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_memory_t> Function(
              ffi.Pointer<wasm_extern_t>)>>('wasm_extern_as_memory');
  late final _wasm_extern_as_memory = _wasm_extern_as_memoryPtr.asFunction<
      ffi.Pointer<wasm_memory_t> Function(ffi.Pointer<wasm_extern_t>)>();

  ffi.Pointer<wasm_extern_t> wasm_func_as_extern_const(
    ffi.Pointer<wasm_func_t> arg0,
  ) {
    return _wasm_func_as_extern_const(
      arg0,
    );
  }

  late final _wasm_func_as_extern_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_extern_t> Function(
              ffi.Pointer<wasm_func_t>)>>('wasm_func_as_extern_const');
  late final _wasm_func_as_extern_const =
      _wasm_func_as_extern_constPtr.asFunction<
          ffi.Pointer<wasm_extern_t> Function(ffi.Pointer<wasm_func_t>)>();

  ffi.Pointer<wasm_extern_t> wasm_global_as_extern_const(
    ffi.Pointer<wasm_global_t> arg0,
  ) {
    return _wasm_global_as_extern_const(
      arg0,
    );
  }

  late final _wasm_global_as_extern_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_extern_t> Function(
              ffi.Pointer<wasm_global_t>)>>('wasm_global_as_extern_const');
  late final _wasm_global_as_extern_const =
      _wasm_global_as_extern_constPtr.asFunction<
          ffi.Pointer<wasm_extern_t> Function(ffi.Pointer<wasm_global_t>)>();

  ffi.Pointer<wasm_extern_t> wasm_table_as_extern_const(
    ffi.Pointer<wasm_table_t> arg0,
  ) {
    return _wasm_table_as_extern_const(
      arg0,
    );
  }

  late final _wasm_table_as_extern_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_extern_t> Function(
              ffi.Pointer<wasm_table_t>)>>('wasm_table_as_extern_const');
  late final _wasm_table_as_extern_const =
      _wasm_table_as_extern_constPtr.asFunction<
          ffi.Pointer<wasm_extern_t> Function(ffi.Pointer<wasm_table_t>)>();

  ffi.Pointer<wasm_extern_t> wasm_memory_as_extern_const(
    ffi.Pointer<wasm_memory_t> arg0,
  ) {
    return _wasm_memory_as_extern_const(
      arg0,
    );
  }

  late final _wasm_memory_as_extern_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_extern_t> Function(
              ffi.Pointer<wasm_memory_t>)>>('wasm_memory_as_extern_const');
  late final _wasm_memory_as_extern_const =
      _wasm_memory_as_extern_constPtr.asFunction<
          ffi.Pointer<wasm_extern_t> Function(ffi.Pointer<wasm_memory_t>)>();

  ffi.Pointer<wasm_func_t> wasm_extern_as_func_const(
    ffi.Pointer<wasm_extern_t> arg0,
  ) {
    return _wasm_extern_as_func_const(
      arg0,
    );
  }

  late final _wasm_extern_as_func_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_func_t> Function(
              ffi.Pointer<wasm_extern_t>)>>('wasm_extern_as_func_const');
  late final _wasm_extern_as_func_const =
      _wasm_extern_as_func_constPtr.asFunction<
          ffi.Pointer<wasm_func_t> Function(ffi.Pointer<wasm_extern_t>)>();

  ffi.Pointer<wasm_global_t> wasm_extern_as_global_const(
    ffi.Pointer<wasm_extern_t> arg0,
  ) {
    return _wasm_extern_as_global_const(
      arg0,
    );
  }

  late final _wasm_extern_as_global_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_global_t> Function(
              ffi.Pointer<wasm_extern_t>)>>('wasm_extern_as_global_const');
  late final _wasm_extern_as_global_const =
      _wasm_extern_as_global_constPtr.asFunction<
          ffi.Pointer<wasm_global_t> Function(ffi.Pointer<wasm_extern_t>)>();

  ffi.Pointer<wasm_table_t> wasm_extern_as_table_const(
    ffi.Pointer<wasm_extern_t> arg0,
  ) {
    return _wasm_extern_as_table_const(
      arg0,
    );
  }

  late final _wasm_extern_as_table_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_table_t> Function(
              ffi.Pointer<wasm_extern_t>)>>('wasm_extern_as_table_const');
  late final _wasm_extern_as_table_const =
      _wasm_extern_as_table_constPtr.asFunction<
          ffi.Pointer<wasm_table_t> Function(ffi.Pointer<wasm_extern_t>)>();

  ffi.Pointer<wasm_memory_t> wasm_extern_as_memory_const(
    ffi.Pointer<wasm_extern_t> arg0,
  ) {
    return _wasm_extern_as_memory_const(
      arg0,
    );
  }

  late final _wasm_extern_as_memory_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_memory_t> Function(
              ffi.Pointer<wasm_extern_t>)>>('wasm_extern_as_memory_const');
  late final _wasm_extern_as_memory_const =
      _wasm_extern_as_memory_constPtr.asFunction<
          ffi.Pointer<wasm_memory_t> Function(ffi.Pointer<wasm_extern_t>)>();

  void wasm_instance_delete(
    ffi.Pointer<wasm_instance_t> arg0,
  ) {
    return _wasm_instance_delete(
      arg0,
    );
  }

  late final _wasm_instance_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasm_instance_t>)>>(
      'wasm_instance_delete');
  late final _wasm_instance_delete = _wasm_instance_deletePtr
      .asFunction<void Function(ffi.Pointer<wasm_instance_t>)>();

  ffi.Pointer<wasm_instance_t> wasm_instance_copy(
    ffi.Pointer<wasm_instance_t> arg0,
  ) {
    return _wasm_instance_copy(
      arg0,
    );
  }

  late final _wasm_instance_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_instance_t> Function(
              ffi.Pointer<wasm_instance_t>)>>('wasm_instance_copy');
  late final _wasm_instance_copy = _wasm_instance_copyPtr.asFunction<
      ffi.Pointer<wasm_instance_t> Function(ffi.Pointer<wasm_instance_t>)>();

  bool wasm_instance_same(
    ffi.Pointer<wasm_instance_t> arg0,
    ffi.Pointer<wasm_instance_t> arg1,
  ) {
    return _wasm_instance_same(
      arg0,
      arg1,
    );
  }

  late final _wasm_instance_samePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<wasm_instance_t>,
              ffi.Pointer<wasm_instance_t>)>>('wasm_instance_same');
  late final _wasm_instance_same = _wasm_instance_samePtr.asFunction<
      bool Function(
          ffi.Pointer<wasm_instance_t>, ffi.Pointer<wasm_instance_t>)>();

  ffi.Pointer<ffi.Void> wasm_instance_get_host_info(
    ffi.Pointer<wasm_instance_t> arg0,
  ) {
    return _wasm_instance_get_host_info(
      arg0,
    );
  }

  late final _wasm_instance_get_host_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<wasm_instance_t>)>>('wasm_instance_get_host_info');
  late final _wasm_instance_get_host_info =
      _wasm_instance_get_host_infoPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<wasm_instance_t>)>();

  void wasm_instance_set_host_info(
    ffi.Pointer<wasm_instance_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _wasm_instance_set_host_info(
      arg0,
      arg1,
    );
  }

  late final _wasm_instance_set_host_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_instance_t>,
              ffi.Pointer<ffi.Void>)>>('wasm_instance_set_host_info');
  late final _wasm_instance_set_host_info =
      _wasm_instance_set_host_infoPtr.asFunction<
          void Function(ffi.Pointer<wasm_instance_t>, ffi.Pointer<ffi.Void>)>();

  void wasm_instance_set_host_info_with_finalizer(
    ffi.Pointer<wasm_instance_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg2,
  ) {
    return _wasm_instance_set_host_info_with_finalizer(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wasm_instance_set_host_info_with_finalizerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<wasm_instance_t>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
      'wasm_instance_set_host_info_with_finalizer');
  late final _wasm_instance_set_host_info_with_finalizer =
      _wasm_instance_set_host_info_with_finalizerPtr.asFunction<
          void Function(
              ffi.Pointer<wasm_instance_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<wasm_ref_t> wasm_instance_as_ref(
    ffi.Pointer<wasm_instance_t> arg0,
  ) {
    return _wasm_instance_as_ref(
      arg0,
    );
  }

  late final _wasm_instance_as_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_ref_t> Function(
              ffi.Pointer<wasm_instance_t>)>>('wasm_instance_as_ref');
  late final _wasm_instance_as_ref = _wasm_instance_as_refPtr.asFunction<
      ffi.Pointer<wasm_ref_t> Function(ffi.Pointer<wasm_instance_t>)>();

  ffi.Pointer<wasm_instance_t> wasm_ref_as_instance(
    ffi.Pointer<wasm_ref_t> arg0,
  ) {
    return _wasm_ref_as_instance(
      arg0,
    );
  }

  late final _wasm_ref_as_instancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_instance_t> Function(
              ffi.Pointer<wasm_ref_t>)>>('wasm_ref_as_instance');
  late final _wasm_ref_as_instance = _wasm_ref_as_instancePtr.asFunction<
      ffi.Pointer<wasm_instance_t> Function(ffi.Pointer<wasm_ref_t>)>();

  ffi.Pointer<wasm_ref_t> wasm_instance_as_ref_const(
    ffi.Pointer<wasm_instance_t> arg0,
  ) {
    return _wasm_instance_as_ref_const(
      arg0,
    );
  }

  late final _wasm_instance_as_ref_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_ref_t> Function(
              ffi.Pointer<wasm_instance_t>)>>('wasm_instance_as_ref_const');
  late final _wasm_instance_as_ref_const =
      _wasm_instance_as_ref_constPtr.asFunction<
          ffi.Pointer<wasm_ref_t> Function(ffi.Pointer<wasm_instance_t>)>();

  ffi.Pointer<wasm_instance_t> wasm_ref_as_instance_const(
    ffi.Pointer<wasm_ref_t> arg0,
  ) {
    return _wasm_ref_as_instance_const(
      arg0,
    );
  }

  late final _wasm_ref_as_instance_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_instance_t> Function(
              ffi.Pointer<wasm_ref_t>)>>('wasm_ref_as_instance_const');
  late final _wasm_ref_as_instance_const =
      _wasm_ref_as_instance_constPtr.asFunction<
          ffi.Pointer<wasm_instance_t> Function(ffi.Pointer<wasm_ref_t>)>();

  ffi.Pointer<wasm_instance_t> wasm_instance_new(
    ffi.Pointer<wasm_store_t> arg0,
    ffi.Pointer<wasm_module_t> arg1,
    ffi.Pointer<wasm_extern_vec_t> imports,
    ffi.Pointer<ffi.Pointer<wasm_trap_t>> arg3,
  ) {
    return _wasm_instance_new(
      arg0,
      arg1,
      imports,
      arg3,
    );
  }

  late final _wasm_instance_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_instance_t> Function(
              ffi.Pointer<wasm_store_t>,
              ffi.Pointer<wasm_module_t>,
              ffi.Pointer<wasm_extern_vec_t>,
              ffi.Pointer<ffi.Pointer<wasm_trap_t>>)>>('wasm_instance_new');
  late final _wasm_instance_new = _wasm_instance_newPtr.asFunction<
      ffi.Pointer<wasm_instance_t> Function(
          ffi.Pointer<wasm_store_t>,
          ffi.Pointer<wasm_module_t>,
          ffi.Pointer<wasm_extern_vec_t>,
          ffi.Pointer<ffi.Pointer<wasm_trap_t>>)>();

  void wasm_instance_exports(
    ffi.Pointer<wasm_instance_t> arg0,
    ffi.Pointer<wasm_extern_vec_t> out,
  ) {
    return _wasm_instance_exports(
      arg0,
      out,
    );
  }

  late final _wasm_instance_exportsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_instance_t>,
              ffi.Pointer<wasm_extern_vec_t>)>>('wasm_instance_exports');
  late final _wasm_instance_exports = _wasm_instance_exportsPtr.asFunction<
      void Function(
          ffi.Pointer<wasm_instance_t>, ffi.Pointer<wasm_extern_vec_t>)>();

  void wasi_config_delete(
    ffi.Pointer<wasi_config_t> arg0,
  ) {
    return _wasi_config_delete(
      arg0,
    );
  }

  late final _wasi_config_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasi_config_t>)>>(
      'wasi_config_delete');
  late final _wasi_config_delete = _wasi_config_deletePtr
      .asFunction<void Function(ffi.Pointer<wasi_config_t>)>();

  ffi.Pointer<wasi_config_t> wasi_config_new() {
    return _wasi_config_new();
  }

  late final _wasi_config_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wasi_config_t> Function()>>(
          'wasi_config_new');
  late final _wasi_config_new =
      _wasi_config_newPtr.asFunction<ffi.Pointer<wasi_config_t> Function()>();

  bool wasi_config_set_argv(
    ffi.Pointer<wasi_config_t> config,
    int argc,
    ffi.Pointer<ffi.Pointer<ffi.Char>> argv,
  ) {
    return _wasi_config_set_argv(
      config,
      argc,
      argv,
    );
  }

  late final _wasi_config_set_argvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<wasi_config_t>, ffi.Size,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('wasi_config_set_argv');
  late final _wasi_config_set_argv = _wasi_config_set_argvPtr.asFunction<
      bool Function(ffi.Pointer<wasi_config_t>, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void wasi_config_inherit_argv(
    ffi.Pointer<wasi_config_t> config,
  ) {
    return _wasi_config_inherit_argv(
      config,
    );
  }

  late final _wasi_config_inherit_argvPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasi_config_t>)>>(
      'wasi_config_inherit_argv');
  late final _wasi_config_inherit_argv = _wasi_config_inherit_argvPtr
      .asFunction<void Function(ffi.Pointer<wasi_config_t>)>();

  bool wasi_config_set_env(
    ffi.Pointer<wasi_config_t> config,
    int envc,
    ffi.Pointer<ffi.Pointer<ffi.Char>> names,
    ffi.Pointer<ffi.Pointer<ffi.Char>> values,
  ) {
    return _wasi_config_set_env(
      config,
      envc,
      names,
      values,
    );
  }

  late final _wasi_config_set_envPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<wasi_config_t>,
              ffi.Size,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('wasi_config_set_env');
  late final _wasi_config_set_env = _wasi_config_set_envPtr.asFunction<
      bool Function(
          ffi.Pointer<wasi_config_t>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void wasi_config_inherit_env(
    ffi.Pointer<wasi_config_t> config,
  ) {
    return _wasi_config_inherit_env(
      config,
    );
  }

  late final _wasi_config_inherit_envPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasi_config_t>)>>(
      'wasi_config_inherit_env');
  late final _wasi_config_inherit_env = _wasi_config_inherit_envPtr
      .asFunction<void Function(ffi.Pointer<wasi_config_t>)>();

  bool wasi_config_set_stdin_file(
    ffi.Pointer<wasi_config_t> config,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _wasi_config_set_stdin_file(
      config,
      path,
    );
  }

  late final _wasi_config_set_stdin_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<wasi_config_t>,
              ffi.Pointer<ffi.Char>)>>('wasi_config_set_stdin_file');
  late final _wasi_config_set_stdin_file =
      _wasi_config_set_stdin_filePtr.asFunction<
          bool Function(ffi.Pointer<wasi_config_t>, ffi.Pointer<ffi.Char>)>();

  void wasi_config_set_stdin_bytes(
    ffi.Pointer<wasi_config_t> config,
    ffi.Pointer<wasm_byte_vec_t> binary,
  ) {
    return _wasi_config_set_stdin_bytes(
      config,
      binary,
    );
  }

  late final _wasi_config_set_stdin_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasi_config_t>,
              ffi.Pointer<wasm_byte_vec_t>)>>('wasi_config_set_stdin_bytes');
  late final _wasi_config_set_stdin_bytes =
      _wasi_config_set_stdin_bytesPtr.asFunction<
          void Function(
              ffi.Pointer<wasi_config_t>, ffi.Pointer<wasm_byte_vec_t>)>();

  void wasi_config_inherit_stdin(
    ffi.Pointer<wasi_config_t> config,
  ) {
    return _wasi_config_inherit_stdin(
      config,
    );
  }

  late final _wasi_config_inherit_stdinPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasi_config_t>)>>(
      'wasi_config_inherit_stdin');
  late final _wasi_config_inherit_stdin = _wasi_config_inherit_stdinPtr
      .asFunction<void Function(ffi.Pointer<wasi_config_t>)>();

  bool wasi_config_set_stdout_file(
    ffi.Pointer<wasi_config_t> config,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _wasi_config_set_stdout_file(
      config,
      path,
    );
  }

  late final _wasi_config_set_stdout_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<wasi_config_t>,
              ffi.Pointer<ffi.Char>)>>('wasi_config_set_stdout_file');
  late final _wasi_config_set_stdout_file =
      _wasi_config_set_stdout_filePtr.asFunction<
          bool Function(ffi.Pointer<wasi_config_t>, ffi.Pointer<ffi.Char>)>();

  void wasi_config_inherit_stdout(
    ffi.Pointer<wasi_config_t> config,
  ) {
    return _wasi_config_inherit_stdout(
      config,
    );
  }

  late final _wasi_config_inherit_stdoutPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasi_config_t>)>>(
      'wasi_config_inherit_stdout');
  late final _wasi_config_inherit_stdout = _wasi_config_inherit_stdoutPtr
      .asFunction<void Function(ffi.Pointer<wasi_config_t>)>();

  bool wasi_config_set_stderr_file(
    ffi.Pointer<wasi_config_t> config,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _wasi_config_set_stderr_file(
      config,
      path,
    );
  }

  late final _wasi_config_set_stderr_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<wasi_config_t>,
              ffi.Pointer<ffi.Char>)>>('wasi_config_set_stderr_file');
  late final _wasi_config_set_stderr_file =
      _wasi_config_set_stderr_filePtr.asFunction<
          bool Function(ffi.Pointer<wasi_config_t>, ffi.Pointer<ffi.Char>)>();

  void wasi_config_inherit_stderr(
    ffi.Pointer<wasi_config_t> config,
  ) {
    return _wasi_config_inherit_stderr(
      config,
    );
  }

  late final _wasi_config_inherit_stderrPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasi_config_t>)>>(
      'wasi_config_inherit_stderr');
  late final _wasi_config_inherit_stderr = _wasi_config_inherit_stderrPtr
      .asFunction<void Function(ffi.Pointer<wasi_config_t>)>();

  bool wasi_config_preopen_dir(
    ffi.Pointer<wasi_config_t> config,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> guest_path,
  ) {
    return _wasi_config_preopen_dir(
      config,
      path,
      guest_path,
    );
  }

  late final _wasi_config_preopen_dirPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<wasi_config_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('wasi_config_preopen_dir');
  late final _wasi_config_preopen_dir = _wasi_config_preopen_dirPtr.asFunction<
      bool Function(ffi.Pointer<wasi_config_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_error_new(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _wasmtime_error_new(
      arg0,
    );
  }

  late final _wasmtime_error_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<ffi.Char>)>>('wasmtime_error_new');
  late final _wasmtime_error_new = _wasmtime_error_newPtr.asFunction<
      ffi.Pointer<wasmtime_error_t> Function(ffi.Pointer<ffi.Char>)>();

  void wasmtime_error_delete(
    ffi.Pointer<wasmtime_error_t> error,
  ) {
    return _wasmtime_error_delete(
      error,
    );
  }

  late final _wasmtime_error_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasmtime_error_t>)>>(
      'wasmtime_error_delete');
  late final _wasmtime_error_delete = _wasmtime_error_deletePtr
      .asFunction<void Function(ffi.Pointer<wasmtime_error_t>)>();

  void wasmtime_error_message(
    ffi.Pointer<wasmtime_error_t> error,
    ffi.Pointer<wasm_name_t> message,
  ) {
    return _wasmtime_error_message(
      error,
      message,
    );
  }

  late final _wasmtime_error_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasmtime_error_t>,
              ffi.Pointer<wasm_name_t>)>>('wasmtime_error_message');
  late final _wasmtime_error_message = _wasmtime_error_messagePtr.asFunction<
      void Function(ffi.Pointer<wasmtime_error_t>, ffi.Pointer<wasm_name_t>)>();

  bool wasmtime_error_exit_status(
    ffi.Pointer<wasmtime_error_t> arg0,
    ffi.Pointer<ffi.Int> status,
  ) {
    return _wasmtime_error_exit_status(
      arg0,
      status,
    );
  }

  late final _wasmtime_error_exit_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<wasmtime_error_t>,
              ffi.Pointer<ffi.Int>)>>('wasmtime_error_exit_status');
  late final _wasmtime_error_exit_status =
      _wasmtime_error_exit_statusPtr.asFunction<
          bool Function(ffi.Pointer<wasmtime_error_t>, ffi.Pointer<ffi.Int>)>();

  void wasmtime_error_wasm_trace(
    ffi.Pointer<wasmtime_error_t> arg0,
    ffi.Pointer<wasm_frame_vec_t> out,
  ) {
    return _wasmtime_error_wasm_trace(
      arg0,
      out,
    );
  }

  late final _wasmtime_error_wasm_tracePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasmtime_error_t>,
              ffi.Pointer<wasm_frame_vec_t>)>>('wasmtime_error_wasm_trace');
  late final _wasmtime_error_wasm_trace =
      _wasmtime_error_wasm_tracePtr.asFunction<
          void Function(
              ffi.Pointer<wasmtime_error_t>, ffi.Pointer<wasm_frame_vec_t>)>();

  void wasmtime_config_debug_info_set(
    ffi.Pointer<wasm_config_t> arg0,
    bool arg1,
  ) {
    return _wasmtime_config_debug_info_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_debug_info_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_config_t>,
              ffi.Bool)>>('wasmtime_config_debug_info_set');
  late final _wasmtime_config_debug_info_set =
      _wasmtime_config_debug_info_setPtr
          .asFunction<void Function(ffi.Pointer<wasm_config_t>, bool)>();

  void wasmtime_config_consume_fuel_set(
    ffi.Pointer<wasm_config_t> arg0,
    bool arg1,
  ) {
    return _wasmtime_config_consume_fuel_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_consume_fuel_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_config_t>,
              ffi.Bool)>>('wasmtime_config_consume_fuel_set');
  late final _wasmtime_config_consume_fuel_set =
      _wasmtime_config_consume_fuel_setPtr
          .asFunction<void Function(ffi.Pointer<wasm_config_t>, bool)>();

  void wasmtime_config_epoch_interruption_set(
    ffi.Pointer<wasm_config_t> arg0,
    bool arg1,
  ) {
    return _wasmtime_config_epoch_interruption_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_epoch_interruption_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_config_t>,
              ffi.Bool)>>('wasmtime_config_epoch_interruption_set');
  late final _wasmtime_config_epoch_interruption_set =
      _wasmtime_config_epoch_interruption_setPtr
          .asFunction<void Function(ffi.Pointer<wasm_config_t>, bool)>();

  void wasmtime_config_max_wasm_stack_set(
    ffi.Pointer<wasm_config_t> arg0,
    int arg1,
  ) {
    return _wasmtime_config_max_wasm_stack_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_max_wasm_stack_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_config_t>,
              ffi.Size)>>('wasmtime_config_max_wasm_stack_set');
  late final _wasmtime_config_max_wasm_stack_set =
      _wasmtime_config_max_wasm_stack_setPtr
          .asFunction<void Function(ffi.Pointer<wasm_config_t>, int)>();

  void wasmtime_config_wasm_threads_set(
    ffi.Pointer<wasm_config_t> arg0,
    bool arg1,
  ) {
    return _wasmtime_config_wasm_threads_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_wasm_threads_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_config_t>,
              ffi.Bool)>>('wasmtime_config_wasm_threads_set');
  late final _wasmtime_config_wasm_threads_set =
      _wasmtime_config_wasm_threads_setPtr
          .asFunction<void Function(ffi.Pointer<wasm_config_t>, bool)>();

  void wasmtime_config_wasm_tail_call_set(
    ffi.Pointer<wasm_config_t> arg0,
    bool arg1,
  ) {
    return _wasmtime_config_wasm_tail_call_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_wasm_tail_call_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_config_t>,
              ffi.Bool)>>('wasmtime_config_wasm_tail_call_set');
  late final _wasmtime_config_wasm_tail_call_set =
      _wasmtime_config_wasm_tail_call_setPtr
          .asFunction<void Function(ffi.Pointer<wasm_config_t>, bool)>();

  void wasmtime_config_wasm_reference_types_set(
    ffi.Pointer<wasm_config_t> arg0,
    bool arg1,
  ) {
    return _wasmtime_config_wasm_reference_types_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_wasm_reference_types_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_config_t>,
              ffi.Bool)>>('wasmtime_config_wasm_reference_types_set');
  late final _wasmtime_config_wasm_reference_types_set =
      _wasmtime_config_wasm_reference_types_setPtr
          .asFunction<void Function(ffi.Pointer<wasm_config_t>, bool)>();

  void wasmtime_config_wasm_function_references_set(
    ffi.Pointer<wasm_config_t> arg0,
    bool arg1,
  ) {
    return _wasmtime_config_wasm_function_references_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_wasm_function_references_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_config_t>,
              ffi.Bool)>>('wasmtime_config_wasm_function_references_set');
  late final _wasmtime_config_wasm_function_references_set =
      _wasmtime_config_wasm_function_references_setPtr
          .asFunction<void Function(ffi.Pointer<wasm_config_t>, bool)>();

  void wasmtime_config_wasm_gc_set(
    ffi.Pointer<wasm_config_t> arg0,
    bool arg1,
  ) {
    return _wasmtime_config_wasm_gc_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_wasm_gc_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_config_t>,
              ffi.Bool)>>('wasmtime_config_wasm_gc_set');
  late final _wasmtime_config_wasm_gc_set = _wasmtime_config_wasm_gc_setPtr
      .asFunction<void Function(ffi.Pointer<wasm_config_t>, bool)>();

  void wasmtime_config_wasm_simd_set(
    ffi.Pointer<wasm_config_t> arg0,
    bool arg1,
  ) {
    return _wasmtime_config_wasm_simd_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_wasm_simd_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_config_t>,
              ffi.Bool)>>('wasmtime_config_wasm_simd_set');
  late final _wasmtime_config_wasm_simd_set = _wasmtime_config_wasm_simd_setPtr
      .asFunction<void Function(ffi.Pointer<wasm_config_t>, bool)>();

  void wasmtime_config_wasm_relaxed_simd_set(
    ffi.Pointer<wasm_config_t> arg0,
    bool arg1,
  ) {
    return _wasmtime_config_wasm_relaxed_simd_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_wasm_relaxed_simd_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_config_t>,
              ffi.Bool)>>('wasmtime_config_wasm_relaxed_simd_set');
  late final _wasmtime_config_wasm_relaxed_simd_set =
      _wasmtime_config_wasm_relaxed_simd_setPtr
          .asFunction<void Function(ffi.Pointer<wasm_config_t>, bool)>();

  void wasmtime_config_wasm_relaxed_simd_deterministic_set(
    ffi.Pointer<wasm_config_t> arg0,
    bool arg1,
  ) {
    return _wasmtime_config_wasm_relaxed_simd_deterministic_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_wasm_relaxed_simd_deterministic_setPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<wasm_config_t>, ffi.Bool)>>(
      'wasmtime_config_wasm_relaxed_simd_deterministic_set');
  late final _wasmtime_config_wasm_relaxed_simd_deterministic_set =
      _wasmtime_config_wasm_relaxed_simd_deterministic_setPtr
          .asFunction<void Function(ffi.Pointer<wasm_config_t>, bool)>();

  void wasmtime_config_wasm_bulk_memory_set(
    ffi.Pointer<wasm_config_t> arg0,
    bool arg1,
  ) {
    return _wasmtime_config_wasm_bulk_memory_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_wasm_bulk_memory_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_config_t>,
              ffi.Bool)>>('wasmtime_config_wasm_bulk_memory_set');
  late final _wasmtime_config_wasm_bulk_memory_set =
      _wasmtime_config_wasm_bulk_memory_setPtr
          .asFunction<void Function(ffi.Pointer<wasm_config_t>, bool)>();

  void wasmtime_config_wasm_multi_value_set(
    ffi.Pointer<wasm_config_t> arg0,
    bool arg1,
  ) {
    return _wasmtime_config_wasm_multi_value_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_wasm_multi_value_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_config_t>,
              ffi.Bool)>>('wasmtime_config_wasm_multi_value_set');
  late final _wasmtime_config_wasm_multi_value_set =
      _wasmtime_config_wasm_multi_value_setPtr
          .asFunction<void Function(ffi.Pointer<wasm_config_t>, bool)>();

  void wasmtime_config_wasm_multi_memory_set(
    ffi.Pointer<wasm_config_t> arg0,
    bool arg1,
  ) {
    return _wasmtime_config_wasm_multi_memory_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_wasm_multi_memory_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_config_t>,
              ffi.Bool)>>('wasmtime_config_wasm_multi_memory_set');
  late final _wasmtime_config_wasm_multi_memory_set =
      _wasmtime_config_wasm_multi_memory_setPtr
          .asFunction<void Function(ffi.Pointer<wasm_config_t>, bool)>();

  void wasmtime_config_wasm_memory64_set(
    ffi.Pointer<wasm_config_t> arg0,
    bool arg1,
  ) {
    return _wasmtime_config_wasm_memory64_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_wasm_memory64_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_config_t>,
              ffi.Bool)>>('wasmtime_config_wasm_memory64_set');
  late final _wasmtime_config_wasm_memory64_set =
      _wasmtime_config_wasm_memory64_setPtr
          .asFunction<void Function(ffi.Pointer<wasm_config_t>, bool)>();

  void wasmtime_config_strategy_set(
    ffi.Pointer<wasm_config_t> arg0,
    int arg1,
  ) {
    return _wasmtime_config_strategy_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_strategy_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_config_t>,
              wasmtime_strategy_t)>>('wasmtime_config_strategy_set');
  late final _wasmtime_config_strategy_set = _wasmtime_config_strategy_setPtr
      .asFunction<void Function(ffi.Pointer<wasm_config_t>, int)>();

  void wasmtime_config_parallel_compilation_set(
    ffi.Pointer<wasm_config_t> arg0,
    bool arg1,
  ) {
    return _wasmtime_config_parallel_compilation_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_parallel_compilation_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_config_t>,
              ffi.Bool)>>('wasmtime_config_parallel_compilation_set');
  late final _wasmtime_config_parallel_compilation_set =
      _wasmtime_config_parallel_compilation_setPtr
          .asFunction<void Function(ffi.Pointer<wasm_config_t>, bool)>();

  void wasmtime_config_cranelift_debug_verifier_set(
    ffi.Pointer<wasm_config_t> arg0,
    bool arg1,
  ) {
    return _wasmtime_config_cranelift_debug_verifier_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_cranelift_debug_verifier_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_config_t>,
              ffi.Bool)>>('wasmtime_config_cranelift_debug_verifier_set');
  late final _wasmtime_config_cranelift_debug_verifier_set =
      _wasmtime_config_cranelift_debug_verifier_setPtr
          .asFunction<void Function(ffi.Pointer<wasm_config_t>, bool)>();

  void wasmtime_config_cranelift_nan_canonicalization_set(
    ffi.Pointer<wasm_config_t> arg0,
    bool arg1,
  ) {
    return _wasmtime_config_cranelift_nan_canonicalization_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_cranelift_nan_canonicalization_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_config_t>,
              ffi.Bool)>>('wasmtime_config_cranelift_nan_canonicalization_set');
  late final _wasmtime_config_cranelift_nan_canonicalization_set =
      _wasmtime_config_cranelift_nan_canonicalization_setPtr
          .asFunction<void Function(ffi.Pointer<wasm_config_t>, bool)>();

  void wasmtime_config_cranelift_opt_level_set(
    ffi.Pointer<wasm_config_t> arg0,
    int arg1,
  ) {
    return _wasmtime_config_cranelift_opt_level_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_cranelift_opt_level_setPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<wasm_config_t>, wasmtime_opt_level_t)>>(
      'wasmtime_config_cranelift_opt_level_set');
  late final _wasmtime_config_cranelift_opt_level_set =
      _wasmtime_config_cranelift_opt_level_setPtr
          .asFunction<void Function(ffi.Pointer<wasm_config_t>, int)>();

  void wasmtime_config_profiler_set(
    ffi.Pointer<wasm_config_t> arg0,
    int arg1,
  ) {
    return _wasmtime_config_profiler_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_profiler_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_config_t>,
              wasmtime_profiling_strategy_t)>>('wasmtime_config_profiler_set');
  late final _wasmtime_config_profiler_set = _wasmtime_config_profiler_setPtr
      .asFunction<void Function(ffi.Pointer<wasm_config_t>, int)>();

  void wasmtime_config_static_memory_forced_set(
    ffi.Pointer<wasm_config_t> arg0,
    bool arg1,
  ) {
    return _wasmtime_config_static_memory_forced_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_static_memory_forced_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_config_t>,
              ffi.Bool)>>('wasmtime_config_static_memory_forced_set');
  late final _wasmtime_config_static_memory_forced_set =
      _wasmtime_config_static_memory_forced_setPtr
          .asFunction<void Function(ffi.Pointer<wasm_config_t>, bool)>();

  void wasmtime_config_static_memory_maximum_size_set(
    ffi.Pointer<wasm_config_t> arg0,
    int arg1,
  ) {
    return _wasmtime_config_static_memory_maximum_size_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_static_memory_maximum_size_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_config_t>,
              ffi.Uint64)>>('wasmtime_config_static_memory_maximum_size_set');
  late final _wasmtime_config_static_memory_maximum_size_set =
      _wasmtime_config_static_memory_maximum_size_setPtr
          .asFunction<void Function(ffi.Pointer<wasm_config_t>, int)>();

  void wasmtime_config_static_memory_guard_size_set(
    ffi.Pointer<wasm_config_t> arg0,
    int arg1,
  ) {
    return _wasmtime_config_static_memory_guard_size_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_static_memory_guard_size_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_config_t>,
              ffi.Uint64)>>('wasmtime_config_static_memory_guard_size_set');
  late final _wasmtime_config_static_memory_guard_size_set =
      _wasmtime_config_static_memory_guard_size_setPtr
          .asFunction<void Function(ffi.Pointer<wasm_config_t>, int)>();

  void wasmtime_config_dynamic_memory_guard_size_set(
    ffi.Pointer<wasm_config_t> arg0,
    int arg1,
  ) {
    return _wasmtime_config_dynamic_memory_guard_size_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_dynamic_memory_guard_size_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_config_t>,
              ffi.Uint64)>>('wasmtime_config_dynamic_memory_guard_size_set');
  late final _wasmtime_config_dynamic_memory_guard_size_set =
      _wasmtime_config_dynamic_memory_guard_size_setPtr
          .asFunction<void Function(ffi.Pointer<wasm_config_t>, int)>();

  void wasmtime_config_dynamic_memory_reserved_for_growth_set(
    ffi.Pointer<wasm_config_t> arg0,
    int arg1,
  ) {
    return _wasmtime_config_dynamic_memory_reserved_for_growth_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_dynamic_memory_reserved_for_growth_setPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<wasm_config_t>, ffi.Uint64)>>(
          'wasmtime_config_dynamic_memory_reserved_for_growth_set');
  late final _wasmtime_config_dynamic_memory_reserved_for_growth_set =
      _wasmtime_config_dynamic_memory_reserved_for_growth_setPtr
          .asFunction<void Function(ffi.Pointer<wasm_config_t>, int)>();

  void wasmtime_config_native_unwind_info_set(
    ffi.Pointer<wasm_config_t> arg0,
    bool arg1,
  ) {
    return _wasmtime_config_native_unwind_info_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_native_unwind_info_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_config_t>,
              ffi.Bool)>>('wasmtime_config_native_unwind_info_set');
  late final _wasmtime_config_native_unwind_info_set =
      _wasmtime_config_native_unwind_info_setPtr
          .asFunction<void Function(ffi.Pointer<wasm_config_t>, bool)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_config_cache_config_load(
    ffi.Pointer<wasm_config_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _wasmtime_config_cache_config_load(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_cache_config_loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasmtime_error_t> Function(ffi.Pointer<wasm_config_t>,
              ffi.Pointer<ffi.Char>)>>('wasmtime_config_cache_config_load');
  late final _wasmtime_config_cache_config_load =
      _wasmtime_config_cache_config_loadPtr.asFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasm_config_t>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_config_target_set(
    ffi.Pointer<wasm_config_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _wasmtime_config_target_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_target_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasmtime_error_t> Function(ffi.Pointer<wasm_config_t>,
              ffi.Pointer<ffi.Char>)>>('wasmtime_config_target_set');
  late final _wasmtime_config_target_set =
      _wasmtime_config_target_setPtr.asFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasm_config_t>, ffi.Pointer<ffi.Char>)>();

  void wasmtime_config_cranelift_flag_enable(
    ffi.Pointer<wasm_config_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _wasmtime_config_cranelift_flag_enable(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_cranelift_flag_enablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_config_t>,
              ffi.Pointer<ffi.Char>)>>('wasmtime_config_cranelift_flag_enable');
  late final _wasmtime_config_cranelift_flag_enable =
      _wasmtime_config_cranelift_flag_enablePtr.asFunction<
          void Function(ffi.Pointer<wasm_config_t>, ffi.Pointer<ffi.Char>)>();

  void wasmtime_config_cranelift_flag_set(
    ffi.Pointer<wasm_config_t> arg0,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _wasmtime_config_cranelift_flag_set(
      arg0,
      key,
      value,
    );
  }

  late final _wasmtime_config_cranelift_flag_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_config_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('wasmtime_config_cranelift_flag_set');
  late final _wasmtime_config_cranelift_flag_set =
      _wasmtime_config_cranelift_flag_setPtr.asFunction<
          void Function(ffi.Pointer<wasm_config_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void wasmtime_config_macos_use_mach_ports_set(
    ffi.Pointer<wasm_config_t> arg0,
    bool arg1,
  ) {
    return _wasmtime_config_macos_use_mach_ports_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_macos_use_mach_ports_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_config_t>,
              ffi.Bool)>>('wasmtime_config_macos_use_mach_ports_set');
  late final _wasmtime_config_macos_use_mach_ports_set =
      _wasmtime_config_macos_use_mach_ports_setPtr
          .asFunction<void Function(ffi.Pointer<wasm_config_t>, bool)>();

  void wasmtime_config_host_memory_creator_set(
    ffi.Pointer<wasm_config_t> arg0,
    ffi.Pointer<wasmtime_memory_creator_t> arg1,
  ) {
    return _wasmtime_config_host_memory_creator_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_host_memory_creator_setPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<wasm_config_t>,
                  ffi.Pointer<wasmtime_memory_creator_t>)>>(
      'wasmtime_config_host_memory_creator_set');
  late final _wasmtime_config_host_memory_creator_set =
      _wasmtime_config_host_memory_creator_setPtr.asFunction<
          void Function(ffi.Pointer<wasm_config_t>,
              ffi.Pointer<wasmtime_memory_creator_t>)>();

  void wasmtime_config_memory_init_cow_set(
    ffi.Pointer<wasm_config_t> arg0,
    bool arg1,
  ) {
    return _wasmtime_config_memory_init_cow_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_memory_init_cow_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_config_t>,
              ffi.Bool)>>('wasmtime_config_memory_init_cow_set');
  late final _wasmtime_config_memory_init_cow_set =
      _wasmtime_config_memory_init_cow_setPtr
          .asFunction<void Function(ffi.Pointer<wasm_config_t>, bool)>();

  void wasmtime_engine_increment_epoch(
    ffi.Pointer<wasm_engine_t> engine,
  ) {
    return _wasmtime_engine_increment_epoch(
      engine,
    );
  }

  late final _wasmtime_engine_increment_epochPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasm_engine_t>)>>(
      'wasmtime_engine_increment_epoch');
  late final _wasmtime_engine_increment_epoch =
      _wasmtime_engine_increment_epochPtr
          .asFunction<void Function(ffi.Pointer<wasm_engine_t>)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_module_new(
    ffi.Pointer<wasm_engine_t> engine,
    ffi.Pointer<ffi.Uint8> wasm,
    int wasm_len,
    ffi.Pointer<ffi.Pointer<wasmtime_module_t>> ret,
  ) {
    return _wasmtime_module_new(
      engine,
      wasm,
      wasm_len,
      ret,
    );
  }

  late final _wasmtime_module_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wasmtime_error_t> Function(
                  ffi.Pointer<wasm_engine_t>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Pointer<wasmtime_module_t>>)>>(
      'wasmtime_module_new');
  late final _wasmtime_module_new = _wasmtime_module_newPtr.asFunction<
      ffi.Pointer<wasmtime_error_t> Function(
          ffi.Pointer<wasm_engine_t>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Pointer<wasmtime_module_t>>)>();

  void wasmtime_module_delete(
    ffi.Pointer<wasmtime_module_t> m,
  ) {
    return _wasmtime_module_delete(
      m,
    );
  }

  late final _wasmtime_module_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<wasmtime_module_t>)>>(
      'wasmtime_module_delete');
  late final _wasmtime_module_delete = _wasmtime_module_deletePtr
      .asFunction<void Function(ffi.Pointer<wasmtime_module_t>)>();

  ffi.Pointer<wasmtime_module_t> wasmtime_module_clone(
    ffi.Pointer<wasmtime_module_t> m,
  ) {
    return _wasmtime_module_clone(
      m,
    );
  }

  late final _wasmtime_module_clonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasmtime_module_t> Function(
              ffi.Pointer<wasmtime_module_t>)>>('wasmtime_module_clone');
  late final _wasmtime_module_clone = _wasmtime_module_clonePtr.asFunction<
      ffi.Pointer<wasmtime_module_t> Function(
          ffi.Pointer<wasmtime_module_t>)>();

  void wasmtime_module_imports(
    ffi.Pointer<wasmtime_module_t> module,
    ffi.Pointer<wasm_importtype_vec_t> out,
  ) {
    return _wasmtime_module_imports(
      module,
      out,
    );
  }

  late final _wasmtime_module_importsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasmtime_module_t>,
              ffi.Pointer<wasm_importtype_vec_t>)>>('wasmtime_module_imports');
  late final _wasmtime_module_imports = _wasmtime_module_importsPtr.asFunction<
      void Function(ffi.Pointer<wasmtime_module_t>,
          ffi.Pointer<wasm_importtype_vec_t>)>();

  void wasmtime_module_exports(
    ffi.Pointer<wasmtime_module_t> module,
    ffi.Pointer<wasm_exporttype_vec_t> out,
  ) {
    return _wasmtime_module_exports(
      module,
      out,
    );
  }

  late final _wasmtime_module_exportsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasmtime_module_t>,
              ffi.Pointer<wasm_exporttype_vec_t>)>>('wasmtime_module_exports');
  late final _wasmtime_module_exports = _wasmtime_module_exportsPtr.asFunction<
      void Function(ffi.Pointer<wasmtime_module_t>,
          ffi.Pointer<wasm_exporttype_vec_t>)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_module_validate(
    ffi.Pointer<wasm_engine_t> engine,
    ffi.Pointer<ffi.Uint8> wasm,
    int wasm_len,
  ) {
    return _wasmtime_module_validate(
      engine,
      wasm,
      wasm_len,
    );
  }

  late final _wasmtime_module_validatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasmtime_error_t> Function(ffi.Pointer<wasm_engine_t>,
              ffi.Pointer<ffi.Uint8>, ffi.Size)>>('wasmtime_module_validate');
  late final _wasmtime_module_validate =
      _wasmtime_module_validatePtr.asFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasm_engine_t>, ffi.Pointer<ffi.Uint8>, int)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_module_serialize(
    ffi.Pointer<wasmtime_module_t> module,
    ffi.Pointer<wasm_byte_vec_t> ret,
  ) {
    return _wasmtime_module_serialize(
      module,
      ret,
    );
  }

  late final _wasmtime_module_serializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasmtime_error_t> Function(ffi.Pointer<wasmtime_module_t>,
              ffi.Pointer<wasm_byte_vec_t>)>>('wasmtime_module_serialize');
  late final _wasmtime_module_serialize =
      _wasmtime_module_serializePtr.asFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_module_t>, ffi.Pointer<wasm_byte_vec_t>)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_module_deserialize(
    ffi.Pointer<wasm_engine_t> engine,
    ffi.Pointer<ffi.Uint8> bytes,
    int bytes_len,
    ffi.Pointer<ffi.Pointer<wasmtime_module_t>> ret,
  ) {
    return _wasmtime_module_deserialize(
      engine,
      bytes,
      bytes_len,
      ret,
    );
  }

  late final _wasmtime_module_deserializePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wasmtime_error_t> Function(
                  ffi.Pointer<wasm_engine_t>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Pointer<wasmtime_module_t>>)>>(
      'wasmtime_module_deserialize');
  late final _wasmtime_module_deserialize =
      _wasmtime_module_deserializePtr.asFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasm_engine_t>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Pointer<wasmtime_module_t>>)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_module_deserialize_file(
    ffi.Pointer<wasm_engine_t> engine,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Pointer<wasmtime_module_t>> ret,
  ) {
    return _wasmtime_module_deserialize_file(
      engine,
      path,
      ret,
    );
  }

  late final _wasmtime_module_deserialize_filePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wasmtime_error_t> Function(
                  ffi.Pointer<wasm_engine_t>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<wasmtime_module_t>>)>>(
      'wasmtime_module_deserialize_file');
  late final _wasmtime_module_deserialize_file =
      _wasmtime_module_deserialize_filePtr.asFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasm_engine_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<wasmtime_module_t>>)>();

  void wasmtime_module_image_range(
    ffi.Pointer<wasmtime_module_t> module,
    ffi.Pointer<ffi.Pointer<ffi.Void>> start,
    ffi.Pointer<ffi.Pointer<ffi.Void>> end,
  ) {
    return _wasmtime_module_image_range(
      module,
      start,
      end,
    );
  }

  late final _wasmtime_module_image_rangePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<wasmtime_module_t>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'wasmtime_module_image_range');
  late final _wasmtime_module_image_range =
      _wasmtime_module_image_rangePtr.asFunction<
          void Function(
              ffi.Pointer<wasmtime_module_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_sharedmemory_new(
    ffi.Pointer<wasm_engine_t> engine,
    ffi.Pointer<wasm_memorytype_t> ty,
    ffi.Pointer<ffi.Pointer<wasmtime_sharedmemory_t>> ret,
  ) {
    return _wasmtime_sharedmemory_new(
      engine,
      ty,
      ret,
    );
  }

  late final _wasmtime_sharedmemory_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wasmtime_error_t> Function(
                  ffi.Pointer<wasm_engine_t>,
                  ffi.Pointer<wasm_memorytype_t>,
                  ffi.Pointer<ffi.Pointer<wasmtime_sharedmemory_t>>)>>(
      'wasmtime_sharedmemory_new');
  late final _wasmtime_sharedmemory_new =
      _wasmtime_sharedmemory_newPtr.asFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasm_engine_t>,
              ffi.Pointer<wasm_memorytype_t>,
              ffi.Pointer<ffi.Pointer<wasmtime_sharedmemory_t>>)>();

  void wasmtime_sharedmemory_delete(
    ffi.Pointer<wasmtime_sharedmemory_t> memory,
  ) {
    return _wasmtime_sharedmemory_delete(
      memory,
    );
  }

  late final _wasmtime_sharedmemory_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<wasmtime_sharedmemory_t>)>>(
      'wasmtime_sharedmemory_delete');
  late final _wasmtime_sharedmemory_delete = _wasmtime_sharedmemory_deletePtr
      .asFunction<void Function(ffi.Pointer<wasmtime_sharedmemory_t>)>();

  ffi.Pointer<wasmtime_sharedmemory_t> wasmtime_sharedmemory_clone(
    ffi.Pointer<wasmtime_sharedmemory_t> memory,
  ) {
    return _wasmtime_sharedmemory_clone(
      memory,
    );
  }

  late final _wasmtime_sharedmemory_clonePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wasmtime_sharedmemory_t> Function(
                  ffi.Pointer<wasmtime_sharedmemory_t>)>>(
      'wasmtime_sharedmemory_clone');
  late final _wasmtime_sharedmemory_clone =
      _wasmtime_sharedmemory_clonePtr.asFunction<
          ffi.Pointer<wasmtime_sharedmemory_t> Function(
              ffi.Pointer<wasmtime_sharedmemory_t>)>();

  ffi.Pointer<wasm_memorytype_t> wasmtime_sharedmemory_type(
    ffi.Pointer<wasmtime_sharedmemory_t> memory,
  ) {
    return _wasmtime_sharedmemory_type(
      memory,
    );
  }

  late final _wasmtime_sharedmemory_typePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wasm_memorytype_t> Function(
                  ffi.Pointer<wasmtime_sharedmemory_t>)>>(
      'wasmtime_sharedmemory_type');
  late final _wasmtime_sharedmemory_type =
      _wasmtime_sharedmemory_typePtr.asFunction<
          ffi.Pointer<wasm_memorytype_t> Function(
              ffi.Pointer<wasmtime_sharedmemory_t>)>();

  ffi.Pointer<ffi.Uint8> wasmtime_sharedmemory_data(
    ffi.Pointer<wasmtime_sharedmemory_t> memory,
  ) {
    return _wasmtime_sharedmemory_data(
      memory,
    );
  }

  late final _wasmtime_sharedmemory_dataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Uint8> Function(
                  ffi.Pointer<wasmtime_sharedmemory_t>)>>(
      'wasmtime_sharedmemory_data');
  late final _wasmtime_sharedmemory_data =
      _wasmtime_sharedmemory_dataPtr.asFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<wasmtime_sharedmemory_t>)>();

  int wasmtime_sharedmemory_data_size(
    ffi.Pointer<wasmtime_sharedmemory_t> memory,
  ) {
    return _wasmtime_sharedmemory_data_size(
      memory,
    );
  }

  late final _wasmtime_sharedmemory_data_sizePtr = _lookup<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<wasmtime_sharedmemory_t>)>>(
      'wasmtime_sharedmemory_data_size');
  late final _wasmtime_sharedmemory_data_size =
      _wasmtime_sharedmemory_data_sizePtr
          .asFunction<int Function(ffi.Pointer<wasmtime_sharedmemory_t>)>();

  int wasmtime_sharedmemory_size(
    ffi.Pointer<wasmtime_sharedmemory_t> memory,
  ) {
    return _wasmtime_sharedmemory_size(
      memory,
    );
  }

  late final _wasmtime_sharedmemory_sizePtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint64 Function(ffi.Pointer<wasmtime_sharedmemory_t>)>>(
      'wasmtime_sharedmemory_size');
  late final _wasmtime_sharedmemory_size = _wasmtime_sharedmemory_sizePtr
      .asFunction<int Function(ffi.Pointer<wasmtime_sharedmemory_t>)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_sharedmemory_grow(
    ffi.Pointer<wasmtime_sharedmemory_t> memory,
    int delta,
    ffi.Pointer<ffi.Uint64> prev_size,
  ) {
    return _wasmtime_sharedmemory_grow(
      memory,
      delta,
      prev_size,
    );
  }

  late final _wasmtime_sharedmemory_growPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_sharedmemory_t>,
              ffi.Uint64,
              ffi.Pointer<ffi.Uint64>)>>('wasmtime_sharedmemory_grow');
  late final _wasmtime_sharedmemory_grow =
      _wasmtime_sharedmemory_growPtr.asFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_sharedmemory_t>,
              int,
              ffi.Pointer<ffi.Uint64>)>();

  ffi.Pointer<wasmtime_store_t> wasmtime_store_new(
    ffi.Pointer<wasm_engine_t> engine,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        finalizer,
  ) {
    return _wasmtime_store_new(
      engine,
      data,
      finalizer,
    );
  }

  late final _wasmtime_store_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasmtime_store_t> Function(
              ffi.Pointer<wasm_engine_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('wasmtime_store_new');
  late final _wasmtime_store_new = _wasmtime_store_newPtr.asFunction<
      ffi.Pointer<wasmtime_store_t> Function(
          ffi.Pointer<wasm_engine_t>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<wasmtime_context_t> wasmtime_store_context(
    ffi.Pointer<wasmtime_store_t> store,
  ) {
    return _wasmtime_store_context(
      store,
    );
  }

  late final _wasmtime_store_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasmtime_context_t> Function(
              ffi.Pointer<wasmtime_store_t>)>>('wasmtime_store_context');
  late final _wasmtime_store_context = _wasmtime_store_contextPtr.asFunction<
      ffi.Pointer<wasmtime_context_t> Function(
          ffi.Pointer<wasmtime_store_t>)>();

  void wasmtime_store_limiter(
    ffi.Pointer<wasmtime_store_t> store,
    int memory_size,
    int table_elements,
    int instances,
    int tables,
    int memories,
  ) {
    return _wasmtime_store_limiter(
      store,
      memory_size,
      table_elements,
      instances,
      tables,
      memories,
    );
  }

  late final _wasmtime_store_limiterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasmtime_store_t>, ffi.Int64, ffi.Int64,
              ffi.Int64, ffi.Int64, ffi.Int64)>>('wasmtime_store_limiter');
  late final _wasmtime_store_limiter = _wasmtime_store_limiterPtr.asFunction<
      void Function(ffi.Pointer<wasmtime_store_t>, int, int, int, int, int)>();

  void wasmtime_store_delete(
    ffi.Pointer<wasmtime_store_t> store,
  ) {
    return _wasmtime_store_delete(
      store,
    );
  }

  late final _wasmtime_store_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wasmtime_store_t>)>>(
      'wasmtime_store_delete');
  late final _wasmtime_store_delete = _wasmtime_store_deletePtr
      .asFunction<void Function(ffi.Pointer<wasmtime_store_t>)>();

  ffi.Pointer<ffi.Void> wasmtime_context_get_data(
    ffi.Pointer<wasmtime_context_t> context,
  ) {
    return _wasmtime_context_get_data(
      context,
    );
  }

  late final _wasmtime_context_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<wasmtime_context_t>)>>('wasmtime_context_get_data');
  late final _wasmtime_context_get_data =
      _wasmtime_context_get_dataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<wasmtime_context_t>)>();

  void wasmtime_context_set_data(
    ffi.Pointer<wasmtime_context_t> context,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _wasmtime_context_set_data(
      context,
      data,
    );
  }

  late final _wasmtime_context_set_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<ffi.Void>)>>('wasmtime_context_set_data');
  late final _wasmtime_context_set_data =
      _wasmtime_context_set_dataPtr.asFunction<
          void Function(
              ffi.Pointer<wasmtime_context_t>, ffi.Pointer<ffi.Void>)>();

  void wasmtime_context_gc(
    ffi.Pointer<wasmtime_context_t> context,
  ) {
    return _wasmtime_context_gc(
      context,
    );
  }

  late final _wasmtime_context_gcPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<wasmtime_context_t>)>>(
      'wasmtime_context_gc');
  late final _wasmtime_context_gc = _wasmtime_context_gcPtr
      .asFunction<void Function(ffi.Pointer<wasmtime_context_t>)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_context_set_fuel(
    ffi.Pointer<wasmtime_context_t> store,
    int fuel,
  ) {
    return _wasmtime_context_set_fuel(
      store,
      fuel,
    );
  }

  late final _wasmtime_context_set_fuelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Uint64)>>('wasmtime_context_set_fuel');
  late final _wasmtime_context_set_fuel =
      _wasmtime_context_set_fuelPtr.asFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_context_t>, int)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_context_get_fuel(
    ffi.Pointer<wasmtime_context_t> context,
    ffi.Pointer<ffi.Uint64> fuel,
  ) {
    return _wasmtime_context_get_fuel(
      context,
      fuel,
    );
  }

  late final _wasmtime_context_get_fuelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<ffi.Uint64>)>>('wasmtime_context_get_fuel');
  late final _wasmtime_context_get_fuel =
      _wasmtime_context_get_fuelPtr.asFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_context_t>, ffi.Pointer<ffi.Uint64>)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_context_set_wasi(
    ffi.Pointer<wasmtime_context_t> context,
    ffi.Pointer<wasi_config_t> wasi,
  ) {
    return _wasmtime_context_set_wasi(
      context,
      wasi,
    );
  }

  late final _wasmtime_context_set_wasiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasi_config_t>)>>('wasmtime_context_set_wasi');
  late final _wasmtime_context_set_wasi =
      _wasmtime_context_set_wasiPtr.asFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_context_t>, ffi.Pointer<wasi_config_t>)>();

  void wasmtime_context_set_epoch_deadline(
    ffi.Pointer<wasmtime_context_t> context,
    int ticks_beyond_current,
  ) {
    return _wasmtime_context_set_epoch_deadline(
      context,
      ticks_beyond_current,
    );
  }

  late final _wasmtime_context_set_epoch_deadlinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasmtime_context_t>,
              ffi.Uint64)>>('wasmtime_context_set_epoch_deadline');
  late final _wasmtime_context_set_epoch_deadline =
      _wasmtime_context_set_epoch_deadlinePtr
          .asFunction<void Function(ffi.Pointer<wasmtime_context_t>, int)>();

  void wasmtime_store_epoch_deadline_callback(
    ffi.Pointer<wasmtime_store_t> store,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<wasmtime_error_t> Function(
                    ffi.Pointer<wasmtime_context_t> context,
                    ffi.Pointer<ffi.Void> data,
                    ffi.Pointer<ffi.Uint64> epoch_deadline_delta,
                    ffi.Pointer<wasmtime_update_deadline_kind_t> update_kind)>>
        func,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        finalizer,
  ) {
    return _wasmtime_store_epoch_deadline_callback(
      store,
      func,
      data,
      finalizer,
    );
  }

  late final _wasmtime_store_epoch_deadline_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<wasmtime_store_t>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Pointer<wasmtime_error_t> Function(
                              ffi.Pointer<wasmtime_context_t> context,
                              ffi.Pointer<ffi.Void> data,
                              ffi.Pointer<ffi.Uint64> epoch_deadline_delta,
                              ffi.Pointer<wasmtime_update_deadline_kind_t>
                                  update_kind)>>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
      'wasmtime_store_epoch_deadline_callback');
  late final _wasmtime_store_epoch_deadline_callback =
      _wasmtime_store_epoch_deadline_callbackPtr.asFunction<
          void Function(
              ffi.Pointer<wasmtime_store_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<wasmtime_error_t> Function(
                          ffi.Pointer<wasmtime_context_t> context,
                          ffi.Pointer<ffi.Void> data,
                          ffi.Pointer<ffi.Uint64> epoch_deadline_delta,
                          ffi.Pointer<wasmtime_update_deadline_kind_t>
                              update_kind)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  void wasmtime_extern_delete(
    ffi.Pointer<wasmtime_extern_t> val,
  ) {
    return _wasmtime_extern_delete(
      val,
    );
  }

  late final _wasmtime_extern_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<wasmtime_extern_t>)>>(
      'wasmtime_extern_delete');
  late final _wasmtime_extern_delete = _wasmtime_extern_deletePtr
      .asFunction<void Function(ffi.Pointer<wasmtime_extern_t>)>();

  ffi.Pointer<wasm_externtype_t> wasmtime_extern_type(
    ffi.Pointer<wasmtime_context_t> context,
    ffi.Pointer<wasmtime_extern_t> val,
  ) {
    return _wasmtime_extern_type(
      context,
      val,
    );
  }

  late final _wasmtime_extern_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_externtype_t> Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_extern_t>)>>('wasmtime_extern_type');
  late final _wasmtime_extern_type = _wasmtime_extern_typePtr.asFunction<
      ffi.Pointer<wasm_externtype_t> Function(
          ffi.Pointer<wasmtime_context_t>, ffi.Pointer<wasmtime_extern_t>)>();

  void wasmtime_anyref_clone(
    ffi.Pointer<wasmtime_context_t> context,
    ffi.Pointer<wasmtime_anyref_t> anyref,
    ffi.Pointer<wasmtime_anyref_t> out,
  ) {
    return _wasmtime_anyref_clone(
      context,
      anyref,
      out,
    );
  }

  late final _wasmtime_anyref_clonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_anyref_t>,
              ffi.Pointer<wasmtime_anyref_t>)>>('wasmtime_anyref_clone');
  late final _wasmtime_anyref_clone = _wasmtime_anyref_clonePtr.asFunction<
      void Function(ffi.Pointer<wasmtime_context_t>,
          ffi.Pointer<wasmtime_anyref_t>, ffi.Pointer<wasmtime_anyref_t>)>();

  void wasmtime_anyref_unroot(
    ffi.Pointer<wasmtime_context_t> context,
    ffi.Pointer<wasmtime_anyref_t> ref,
  ) {
    return _wasmtime_anyref_unroot(
      context,
      ref,
    );
  }

  late final _wasmtime_anyref_unrootPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_anyref_t>)>>('wasmtime_anyref_unroot');
  late final _wasmtime_anyref_unroot = _wasmtime_anyref_unrootPtr.asFunction<
      void Function(
          ffi.Pointer<wasmtime_context_t>, ffi.Pointer<wasmtime_anyref_t>)>();

  void wasmtime_anyref_from_raw(
    ffi.Pointer<wasmtime_context_t> context,
    int raw,
    ffi.Pointer<wasmtime_anyref_t> out,
  ) {
    return _wasmtime_anyref_from_raw(
      context,
      raw,
      out,
    );
  }

  late final _wasmtime_anyref_from_rawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasmtime_context_t>, ffi.Uint32,
              ffi.Pointer<wasmtime_anyref_t>)>>('wasmtime_anyref_from_raw');
  late final _wasmtime_anyref_from_raw =
      _wasmtime_anyref_from_rawPtr.asFunction<
          void Function(ffi.Pointer<wasmtime_context_t>, int,
              ffi.Pointer<wasmtime_anyref_t>)>();

  int wasmtime_anyref_to_raw(
    ffi.Pointer<wasmtime_context_t> context,
    ffi.Pointer<wasmtime_anyref_t> ref,
  ) {
    return _wasmtime_anyref_to_raw(
      context,
      ref,
    );
  }

  late final _wasmtime_anyref_to_rawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_anyref_t>)>>('wasmtime_anyref_to_raw');
  late final _wasmtime_anyref_to_raw = _wasmtime_anyref_to_rawPtr.asFunction<
      int Function(
          ffi.Pointer<wasmtime_context_t>, ffi.Pointer<wasmtime_anyref_t>)>();

  void wasmtime_anyref_from_i31(
    ffi.Pointer<wasmtime_context_t> context,
    int i31val,
    ffi.Pointer<wasmtime_anyref_t> out,
  ) {
    return _wasmtime_anyref_from_i31(
      context,
      i31val,
      out,
    );
  }

  late final _wasmtime_anyref_from_i31Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasmtime_context_t>, ffi.Uint32,
              ffi.Pointer<wasmtime_anyref_t>)>>('wasmtime_anyref_from_i31');
  late final _wasmtime_anyref_from_i31 =
      _wasmtime_anyref_from_i31Ptr.asFunction<
          void Function(ffi.Pointer<wasmtime_context_t>, int,
              ffi.Pointer<wasmtime_anyref_t>)>();

  bool wasmtime_anyref_i31_get_u(
    ffi.Pointer<wasmtime_context_t> context,
    ffi.Pointer<wasmtime_anyref_t> anyref,
    ffi.Pointer<ffi.Uint32> dst,
  ) {
    return _wasmtime_anyref_i31_get_u(
      context,
      anyref,
      dst,
    );
  }

  late final _wasmtime_anyref_i31_get_uPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_anyref_t>,
              ffi.Pointer<ffi.Uint32>)>>('wasmtime_anyref_i31_get_u');
  late final _wasmtime_anyref_i31_get_u =
      _wasmtime_anyref_i31_get_uPtr.asFunction<
          bool Function(ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_anyref_t>, ffi.Pointer<ffi.Uint32>)>();

  bool wasmtime_anyref_i31_get_s(
    ffi.Pointer<wasmtime_context_t> context,
    ffi.Pointer<wasmtime_anyref_t> anyref,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _wasmtime_anyref_i31_get_s(
      context,
      anyref,
      dst,
    );
  }

  late final _wasmtime_anyref_i31_get_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_anyref_t>,
              ffi.Pointer<ffi.Int32>)>>('wasmtime_anyref_i31_get_s');
  late final _wasmtime_anyref_i31_get_s =
      _wasmtime_anyref_i31_get_sPtr.asFunction<
          bool Function(ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_anyref_t>, ffi.Pointer<ffi.Int32>)>();

  bool wasmtime_externref_new(
    ffi.Pointer<wasmtime_context_t> context,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        finalizer,
    ffi.Pointer<wasmtime_externref_t> out,
  ) {
    return _wasmtime_externref_new(
      context,
      data,
      finalizer,
      out,
    );
  }

  late final _wasmtime_externref_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<wasmtime_externref_t>)>>('wasmtime_externref_new');
  late final _wasmtime_externref_new = _wasmtime_externref_newPtr.asFunction<
      bool Function(
          ffi.Pointer<wasmtime_context_t>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<wasmtime_externref_t>)>();

  ffi.Pointer<ffi.Void> wasmtime_externref_data(
    ffi.Pointer<wasmtime_context_t> context,
    ffi.Pointer<wasmtime_externref_t> data,
  ) {
    return _wasmtime_externref_data(
      context,
      data,
    );
  }

  late final _wasmtime_externref_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_externref_t>)>>('wasmtime_externref_data');
  late final _wasmtime_externref_data = _wasmtime_externref_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<wasmtime_context_t>,
          ffi.Pointer<wasmtime_externref_t>)>();

  void wasmtime_externref_clone(
    ffi.Pointer<wasmtime_context_t> context,
    ffi.Pointer<wasmtime_externref_t> ref,
    ffi.Pointer<wasmtime_externref_t> out,
  ) {
    return _wasmtime_externref_clone(
      context,
      ref,
      out,
    );
  }

  late final _wasmtime_externref_clonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_externref_t>,
              ffi.Pointer<wasmtime_externref_t>)>>('wasmtime_externref_clone');
  late final _wasmtime_externref_clone =
      _wasmtime_externref_clonePtr.asFunction<
          void Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_externref_t>,
              ffi.Pointer<wasmtime_externref_t>)>();

  void wasmtime_externref_unroot(
    ffi.Pointer<wasmtime_context_t> context,
    ffi.Pointer<wasmtime_externref_t> ref,
  ) {
    return _wasmtime_externref_unroot(
      context,
      ref,
    );
  }

  late final _wasmtime_externref_unrootPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_externref_t>)>>('wasmtime_externref_unroot');
  late final _wasmtime_externref_unroot =
      _wasmtime_externref_unrootPtr.asFunction<
          void Function(ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_externref_t>)>();

  void wasmtime_externref_from_raw(
    ffi.Pointer<wasmtime_context_t> context,
    int raw,
    ffi.Pointer<wasmtime_externref_t> out,
  ) {
    return _wasmtime_externref_from_raw(
      context,
      raw,
      out,
    );
  }

  late final _wasmtime_externref_from_rawPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<wasmtime_context_t>, ffi.Uint32,
                  ffi.Pointer<wasmtime_externref_t>)>>(
      'wasmtime_externref_from_raw');
  late final _wasmtime_externref_from_raw =
      _wasmtime_externref_from_rawPtr.asFunction<
          void Function(ffi.Pointer<wasmtime_context_t>, int,
              ffi.Pointer<wasmtime_externref_t>)>();

  int wasmtime_externref_to_raw(
    ffi.Pointer<wasmtime_context_t> context,
    ffi.Pointer<wasmtime_externref_t> ref,
  ) {
    return _wasmtime_externref_to_raw(
      context,
      ref,
    );
  }

  late final _wasmtime_externref_to_rawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_externref_t>)>>('wasmtime_externref_to_raw');
  late final _wasmtime_externref_to_raw =
      _wasmtime_externref_to_rawPtr.asFunction<
          int Function(ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_externref_t>)>();

  void wasmtime_val_unroot(
    ffi.Pointer<wasmtime_context_t> context,
    ffi.Pointer<wasmtime_val_t> val,
  ) {
    return _wasmtime_val_unroot(
      context,
      val,
    );
  }

  late final _wasmtime_val_unrootPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_val_t>)>>('wasmtime_val_unroot');
  late final _wasmtime_val_unroot = _wasmtime_val_unrootPtr.asFunction<
      void Function(
          ffi.Pointer<wasmtime_context_t>, ffi.Pointer<wasmtime_val_t>)>();

  void wasmtime_val_clone(
    ffi.Pointer<wasmtime_context_t> context,
    ffi.Pointer<wasmtime_val_t> src,
    ffi.Pointer<wasmtime_val_t> dst,
  ) {
    return _wasmtime_val_clone(
      context,
      src,
      dst,
    );
  }

  late final _wasmtime_val_clonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_val_t>,
              ffi.Pointer<wasmtime_val_t>)>>('wasmtime_val_clone');
  late final _wasmtime_val_clone = _wasmtime_val_clonePtr.asFunction<
      void Function(ffi.Pointer<wasmtime_context_t>,
          ffi.Pointer<wasmtime_val_t>, ffi.Pointer<wasmtime_val_t>)>();

  void wasmtime_func_new(
    ffi.Pointer<wasmtime_context_t> store,
    ffi.Pointer<wasm_functype_t> type,
    wasmtime_func_callback_t callback,
    ffi.Pointer<ffi.Void> env,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        finalizer,
    ffi.Pointer<wasmtime_func_t> ret,
  ) {
    return _wasmtime_func_new(
      store,
      type,
      callback,
      env,
      finalizer,
      ret,
    );
  }

  late final _wasmtime_func_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasm_functype_t>,
              wasmtime_func_callback_t,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<wasmtime_func_t>)>>('wasmtime_func_new');
  late final _wasmtime_func_new = _wasmtime_func_newPtr.asFunction<
      void Function(
          ffi.Pointer<wasmtime_context_t>,
          ffi.Pointer<wasm_functype_t>,
          wasmtime_func_callback_t,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<wasmtime_func_t>)>();

  void wasmtime_func_new_unchecked(
    ffi.Pointer<wasmtime_context_t> store,
    ffi.Pointer<wasm_functype_t> type,
    wasmtime_func_unchecked_callback_t callback,
    ffi.Pointer<ffi.Void> env,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        finalizer,
    ffi.Pointer<wasmtime_func_t> ret,
  ) {
    return _wasmtime_func_new_unchecked(
      store,
      type,
      callback,
      env,
      finalizer,
      ret,
    );
  }

  late final _wasmtime_func_new_uncheckedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasm_functype_t>,
              wasmtime_func_unchecked_callback_t,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<wasmtime_func_t>)>>('wasmtime_func_new_unchecked');
  late final _wasmtime_func_new_unchecked =
      _wasmtime_func_new_uncheckedPtr.asFunction<
          void Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasm_functype_t>,
              wasmtime_func_unchecked_callback_t,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<wasmtime_func_t>)>();

  ffi.Pointer<wasm_functype_t> wasmtime_func_type(
    ffi.Pointer<wasmtime_context_t> store,
    ffi.Pointer<wasmtime_func_t> func,
  ) {
    return _wasmtime_func_type(
      store,
      func,
    );
  }

  late final _wasmtime_func_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_functype_t> Function(ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_func_t>)>>('wasmtime_func_type');
  late final _wasmtime_func_type = _wasmtime_func_typePtr.asFunction<
      ffi.Pointer<wasm_functype_t> Function(
          ffi.Pointer<wasmtime_context_t>, ffi.Pointer<wasmtime_func_t>)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_func_call(
    ffi.Pointer<wasmtime_context_t> store,
    ffi.Pointer<wasmtime_func_t> func,
    ffi.Pointer<wasmtime_val_t> args,
    int nargs,
    ffi.Pointer<wasmtime_val_t> results,
    int nresults,
    ffi.Pointer<ffi.Pointer<wasm_trap_t>> trap,
  ) {
    return _wasmtime_func_call(
      store,
      func,
      args,
      nargs,
      results,
      nresults,
      trap,
    );
  }

  late final _wasmtime_func_callPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_func_t>,
              ffi.Pointer<wasmtime_val_t>,
              ffi.Size,
              ffi.Pointer<wasmtime_val_t>,
              ffi.Size,
              ffi.Pointer<ffi.Pointer<wasm_trap_t>>)>>('wasmtime_func_call');
  late final _wasmtime_func_call = _wasmtime_func_callPtr.asFunction<
      ffi.Pointer<wasmtime_error_t> Function(
          ffi.Pointer<wasmtime_context_t>,
          ffi.Pointer<wasmtime_func_t>,
          ffi.Pointer<wasmtime_val_t>,
          int,
          ffi.Pointer<wasmtime_val_t>,
          int,
          ffi.Pointer<ffi.Pointer<wasm_trap_t>>)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_func_call_unchecked(
    ffi.Pointer<wasmtime_context_t> store,
    ffi.Pointer<wasmtime_func_t> func,
    ffi.Pointer<wasmtime_val_raw_t> args_and_results,
    int args_and_results_len,
    ffi.Pointer<ffi.Pointer<wasm_trap_t>> trap,
  ) {
    return _wasmtime_func_call_unchecked(
      store,
      func,
      args_and_results,
      args_and_results_len,
      trap,
    );
  }

  late final _wasmtime_func_call_uncheckedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wasmtime_error_t> Function(
                  ffi.Pointer<wasmtime_context_t>,
                  ffi.Pointer<wasmtime_func_t>,
                  ffi.Pointer<wasmtime_val_raw_t>,
                  ffi.Size,
                  ffi.Pointer<ffi.Pointer<wasm_trap_t>>)>>(
      'wasmtime_func_call_unchecked');
  late final _wasmtime_func_call_unchecked =
      _wasmtime_func_call_uncheckedPtr.asFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_func_t>,
              ffi.Pointer<wasmtime_val_raw_t>,
              int,
              ffi.Pointer<ffi.Pointer<wasm_trap_t>>)>();

  bool wasmtime_caller_export_get(
    ffi.Pointer<wasmtime_caller_t> caller,
    ffi.Pointer<ffi.Char> name,
    int name_len,
    ffi.Pointer<wasmtime_extern_t> item,
  ) {
    return _wasmtime_caller_export_get(
      caller,
      name,
      name_len,
      item,
    );
  }

  late final _wasmtime_caller_export_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<wasmtime_caller_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<wasmtime_extern_t>)>>('wasmtime_caller_export_get');
  late final _wasmtime_caller_export_get =
      _wasmtime_caller_export_getPtr.asFunction<
          bool Function(ffi.Pointer<wasmtime_caller_t>, ffi.Pointer<ffi.Char>,
              int, ffi.Pointer<wasmtime_extern_t>)>();

  ffi.Pointer<wasmtime_context_t> wasmtime_caller_context(
    ffi.Pointer<wasmtime_caller_t> caller,
  ) {
    return _wasmtime_caller_context(
      caller,
    );
  }

  late final _wasmtime_caller_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasmtime_context_t> Function(
              ffi.Pointer<wasmtime_caller_t>)>>('wasmtime_caller_context');
  late final _wasmtime_caller_context = _wasmtime_caller_contextPtr.asFunction<
      ffi.Pointer<wasmtime_context_t> Function(
          ffi.Pointer<wasmtime_caller_t>)>();

  void wasmtime_func_from_raw(
    ffi.Pointer<wasmtime_context_t> context,
    ffi.Pointer<ffi.Void> raw,
    ffi.Pointer<wasmtime_func_t> ret,
  ) {
    return _wasmtime_func_from_raw(
      context,
      raw,
      ret,
    );
  }

  late final _wasmtime_func_from_rawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<wasmtime_func_t>)>>('wasmtime_func_from_raw');
  late final _wasmtime_func_from_raw = _wasmtime_func_from_rawPtr.asFunction<
      void Function(ffi.Pointer<wasmtime_context_t>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<wasmtime_func_t>)>();

  ffi.Pointer<ffi.Void> wasmtime_func_to_raw(
    ffi.Pointer<wasmtime_context_t> context,
    ffi.Pointer<wasmtime_func_t> func,
  ) {
    return _wasmtime_func_to_raw(
      context,
      func,
    );
  }

  late final _wasmtime_func_to_rawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_func_t>)>>('wasmtime_func_to_raw');
  late final _wasmtime_func_to_raw = _wasmtime_func_to_rawPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<wasmtime_context_t>, ffi.Pointer<wasmtime_func_t>)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_global_new(
    ffi.Pointer<wasmtime_context_t> store,
    ffi.Pointer<wasm_globaltype_t> type,
    ffi.Pointer<wasmtime_val_t> val,
    ffi.Pointer<wasmtime_global_t> ret,
  ) {
    return _wasmtime_global_new(
      store,
      type,
      val,
      ret,
    );
  }

  late final _wasmtime_global_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasm_globaltype_t>,
              ffi.Pointer<wasmtime_val_t>,
              ffi.Pointer<wasmtime_global_t>)>>('wasmtime_global_new');
  late final _wasmtime_global_new = _wasmtime_global_newPtr.asFunction<
      ffi.Pointer<wasmtime_error_t> Function(
          ffi.Pointer<wasmtime_context_t>,
          ffi.Pointer<wasm_globaltype_t>,
          ffi.Pointer<wasmtime_val_t>,
          ffi.Pointer<wasmtime_global_t>)>();

  ffi.Pointer<wasm_globaltype_t> wasmtime_global_type(
    ffi.Pointer<wasmtime_context_t> store,
    ffi.Pointer<wasmtime_global_t> global,
  ) {
    return _wasmtime_global_type(
      store,
      global,
    );
  }

  late final _wasmtime_global_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_globaltype_t> Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_global_t>)>>('wasmtime_global_type');
  late final _wasmtime_global_type = _wasmtime_global_typePtr.asFunction<
      ffi.Pointer<wasm_globaltype_t> Function(
          ffi.Pointer<wasmtime_context_t>, ffi.Pointer<wasmtime_global_t>)>();

  void wasmtime_global_get(
    ffi.Pointer<wasmtime_context_t> store,
    ffi.Pointer<wasmtime_global_t> global,
    ffi.Pointer<wasmtime_val_t> out,
  ) {
    return _wasmtime_global_get(
      store,
      global,
      out,
    );
  }

  late final _wasmtime_global_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_global_t>,
              ffi.Pointer<wasmtime_val_t>)>>('wasmtime_global_get');
  late final _wasmtime_global_get = _wasmtime_global_getPtr.asFunction<
      void Function(ffi.Pointer<wasmtime_context_t>,
          ffi.Pointer<wasmtime_global_t>, ffi.Pointer<wasmtime_val_t>)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_global_set(
    ffi.Pointer<wasmtime_context_t> store,
    ffi.Pointer<wasmtime_global_t> global,
    ffi.Pointer<wasmtime_val_t> val,
  ) {
    return _wasmtime_global_set(
      store,
      global,
      val,
    );
  }

  late final _wasmtime_global_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_global_t>,
              ffi.Pointer<wasmtime_val_t>)>>('wasmtime_global_set');
  late final _wasmtime_global_set = _wasmtime_global_setPtr.asFunction<
      ffi.Pointer<wasmtime_error_t> Function(ffi.Pointer<wasmtime_context_t>,
          ffi.Pointer<wasmtime_global_t>, ffi.Pointer<wasmtime_val_t>)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_instance_new(
    ffi.Pointer<wasmtime_context_t> store,
    ffi.Pointer<wasmtime_module_t> module,
    ffi.Pointer<wasmtime_extern_t> imports,
    int nimports,
    ffi.Pointer<wasmtime_instance_t> instance,
    ffi.Pointer<ffi.Pointer<wasm_trap_t>> trap,
  ) {
    return _wasmtime_instance_new(
      store,
      module,
      imports,
      nimports,
      instance,
      trap,
    );
  }

  late final _wasmtime_instance_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_module_t>,
              ffi.Pointer<wasmtime_extern_t>,
              ffi.Size,
              ffi.Pointer<wasmtime_instance_t>,
              ffi.Pointer<ffi.Pointer<wasm_trap_t>>)>>('wasmtime_instance_new');
  late final _wasmtime_instance_new = _wasmtime_instance_newPtr.asFunction<
      ffi.Pointer<wasmtime_error_t> Function(
          ffi.Pointer<wasmtime_context_t>,
          ffi.Pointer<wasmtime_module_t>,
          ffi.Pointer<wasmtime_extern_t>,
          int,
          ffi.Pointer<wasmtime_instance_t>,
          ffi.Pointer<ffi.Pointer<wasm_trap_t>>)>();

  bool wasmtime_instance_export_get(
    ffi.Pointer<wasmtime_context_t> store,
    ffi.Pointer<wasmtime_instance_t> instance,
    ffi.Pointer<ffi.Char> name,
    int name_len,
    ffi.Pointer<wasmtime_extern_t> item,
  ) {
    return _wasmtime_instance_export_get(
      store,
      instance,
      name,
      name_len,
      item,
    );
  }

  late final _wasmtime_instance_export_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_instance_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<wasmtime_extern_t>)>>('wasmtime_instance_export_get');
  late final _wasmtime_instance_export_get =
      _wasmtime_instance_export_getPtr.asFunction<
          bool Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_instance_t>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<wasmtime_extern_t>)>();

  bool wasmtime_instance_export_nth(
    ffi.Pointer<wasmtime_context_t> store,
    ffi.Pointer<wasmtime_instance_t> instance,
    int index,
    ffi.Pointer<ffi.Pointer<ffi.Char>> name,
    ffi.Pointer<ffi.Size> name_len,
    ffi.Pointer<wasmtime_extern_t> item,
  ) {
    return _wasmtime_instance_export_nth(
      store,
      instance,
      index,
      name,
      name_len,
      item,
    );
  }

  late final _wasmtime_instance_export_nthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_instance_t>,
              ffi.Size,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<wasmtime_extern_t>)>>('wasmtime_instance_export_nth');
  late final _wasmtime_instance_export_nth =
      _wasmtime_instance_export_nthPtr.asFunction<
          bool Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_instance_t>,
              int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<wasmtime_extern_t>)>();

  void wasmtime_instance_pre_delete(
    ffi.Pointer<wasmtime_instance_pre_t> instance_pre,
  ) {
    return _wasmtime_instance_pre_delete(
      instance_pre,
    );
  }

  late final _wasmtime_instance_pre_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<wasmtime_instance_pre_t>)>>(
      'wasmtime_instance_pre_delete');
  late final _wasmtime_instance_pre_delete = _wasmtime_instance_pre_deletePtr
      .asFunction<void Function(ffi.Pointer<wasmtime_instance_pre_t>)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_instance_pre_instantiate(
    ffi.Pointer<wasmtime_instance_pre_t> instance_pre,
    ffi.Pointer<wasmtime_store_t> store,
    ffi.Pointer<wasmtime_instance_t> instance,
    ffi.Pointer<ffi.Pointer<wasm_trap_t>> trap_ptr,
  ) {
    return _wasmtime_instance_pre_instantiate(
      instance_pre,
      store,
      instance,
      trap_ptr,
    );
  }

  late final _wasmtime_instance_pre_instantiatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wasmtime_error_t> Function(
                  ffi.Pointer<wasmtime_instance_pre_t>,
                  ffi.Pointer<wasmtime_store_t>,
                  ffi.Pointer<wasmtime_instance_t>,
                  ffi.Pointer<ffi.Pointer<wasm_trap_t>>)>>(
      'wasmtime_instance_pre_instantiate');
  late final _wasmtime_instance_pre_instantiate =
      _wasmtime_instance_pre_instantiatePtr.asFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_instance_pre_t>,
              ffi.Pointer<wasmtime_store_t>,
              ffi.Pointer<wasmtime_instance_t>,
              ffi.Pointer<ffi.Pointer<wasm_trap_t>>)>();

  ffi.Pointer<wasmtime_module_t> wasmtime_instance_pre_module(
    ffi.Pointer<wasmtime_instance_pre_t> instance_pre,
  ) {
    return _wasmtime_instance_pre_module(
      instance_pre,
    );
  }

  late final _wasmtime_instance_pre_modulePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wasmtime_module_t> Function(
                  ffi.Pointer<wasmtime_instance_pre_t>)>>(
      'wasmtime_instance_pre_module');
  late final _wasmtime_instance_pre_module =
      _wasmtime_instance_pre_modulePtr.asFunction<
          ffi.Pointer<wasmtime_module_t> Function(
              ffi.Pointer<wasmtime_instance_pre_t>)>();

  ffi.Pointer<wasmtime_linker_t> wasmtime_linker_new(
    ffi.Pointer<wasm_engine_t> engine,
  ) {
    return _wasmtime_linker_new(
      engine,
    );
  }

  late final _wasmtime_linker_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasmtime_linker_t> Function(
              ffi.Pointer<wasm_engine_t>)>>('wasmtime_linker_new');
  late final _wasmtime_linker_new = _wasmtime_linker_newPtr.asFunction<
      ffi.Pointer<wasmtime_linker_t> Function(ffi.Pointer<wasm_engine_t>)>();

  ffi.Pointer<wasmtime_linker_t> wasmtime_linker_clone(
    ffi.Pointer<wasmtime_linker_t> linker,
  ) {
    return _wasmtime_linker_clone(
      linker,
    );
  }

  late final _wasmtime_linker_clonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasmtime_linker_t> Function(
              ffi.Pointer<wasmtime_linker_t>)>>('wasmtime_linker_clone');
  late final _wasmtime_linker_clone = _wasmtime_linker_clonePtr.asFunction<
      ffi.Pointer<wasmtime_linker_t> Function(
          ffi.Pointer<wasmtime_linker_t>)>();

  void wasmtime_linker_delete(
    ffi.Pointer<wasmtime_linker_t> linker,
  ) {
    return _wasmtime_linker_delete(
      linker,
    );
  }

  late final _wasmtime_linker_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<wasmtime_linker_t>)>>(
      'wasmtime_linker_delete');
  late final _wasmtime_linker_delete = _wasmtime_linker_deletePtr
      .asFunction<void Function(ffi.Pointer<wasmtime_linker_t>)>();

  void wasmtime_linker_allow_shadowing(
    ffi.Pointer<wasmtime_linker_t> linker,
    bool allow_shadowing,
  ) {
    return _wasmtime_linker_allow_shadowing(
      linker,
      allow_shadowing,
    );
  }

  late final _wasmtime_linker_allow_shadowingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasmtime_linker_t>,
              ffi.Bool)>>('wasmtime_linker_allow_shadowing');
  late final _wasmtime_linker_allow_shadowing =
      _wasmtime_linker_allow_shadowingPtr
          .asFunction<void Function(ffi.Pointer<wasmtime_linker_t>, bool)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_linker_define(
    ffi.Pointer<wasmtime_linker_t> linker,
    ffi.Pointer<wasmtime_context_t> store,
    ffi.Pointer<ffi.Char> module,
    int module_len,
    ffi.Pointer<ffi.Char> name,
    int name_len,
    ffi.Pointer<wasmtime_extern_t> item,
  ) {
    return _wasmtime_linker_define(
      linker,
      store,
      module,
      module_len,
      name,
      name_len,
      item,
    );
  }

  late final _wasmtime_linker_definePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_linker_t>,
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<wasmtime_extern_t>)>>('wasmtime_linker_define');
  late final _wasmtime_linker_define = _wasmtime_linker_definePtr.asFunction<
      ffi.Pointer<wasmtime_error_t> Function(
          ffi.Pointer<wasmtime_linker_t>,
          ffi.Pointer<wasmtime_context_t>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<wasmtime_extern_t>)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_linker_define_func(
    ffi.Pointer<wasmtime_linker_t> linker,
    ffi.Pointer<ffi.Char> module,
    int module_len,
    ffi.Pointer<ffi.Char> name,
    int name_len,
    ffi.Pointer<wasm_functype_t> ty,
    wasmtime_func_callback_t cb,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        finalizer,
  ) {
    return _wasmtime_linker_define_func(
      linker,
      module,
      module_len,
      name,
      name_len,
      ty,
      cb,
      data,
      finalizer,
    );
  }

  late final _wasmtime_linker_define_funcPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wasmtime_error_t> Function(
                  ffi.Pointer<wasmtime_linker_t>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Size,
                  ffi.Pointer<ffi.Char>,
                  ffi.Size,
                  ffi.Pointer<wasm_functype_t>,
                  wasmtime_func_callback_t,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
      'wasmtime_linker_define_func');
  late final _wasmtime_linker_define_func =
      _wasmtime_linker_define_funcPtr.asFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_linker_t>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<wasm_functype_t>,
              wasmtime_func_callback_t,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_linker_define_func_unchecked(
    ffi.Pointer<wasmtime_linker_t> linker,
    ffi.Pointer<ffi.Char> module,
    int module_len,
    ffi.Pointer<ffi.Char> name,
    int name_len,
    ffi.Pointer<wasm_functype_t> ty,
    wasmtime_func_unchecked_callback_t cb,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        finalizer,
  ) {
    return _wasmtime_linker_define_func_unchecked(
      linker,
      module,
      module_len,
      name,
      name_len,
      ty,
      cb,
      data,
      finalizer,
    );
  }

  late final _wasmtime_linker_define_func_uncheckedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wasmtime_error_t> Function(
                  ffi.Pointer<wasmtime_linker_t>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Size,
                  ffi.Pointer<ffi.Char>,
                  ffi.Size,
                  ffi.Pointer<wasm_functype_t>,
                  wasmtime_func_unchecked_callback_t,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
      'wasmtime_linker_define_func_unchecked');
  late final _wasmtime_linker_define_func_unchecked =
      _wasmtime_linker_define_func_uncheckedPtr.asFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_linker_t>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<wasm_functype_t>,
              wasmtime_func_unchecked_callback_t,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_linker_define_wasi(
    ffi.Pointer<wasmtime_linker_t> linker,
  ) {
    return _wasmtime_linker_define_wasi(
      linker,
    );
  }

  late final _wasmtime_linker_define_wasiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_linker_t>)>>('wasmtime_linker_define_wasi');
  late final _wasmtime_linker_define_wasi =
      _wasmtime_linker_define_wasiPtr.asFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_linker_t>)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_linker_define_instance(
    ffi.Pointer<wasmtime_linker_t> linker,
    ffi.Pointer<wasmtime_context_t> store,
    ffi.Pointer<ffi.Char> name,
    int name_len,
    ffi.Pointer<wasmtime_instance_t> instance,
  ) {
    return _wasmtime_linker_define_instance(
      linker,
      store,
      name,
      name_len,
      instance,
    );
  }

  late final _wasmtime_linker_define_instancePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wasmtime_error_t> Function(
                  ffi.Pointer<wasmtime_linker_t>,
                  ffi.Pointer<wasmtime_context_t>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Size,
                  ffi.Pointer<wasmtime_instance_t>)>>(
      'wasmtime_linker_define_instance');
  late final _wasmtime_linker_define_instance =
      _wasmtime_linker_define_instancePtr.asFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_linker_t>,
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<wasmtime_instance_t>)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_linker_instantiate(
    ffi.Pointer<wasmtime_linker_t> linker,
    ffi.Pointer<wasmtime_context_t> store,
    ffi.Pointer<wasmtime_module_t> module,
    ffi.Pointer<wasmtime_instance_t> instance,
    ffi.Pointer<ffi.Pointer<wasm_trap_t>> trap,
  ) {
    return _wasmtime_linker_instantiate(
      linker,
      store,
      module,
      instance,
      trap,
    );
  }

  late final _wasmtime_linker_instantiatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wasmtime_error_t> Function(
                  ffi.Pointer<wasmtime_linker_t>,
                  ffi.Pointer<wasmtime_context_t>,
                  ffi.Pointer<wasmtime_module_t>,
                  ffi.Pointer<wasmtime_instance_t>,
                  ffi.Pointer<ffi.Pointer<wasm_trap_t>>)>>(
      'wasmtime_linker_instantiate');
  late final _wasmtime_linker_instantiate =
      _wasmtime_linker_instantiatePtr.asFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_linker_t>,
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_module_t>,
              ffi.Pointer<wasmtime_instance_t>,
              ffi.Pointer<ffi.Pointer<wasm_trap_t>>)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_linker_module(
    ffi.Pointer<wasmtime_linker_t> linker,
    ffi.Pointer<wasmtime_context_t> store,
    ffi.Pointer<ffi.Char> name,
    int name_len,
    ffi.Pointer<wasmtime_module_t> module,
  ) {
    return _wasmtime_linker_module(
      linker,
      store,
      name,
      name_len,
      module,
    );
  }

  late final _wasmtime_linker_modulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_linker_t>,
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<wasmtime_module_t>)>>('wasmtime_linker_module');
  late final _wasmtime_linker_module = _wasmtime_linker_modulePtr.asFunction<
      ffi.Pointer<wasmtime_error_t> Function(
          ffi.Pointer<wasmtime_linker_t>,
          ffi.Pointer<wasmtime_context_t>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<wasmtime_module_t>)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_linker_get_default(
    ffi.Pointer<wasmtime_linker_t> linker,
    ffi.Pointer<wasmtime_context_t> store,
    ffi.Pointer<ffi.Char> name,
    int name_len,
    ffi.Pointer<wasmtime_func_t> func,
  ) {
    return _wasmtime_linker_get_default(
      linker,
      store,
      name,
      name_len,
      func,
    );
  }

  late final _wasmtime_linker_get_defaultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_linker_t>,
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<wasmtime_func_t>)>>('wasmtime_linker_get_default');
  late final _wasmtime_linker_get_default =
      _wasmtime_linker_get_defaultPtr.asFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_linker_t>,
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<wasmtime_func_t>)>();

  bool wasmtime_linker_get(
    ffi.Pointer<wasmtime_linker_t> linker,
    ffi.Pointer<wasmtime_context_t> store,
    ffi.Pointer<ffi.Char> module,
    int module_len,
    ffi.Pointer<ffi.Char> name,
    int name_len,
    ffi.Pointer<wasmtime_extern_t> item,
  ) {
    return _wasmtime_linker_get(
      linker,
      store,
      module,
      module_len,
      name,
      name_len,
      item,
    );
  }

  late final _wasmtime_linker_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<wasmtime_linker_t>,
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<wasmtime_extern_t>)>>('wasmtime_linker_get');
  late final _wasmtime_linker_get = _wasmtime_linker_getPtr.asFunction<
      bool Function(
          ffi.Pointer<wasmtime_linker_t>,
          ffi.Pointer<wasmtime_context_t>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<wasmtime_extern_t>)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_linker_instantiate_pre(
    ffi.Pointer<wasmtime_linker_t> linker,
    ffi.Pointer<wasmtime_module_t> module,
    ffi.Pointer<ffi.Pointer<wasmtime_instance_pre_t>> instance_pre,
  ) {
    return _wasmtime_linker_instantiate_pre(
      linker,
      module,
      instance_pre,
    );
  }

  late final _wasmtime_linker_instantiate_prePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wasmtime_error_t> Function(
                  ffi.Pointer<wasmtime_linker_t>,
                  ffi.Pointer<wasmtime_module_t>,
                  ffi.Pointer<ffi.Pointer<wasmtime_instance_pre_t>>)>>(
      'wasmtime_linker_instantiate_pre');
  late final _wasmtime_linker_instantiate_pre =
      _wasmtime_linker_instantiate_prePtr.asFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_linker_t>,
              ffi.Pointer<wasmtime_module_t>,
              ffi.Pointer<ffi.Pointer<wasmtime_instance_pre_t>>)>();

  ffi.Pointer<wasm_memorytype_t> wasmtime_memorytype_new(
    int min,
    bool max_present,
    int max,
    bool is_64,
  ) {
    return _wasmtime_memorytype_new(
      min,
      max_present,
      max,
      is_64,
    );
  }

  late final _wasmtime_memorytype_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_memorytype_t> Function(ffi.Uint64, ffi.Bool,
              ffi.Uint64, ffi.Bool)>>('wasmtime_memorytype_new');
  late final _wasmtime_memorytype_new = _wasmtime_memorytype_newPtr.asFunction<
      ffi.Pointer<wasm_memorytype_t> Function(int, bool, int, bool)>();

  int wasmtime_memorytype_minimum(
    ffi.Pointer<wasm_memorytype_t> ty,
  ) {
    return _wasmtime_memorytype_minimum(
      ty,
    );
  }

  late final _wasmtime_memorytype_minimumPtr = _lookup<
          ffi
          .NativeFunction<ffi.Uint64 Function(ffi.Pointer<wasm_memorytype_t>)>>(
      'wasmtime_memorytype_minimum');
  late final _wasmtime_memorytype_minimum = _wasmtime_memorytype_minimumPtr
      .asFunction<int Function(ffi.Pointer<wasm_memorytype_t>)>();

  bool wasmtime_memorytype_maximum(
    ffi.Pointer<wasm_memorytype_t> ty,
    ffi.Pointer<ffi.Uint64> max,
  ) {
    return _wasmtime_memorytype_maximum(
      ty,
      max,
    );
  }

  late final _wasmtime_memorytype_maximumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<wasm_memorytype_t>,
              ffi.Pointer<ffi.Uint64>)>>('wasmtime_memorytype_maximum');
  late final _wasmtime_memorytype_maximum =
      _wasmtime_memorytype_maximumPtr.asFunction<
          bool Function(
              ffi.Pointer<wasm_memorytype_t>, ffi.Pointer<ffi.Uint64>)>();

  bool wasmtime_memorytype_is64(
    ffi.Pointer<wasm_memorytype_t> ty,
  ) {
    return _wasmtime_memorytype_is64(
      ty,
    );
  }

  late final _wasmtime_memorytype_is64Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<wasm_memorytype_t>)>>(
      'wasmtime_memorytype_is64');
  late final _wasmtime_memorytype_is64 = _wasmtime_memorytype_is64Ptr
      .asFunction<bool Function(ffi.Pointer<wasm_memorytype_t>)>();

  bool wasmtime_memorytype_isshared(
    ffi.Pointer<wasm_memorytype_t> ty,
  ) {
    return _wasmtime_memorytype_isshared(
      ty,
    );
  }

  late final _wasmtime_memorytype_issharedPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<wasm_memorytype_t>)>>(
      'wasmtime_memorytype_isshared');
  late final _wasmtime_memorytype_isshared = _wasmtime_memorytype_issharedPtr
      .asFunction<bool Function(ffi.Pointer<wasm_memorytype_t>)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_memory_new(
    ffi.Pointer<wasmtime_context_t> store,
    ffi.Pointer<wasm_memorytype_t> ty,
    ffi.Pointer<wasmtime_memory_t> ret,
  ) {
    return _wasmtime_memory_new(
      store,
      ty,
      ret,
    );
  }

  late final _wasmtime_memory_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasm_memorytype_t>,
              ffi.Pointer<wasmtime_memory_t>)>>('wasmtime_memory_new');
  late final _wasmtime_memory_new = _wasmtime_memory_newPtr.asFunction<
      ffi.Pointer<wasmtime_error_t> Function(ffi.Pointer<wasmtime_context_t>,
          ffi.Pointer<wasm_memorytype_t>, ffi.Pointer<wasmtime_memory_t>)>();

  ffi.Pointer<wasm_memorytype_t> wasmtime_memory_type(
    ffi.Pointer<wasmtime_context_t> store,
    ffi.Pointer<wasmtime_memory_t> memory,
  ) {
    return _wasmtime_memory_type(
      store,
      memory,
    );
  }

  late final _wasmtime_memory_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_memorytype_t> Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_memory_t>)>>('wasmtime_memory_type');
  late final _wasmtime_memory_type = _wasmtime_memory_typePtr.asFunction<
      ffi.Pointer<wasm_memorytype_t> Function(
          ffi.Pointer<wasmtime_context_t>, ffi.Pointer<wasmtime_memory_t>)>();

  ffi.Pointer<ffi.Uint8> wasmtime_memory_data(
    ffi.Pointer<wasmtime_context_t> store,
    ffi.Pointer<wasmtime_memory_t> memory,
  ) {
    return _wasmtime_memory_data(
      store,
      memory,
    );
  }

  late final _wasmtime_memory_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_memory_t>)>>('wasmtime_memory_data');
  late final _wasmtime_memory_data = _wasmtime_memory_dataPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<wasmtime_context_t>, ffi.Pointer<wasmtime_memory_t>)>();

  int wasmtime_memory_data_size(
    ffi.Pointer<wasmtime_context_t> store,
    ffi.Pointer<wasmtime_memory_t> memory,
  ) {
    return _wasmtime_memory_data_size(
      store,
      memory,
    );
  }

  late final _wasmtime_memory_data_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_memory_t>)>>('wasmtime_memory_data_size');
  late final _wasmtime_memory_data_size =
      _wasmtime_memory_data_sizePtr.asFunction<
          int Function(ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_memory_t>)>();

  int wasmtime_memory_size(
    ffi.Pointer<wasmtime_context_t> store,
    ffi.Pointer<wasmtime_memory_t> memory,
  ) {
    return _wasmtime_memory_size(
      store,
      memory,
    );
  }

  late final _wasmtime_memory_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_memory_t>)>>('wasmtime_memory_size');
  late final _wasmtime_memory_size = _wasmtime_memory_sizePtr.asFunction<
      int Function(
          ffi.Pointer<wasmtime_context_t>, ffi.Pointer<wasmtime_memory_t>)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_memory_grow(
    ffi.Pointer<wasmtime_context_t> store,
    ffi.Pointer<wasmtime_memory_t> memory,
    int delta,
    ffi.Pointer<ffi.Uint64> prev_size,
  ) {
    return _wasmtime_memory_grow(
      store,
      memory,
      delta,
      prev_size,
    );
  }

  late final _wasmtime_memory_growPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_memory_t>,
              ffi.Uint64,
              ffi.Pointer<ffi.Uint64>)>>('wasmtime_memory_grow');
  late final _wasmtime_memory_grow = _wasmtime_memory_growPtr.asFunction<
      ffi.Pointer<wasmtime_error_t> Function(ffi.Pointer<wasmtime_context_t>,
          ffi.Pointer<wasmtime_memory_t>, int, ffi.Pointer<ffi.Uint64>)>();

  void wasmtime_guestprofiler_delete(
    ffi.Pointer<wasmtime_guestprofiler_t> guestprofiler,
  ) {
    return _wasmtime_guestprofiler_delete(
      guestprofiler,
    );
  }

  late final _wasmtime_guestprofiler_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<wasmtime_guestprofiler_t>)>>(
      'wasmtime_guestprofiler_delete');
  late final _wasmtime_guestprofiler_delete = _wasmtime_guestprofiler_deletePtr
      .asFunction<void Function(ffi.Pointer<wasmtime_guestprofiler_t>)>();

  ffi.Pointer<wasmtime_guestprofiler_t> wasmtime_guestprofiler_new(
    ffi.Pointer<wasm_name_t> module_name,
    int interval_nanos,
    ffi.Pointer<wasmtime_guestprofiler_modules_t> modules,
    int modules_len,
  ) {
    return _wasmtime_guestprofiler_new(
      module_name,
      interval_nanos,
      modules,
      modules_len,
    );
  }

  late final _wasmtime_guestprofiler_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasmtime_guestprofiler_t> Function(
              ffi.Pointer<wasm_name_t>,
              ffi.Uint64,
              ffi.Pointer<wasmtime_guestprofiler_modules_t>,
              ffi.Size)>>('wasmtime_guestprofiler_new');
  late final _wasmtime_guestprofiler_new =
      _wasmtime_guestprofiler_newPtr.asFunction<
          ffi.Pointer<wasmtime_guestprofiler_t> Function(
              ffi.Pointer<wasm_name_t>,
              int,
              ffi.Pointer<wasmtime_guestprofiler_modules_t>,
              int)>();

  void wasmtime_guestprofiler_sample(
    ffi.Pointer<wasmtime_guestprofiler_t> guestprofiler,
    ffi.Pointer<wasmtime_store_t> store,
    int delta_nanos,
  ) {
    return _wasmtime_guestprofiler_sample(
      guestprofiler,
      store,
      delta_nanos,
    );
  }

  late final _wasmtime_guestprofiler_samplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<wasmtime_guestprofiler_t>,
              ffi.Pointer<wasmtime_store_t>,
              ffi.Uint64)>>('wasmtime_guestprofiler_sample');
  late final _wasmtime_guestprofiler_sample =
      _wasmtime_guestprofiler_samplePtr.asFunction<
          void Function(ffi.Pointer<wasmtime_guestprofiler_t>,
              ffi.Pointer<wasmtime_store_t>, int)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_guestprofiler_finish(
    ffi.Pointer<wasmtime_guestprofiler_t> guestprofiler,
    ffi.Pointer<wasm_byte_vec_t> out,
  ) {
    return _wasmtime_guestprofiler_finish(
      guestprofiler,
      out,
    );
  }

  late final _wasmtime_guestprofiler_finishPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_guestprofiler_t>,
              ffi.Pointer<wasm_byte_vec_t>)>>('wasmtime_guestprofiler_finish');
  late final _wasmtime_guestprofiler_finish =
      _wasmtime_guestprofiler_finishPtr.asFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_guestprofiler_t>,
              ffi.Pointer<wasm_byte_vec_t>)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_table_new(
    ffi.Pointer<wasmtime_context_t> store,
    ffi.Pointer<wasm_tabletype_t> ty,
    ffi.Pointer<wasmtime_val_t> init,
    ffi.Pointer<wasmtime_table_t> table,
  ) {
    return _wasmtime_table_new(
      store,
      ty,
      init,
      table,
    );
  }

  late final _wasmtime_table_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasm_tabletype_t>,
              ffi.Pointer<wasmtime_val_t>,
              ffi.Pointer<wasmtime_table_t>)>>('wasmtime_table_new');
  late final _wasmtime_table_new = _wasmtime_table_newPtr.asFunction<
      ffi.Pointer<wasmtime_error_t> Function(
          ffi.Pointer<wasmtime_context_t>,
          ffi.Pointer<wasm_tabletype_t>,
          ffi.Pointer<wasmtime_val_t>,
          ffi.Pointer<wasmtime_table_t>)>();

  ffi.Pointer<wasm_tabletype_t> wasmtime_table_type(
    ffi.Pointer<wasmtime_context_t> store,
    ffi.Pointer<wasmtime_table_t> table,
  ) {
    return _wasmtime_table_type(
      store,
      table,
    );
  }

  late final _wasmtime_table_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_tabletype_t> Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_table_t>)>>('wasmtime_table_type');
  late final _wasmtime_table_type = _wasmtime_table_typePtr.asFunction<
      ffi.Pointer<wasm_tabletype_t> Function(
          ffi.Pointer<wasmtime_context_t>, ffi.Pointer<wasmtime_table_t>)>();

  bool wasmtime_table_get(
    ffi.Pointer<wasmtime_context_t> store,
    ffi.Pointer<wasmtime_table_t> table,
    int index,
    ffi.Pointer<wasmtime_val_t> val,
  ) {
    return _wasmtime_table_get(
      store,
      table,
      index,
      val,
    );
  }

  late final _wasmtime_table_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_table_t>,
              ffi.Uint32,
              ffi.Pointer<wasmtime_val_t>)>>('wasmtime_table_get');
  late final _wasmtime_table_get = _wasmtime_table_getPtr.asFunction<
      bool Function(ffi.Pointer<wasmtime_context_t>,
          ffi.Pointer<wasmtime_table_t>, int, ffi.Pointer<wasmtime_val_t>)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_table_set(
    ffi.Pointer<wasmtime_context_t> store,
    ffi.Pointer<wasmtime_table_t> table,
    int index,
    ffi.Pointer<wasmtime_val_t> value,
  ) {
    return _wasmtime_table_set(
      store,
      table,
      index,
      value,
    );
  }

  late final _wasmtime_table_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_table_t>,
              ffi.Uint32,
              ffi.Pointer<wasmtime_val_t>)>>('wasmtime_table_set');
  late final _wasmtime_table_set = _wasmtime_table_setPtr.asFunction<
      ffi.Pointer<wasmtime_error_t> Function(ffi.Pointer<wasmtime_context_t>,
          ffi.Pointer<wasmtime_table_t>, int, ffi.Pointer<wasmtime_val_t>)>();

  int wasmtime_table_size(
    ffi.Pointer<wasmtime_context_t> store,
    ffi.Pointer<wasmtime_table_t> table,
  ) {
    return _wasmtime_table_size(
      store,
      table,
    );
  }

  late final _wasmtime_table_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_table_t>)>>('wasmtime_table_size');
  late final _wasmtime_table_size = _wasmtime_table_sizePtr.asFunction<
      int Function(
          ffi.Pointer<wasmtime_context_t>, ffi.Pointer<wasmtime_table_t>)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_table_grow(
    ffi.Pointer<wasmtime_context_t> store,
    ffi.Pointer<wasmtime_table_t> table,
    int delta,
    ffi.Pointer<wasmtime_val_t> init,
    ffi.Pointer<ffi.Uint32> prev_size,
  ) {
    return _wasmtime_table_grow(
      store,
      table,
      delta,
      init,
      prev_size,
    );
  }

  late final _wasmtime_table_growPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_table_t>,
              ffi.Uint32,
              ffi.Pointer<wasmtime_val_t>,
              ffi.Pointer<ffi.Uint32>)>>('wasmtime_table_grow');
  late final _wasmtime_table_grow = _wasmtime_table_growPtr.asFunction<
      ffi.Pointer<wasmtime_error_t> Function(
          ffi.Pointer<wasmtime_context_t>,
          ffi.Pointer<wasmtime_table_t>,
          int,
          ffi.Pointer<wasmtime_val_t>,
          ffi.Pointer<ffi.Uint32>)>();

  ffi.Pointer<wasm_trap_t> wasmtime_trap_new(
    ffi.Pointer<ffi.Char> msg,
    int msg_len,
  ) {
    return _wasmtime_trap_new(
      msg,
      msg_len,
    );
  }

  late final _wasmtime_trap_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_trap_t> Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('wasmtime_trap_new');
  late final _wasmtime_trap_new = _wasmtime_trap_newPtr.asFunction<
      ffi.Pointer<wasm_trap_t> Function(ffi.Pointer<ffi.Char>, int)>();

  bool wasmtime_trap_code(
    ffi.Pointer<wasm_trap_t> arg0,
    ffi.Pointer<wasmtime_trap_code_t> code,
  ) {
    return _wasmtime_trap_code(
      arg0,
      code,
    );
  }

  late final _wasmtime_trap_codePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<wasm_trap_t>,
              ffi.Pointer<wasmtime_trap_code_t>)>>('wasmtime_trap_code');
  late final _wasmtime_trap_code = _wasmtime_trap_codePtr.asFunction<
      bool Function(
          ffi.Pointer<wasm_trap_t>, ffi.Pointer<wasmtime_trap_code_t>)>();

  ffi.Pointer<wasm_name_t> wasmtime_frame_func_name(
    ffi.Pointer<wasm_frame_t> arg0,
  ) {
    return _wasmtime_frame_func_name(
      arg0,
    );
  }

  late final _wasmtime_frame_func_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_name_t> Function(
              ffi.Pointer<wasm_frame_t>)>>('wasmtime_frame_func_name');
  late final _wasmtime_frame_func_name =
      _wasmtime_frame_func_namePtr.asFunction<
          ffi.Pointer<wasm_name_t> Function(ffi.Pointer<wasm_frame_t>)>();

  ffi.Pointer<wasm_name_t> wasmtime_frame_module_name(
    ffi.Pointer<wasm_frame_t> arg0,
  ) {
    return _wasmtime_frame_module_name(
      arg0,
    );
  }

  late final _wasmtime_frame_module_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasm_name_t> Function(
              ffi.Pointer<wasm_frame_t>)>>('wasmtime_frame_module_name');
  late final _wasmtime_frame_module_name =
      _wasmtime_frame_module_namePtr.asFunction<
          ffi.Pointer<wasm_name_t> Function(ffi.Pointer<wasm_frame_t>)>();

  void wasmtime_config_async_support_set(
    ffi.Pointer<wasm_config_t> arg0,
    bool arg1,
  ) {
    return _wasmtime_config_async_support_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_async_support_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_config_t>,
              ffi.Bool)>>('wasmtime_config_async_support_set');
  late final _wasmtime_config_async_support_set =
      _wasmtime_config_async_support_setPtr
          .asFunction<void Function(ffi.Pointer<wasm_config_t>, bool)>();

  void wasmtime_config_async_stack_size_set(
    ffi.Pointer<wasm_config_t> arg0,
    int arg1,
  ) {
    return _wasmtime_config_async_stack_size_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_async_stack_size_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wasm_config_t>,
              ffi.Uint64)>>('wasmtime_config_async_stack_size_set');
  late final _wasmtime_config_async_stack_size_set =
      _wasmtime_config_async_stack_size_setPtr
          .asFunction<void Function(ffi.Pointer<wasm_config_t>, int)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_context_fuel_async_yield_interval(
    ffi.Pointer<wasmtime_context_t> context,
    int interval,
  ) {
    return _wasmtime_context_fuel_async_yield_interval(
      context,
      interval,
    );
  }

  late final _wasmtime_context_fuel_async_yield_intervalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Uint64)>>('wasmtime_context_fuel_async_yield_interval');
  late final _wasmtime_context_fuel_async_yield_interval =
      _wasmtime_context_fuel_async_yield_intervalPtr.asFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_context_t>, int)>();

  ffi.Pointer<wasmtime_error_t>
      wasmtime_context_epoch_deadline_async_yield_and_update(
    ffi.Pointer<wasmtime_context_t> context,
    int delta,
  ) {
    return _wasmtime_context_epoch_deadline_async_yield_and_update(
      context,
      delta,
    );
  }

  late final _wasmtime_context_epoch_deadline_async_yield_and_updatePtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<wasmtime_error_t> Function(
                      ffi.Pointer<wasmtime_context_t>, ffi.Uint64)>>(
          'wasmtime_context_epoch_deadline_async_yield_and_update');
  late final _wasmtime_context_epoch_deadline_async_yield_and_update =
      _wasmtime_context_epoch_deadline_async_yield_and_updatePtr.asFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_context_t>, int)>();

  bool wasmtime_call_future_poll(
    ffi.Pointer<wasmtime_call_future_t> future,
  ) {
    return _wasmtime_call_future_poll(
      future,
    );
  }

  late final _wasmtime_call_future_pollPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<wasmtime_call_future_t>)>>(
      'wasmtime_call_future_poll');
  late final _wasmtime_call_future_poll = _wasmtime_call_future_pollPtr
      .asFunction<bool Function(ffi.Pointer<wasmtime_call_future_t>)>();

  void wasmtime_call_future_delete(
    ffi.Pointer<wasmtime_call_future_t> future,
  ) {
    return _wasmtime_call_future_delete(
      future,
    );
  }

  late final _wasmtime_call_future_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<wasmtime_call_future_t>)>>(
      'wasmtime_call_future_delete');
  late final _wasmtime_call_future_delete = _wasmtime_call_future_deletePtr
      .asFunction<void Function(ffi.Pointer<wasmtime_call_future_t>)>();

  ffi.Pointer<wasmtime_call_future_t> wasmtime_func_call_async(
    ffi.Pointer<wasmtime_context_t> context,
    ffi.Pointer<wasmtime_func_t> func,
    ffi.Pointer<wasmtime_val_t> args,
    int nargs,
    ffi.Pointer<wasmtime_val_t> results,
    int nresults,
    ffi.Pointer<ffi.Pointer<wasm_trap_t>> trap_ret,
    ffi.Pointer<ffi.Pointer<wasmtime_error_t>> error_ret,
  ) {
    return _wasmtime_func_call_async(
      context,
      func,
      args,
      nargs,
      results,
      nresults,
      trap_ret,
      error_ret,
    );
  }

  late final _wasmtime_func_call_asyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wasmtime_call_future_t> Function(
                  ffi.Pointer<wasmtime_context_t>,
                  ffi.Pointer<wasmtime_func_t>,
                  ffi.Pointer<wasmtime_val_t>,
                  ffi.Size,
                  ffi.Pointer<wasmtime_val_t>,
                  ffi.Size,
                  ffi.Pointer<ffi.Pointer<wasm_trap_t>>,
                  ffi.Pointer<ffi.Pointer<wasmtime_error_t>>)>>(
      'wasmtime_func_call_async');
  late final _wasmtime_func_call_async =
      _wasmtime_func_call_asyncPtr.asFunction<
          ffi.Pointer<wasmtime_call_future_t> Function(
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_func_t>,
              ffi.Pointer<wasmtime_val_t>,
              int,
              ffi.Pointer<wasmtime_val_t>,
              int,
              ffi.Pointer<ffi.Pointer<wasm_trap_t>>,
              ffi.Pointer<ffi.Pointer<wasmtime_error_t>>)>();

  ffi.Pointer<wasmtime_error_t> wasmtime_linker_define_async_func(
    ffi.Pointer<wasmtime_linker_t> linker,
    ffi.Pointer<ffi.Char> module,
    int module_len,
    ffi.Pointer<ffi.Char> name,
    int name_len,
    ffi.Pointer<wasm_functype_t> ty,
    wasmtime_func_async_callback_t cb,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        finalizer,
  ) {
    return _wasmtime_linker_define_async_func(
      linker,
      module,
      module_len,
      name,
      name_len,
      ty,
      cb,
      data,
      finalizer,
    );
  }

  late final _wasmtime_linker_define_async_funcPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wasmtime_error_t> Function(
                  ffi.Pointer<wasmtime_linker_t>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Size,
                  ffi.Pointer<ffi.Char>,
                  ffi.Size,
                  ffi.Pointer<wasm_functype_t>,
                  wasmtime_func_async_callback_t,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
      'wasmtime_linker_define_async_func');
  late final _wasmtime_linker_define_async_func =
      _wasmtime_linker_define_async_funcPtr.asFunction<
          ffi.Pointer<wasmtime_error_t> Function(
              ffi.Pointer<wasmtime_linker_t>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<wasm_functype_t>,
              wasmtime_func_async_callback_t,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<wasmtime_call_future_t> wasmtime_linker_instantiate_async(
    ffi.Pointer<wasmtime_linker_t> linker,
    ffi.Pointer<wasmtime_context_t> store,
    ffi.Pointer<wasmtime_module_t> module,
    ffi.Pointer<wasmtime_instance_t> instance,
    ffi.Pointer<ffi.Pointer<wasm_trap_t>> trap_ret,
    ffi.Pointer<ffi.Pointer<wasmtime_error_t>> error_ret,
  ) {
    return _wasmtime_linker_instantiate_async(
      linker,
      store,
      module,
      instance,
      trap_ret,
      error_ret,
    );
  }

  late final _wasmtime_linker_instantiate_asyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wasmtime_call_future_t> Function(
                  ffi.Pointer<wasmtime_linker_t>,
                  ffi.Pointer<wasmtime_context_t>,
                  ffi.Pointer<wasmtime_module_t>,
                  ffi.Pointer<wasmtime_instance_t>,
                  ffi.Pointer<ffi.Pointer<wasm_trap_t>>,
                  ffi.Pointer<ffi.Pointer<wasmtime_error_t>>)>>(
      'wasmtime_linker_instantiate_async');
  late final _wasmtime_linker_instantiate_async =
      _wasmtime_linker_instantiate_asyncPtr.asFunction<
          ffi.Pointer<wasmtime_call_future_t> Function(
              ffi.Pointer<wasmtime_linker_t>,
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_module_t>,
              ffi.Pointer<wasmtime_instance_t>,
              ffi.Pointer<ffi.Pointer<wasm_trap_t>>,
              ffi.Pointer<ffi.Pointer<wasmtime_error_t>>)>();

  ffi.Pointer<wasmtime_call_future_t> wasmtime_instance_pre_instantiate_async(
    ffi.Pointer<wasmtime_instance_pre_t> instance_pre,
    ffi.Pointer<wasmtime_context_t> store,
    ffi.Pointer<wasmtime_instance_t> instance,
    ffi.Pointer<ffi.Pointer<wasm_trap_t>> trap_ret,
    ffi.Pointer<ffi.Pointer<wasmtime_error_t>> error_ret,
  ) {
    return _wasmtime_instance_pre_instantiate_async(
      instance_pre,
      store,
      instance,
      trap_ret,
      error_ret,
    );
  }

  late final _wasmtime_instance_pre_instantiate_asyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wasmtime_call_future_t> Function(
                  ffi.Pointer<wasmtime_instance_pre_t>,
                  ffi.Pointer<wasmtime_context_t>,
                  ffi.Pointer<wasmtime_instance_t>,
                  ffi.Pointer<ffi.Pointer<wasm_trap_t>>,
                  ffi.Pointer<ffi.Pointer<wasmtime_error_t>>)>>(
      'wasmtime_instance_pre_instantiate_async');
  late final _wasmtime_instance_pre_instantiate_async =
      _wasmtime_instance_pre_instantiate_asyncPtr.asFunction<
          ffi.Pointer<wasmtime_call_future_t> Function(
              ffi.Pointer<wasmtime_instance_pre_t>,
              ffi.Pointer<wasmtime_context_t>,
              ffi.Pointer<wasmtime_instance_t>,
              ffi.Pointer<ffi.Pointer<wasm_trap_t>>,
              ffi.Pointer<ffi.Pointer<wasmtime_error_t>>)>();

  void wasmtime_config_host_stack_creator_set(
    ffi.Pointer<wasm_config_t> arg0,
    ffi.Pointer<wasmtime_stack_creator_t> arg1,
  ) {
    return _wasmtime_config_host_stack_creator_set(
      arg0,
      arg1,
    );
  }

  late final _wasmtime_config_host_stack_creator_setPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<wasm_config_t>,
                  ffi.Pointer<wasmtime_stack_creator_t>)>>(
      'wasmtime_config_host_stack_creator_set');
  late final _wasmtime_config_host_stack_creator_set =
      _wasmtime_config_host_stack_creator_setPtr.asFunction<
          void Function(ffi.Pointer<wasm_config_t>,
              ffi.Pointer<wasmtime_stack_creator_t>)>();

  /// \brief Converts from the text format of WebAssembly to the binary format.
  ///
  /// \param wat this it the input pointer with the WebAssembly Text Format inside
  /// of it. This will be parsed and converted to the binary format.
  /// \param wat_len this it the length of `wat`, in bytes.
  /// \param ret if the conversion is successful, this byte vector is filled in
  /// with the WebAssembly binary format.
  ///
  /// \return a non-null error if parsing fails, or returns `NULL`. If parsing
  /// fails then `ret` isn't touched.
  ///
  /// This function does not take ownership of `wat`, and the caller is expected to
  /// deallocate the returned #wasmtime_error_t and #wasm_byte_vec_t.
  ffi.Pointer<wasmtime_error_t> wasmtime_wat2wasm(
    ffi.Pointer<ffi.Char> wat,
    int wat_len,
    ffi.Pointer<wasm_byte_vec_t> ret,
  ) {
    return _wasmtime_wat2wasm(
      wat,
      wat_len,
      ret,
    );
  }

  late final _wasmtime_wat2wasmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wasmtime_error_t> Function(ffi.Pointer<ffi.Char>,
              ffi.Size, ffi.Pointer<wasm_byte_vec_t>)>>('wasmtime_wat2wasm');
  late final _wasmtime_wat2wasm = _wasmtime_wat2wasmPtr.asFunction<
      ffi.Pointer<wasmtime_error_t> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<wasm_byte_vec_t>)>();
}

final class max_align_t extends ffi.Opaque {}

final class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

final class __locale_struct extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<__locale_data>> __locales;

  external ffi.Pointer<ffi.UnsignedShort> __ctype_b;

  external ffi.Pointer<ffi.Int> __ctype_tolower;

  external ffi.Pointer<ffi.Int> __ctype_toupper;

  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<ffi.Char>> __names;
}

final class __locale_data extends ffi.Opaque {}

typedef locale_t = __locale_t;
typedef __locale_t = ffi.Pointer<__locale_struct>;

final class wasm_byte_vec_t extends ffi.Struct {
  @ffi.Size()
  external int size;

  external ffi.Pointer<wasm_byte_t> data;
}

typedef wasm_byte_t = byte_t;
typedef byte_t = ffi.Char;
typedef Dartbyte_t = int;

final class wasm_config_t extends ffi.Opaque {}

final class wasm_engine_t extends ffi.Opaque {}

final class wasm_store_t extends ffi.Opaque {}

enum wasm_mutability_enum {
  WASM_CONST(0),
  WASM_VAR(1);

  final int value;
  const wasm_mutability_enum(this.value);

  static wasm_mutability_enum fromValue(int value) => switch (value) {
        0 => WASM_CONST,
        1 => WASM_VAR,
        _ =>
          throw ArgumentError("Unknown value for wasm_mutability_enum: $value"),
      };
}

final class wasm_limits_t extends ffi.Struct {
  @ffi.Uint32()
  external int min;

  @ffi.Uint32()
  external int max;
}

final class wasm_valtype_t extends ffi.Opaque {}

final class wasm_valtype_vec_t extends ffi.Struct {
  @ffi.Size()
  external int size;

  external ffi.Pointer<ffi.Pointer<wasm_valtype_t>> data;
}

enum wasm_valkind_enum {
  WASM_I32(0),
  WASM_I64(1),
  WASM_F32(2),
  WASM_F64(3),
  WASM_EXTERNREF(128),
  WASM_FUNCREF(129);

  final int value;
  const wasm_valkind_enum(this.value);

  static wasm_valkind_enum fromValue(int value) => switch (value) {
        0 => WASM_I32,
        1 => WASM_I64,
        2 => WASM_F32,
        3 => WASM_F64,
        128 => WASM_EXTERNREF,
        129 => WASM_FUNCREF,
        _ => throw ArgumentError("Unknown value for wasm_valkind_enum: $value"),
      };
}

typedef wasm_valkind_t = ffi.Uint8;
typedef Dartwasm_valkind_t = int;

final class wasm_functype_t extends ffi.Opaque {}

final class wasm_functype_vec_t extends ffi.Struct {
  @ffi.Size()
  external int size;

  external ffi.Pointer<ffi.Pointer<wasm_functype_t>> data;
}

final class wasm_globaltype_t extends ffi.Opaque {}

final class wasm_globaltype_vec_t extends ffi.Struct {
  @ffi.Size()
  external int size;

  external ffi.Pointer<ffi.Pointer<wasm_globaltype_t>> data;
}

typedef wasm_mutability_t = ffi.Uint8;
typedef Dartwasm_mutability_t = int;

final class wasm_tabletype_t extends ffi.Opaque {}

final class wasm_tabletype_vec_t extends ffi.Struct {
  @ffi.Size()
  external int size;

  external ffi.Pointer<ffi.Pointer<wasm_tabletype_t>> data;
}

final class wasm_memorytype_t extends ffi.Opaque {}

final class wasm_memorytype_vec_t extends ffi.Struct {
  @ffi.Size()
  external int size;

  external ffi.Pointer<ffi.Pointer<wasm_memorytype_t>> data;
}

final class wasm_externtype_t extends ffi.Opaque {}

final class wasm_externtype_vec_t extends ffi.Struct {
  @ffi.Size()
  external int size;

  external ffi.Pointer<ffi.Pointer<wasm_externtype_t>> data;
}

enum wasm_externkind_enum {
  WASM_EXTERN_FUNC(0),
  WASM_EXTERN_GLOBAL(1),
  WASM_EXTERN_TABLE(2),
  WASM_EXTERN_MEMORY(3);

  final int value;
  const wasm_externkind_enum(this.value);

  static wasm_externkind_enum fromValue(int value) => switch (value) {
        0 => WASM_EXTERN_FUNC,
        1 => WASM_EXTERN_GLOBAL,
        2 => WASM_EXTERN_TABLE,
        3 => WASM_EXTERN_MEMORY,
        _ =>
          throw ArgumentError("Unknown value for wasm_externkind_enum: $value"),
      };
}

typedef wasm_externkind_t = ffi.Uint8;
typedef Dartwasm_externkind_t = int;

final class wasm_importtype_t extends ffi.Opaque {}

final class wasm_importtype_vec_t extends ffi.Struct {
  @ffi.Size()
  external int size;

  external ffi.Pointer<ffi.Pointer<wasm_importtype_t>> data;
}

typedef wasm_name_t = wasm_byte_vec_t;

final class wasm_exporttype_t extends ffi.Opaque {}

final class wasm_exporttype_vec_t extends ffi.Struct {
  @ffi.Size()
  external int size;

  external ffi.Pointer<ffi.Pointer<wasm_exporttype_t>> data;
}

final class wasm_ref_t extends ffi.Opaque {}

final class wasm_val_t extends ffi.Struct {
  @wasm_valkind_t()
  external int kind;

  external UnnamedUnion1 of;
}

final class UnnamedUnion1 extends ffi.Union {
  @ffi.Int32()
  external int i32;

  @ffi.Int64()
  external int i64;

  @float32_t()
  external double f32;

  @float64_t()
  external double f64;

  external ffi.Pointer<wasm_ref_t> ref;
}

typedef float32_t = ffi.Float;
typedef Dartfloat32_t = double;
typedef float64_t = ffi.Double;
typedef Dartfloat64_t = double;

final class wasm_val_vec_t extends ffi.Struct {
  @ffi.Size()
  external int size;

  external ffi.Pointer<wasm_val_t> data;
}

final class wasm_frame_t extends ffi.Opaque {}

final class wasm_frame_vec_t extends ffi.Struct {
  @ffi.Size()
  external int size;

  external ffi.Pointer<ffi.Pointer<wasm_frame_t>> data;
}

final class wasm_instance_t extends ffi.Opaque {}

final class wasm_trap_t extends ffi.Opaque {}

typedef wasm_message_t = wasm_name_t;

final class wasm_foreign_t extends ffi.Opaque {}

final class wasm_module_t extends ffi.Opaque {}

final class wasm_shared_module_t extends ffi.Opaque {}

final class wasm_func_t extends ffi.Opaque {}

typedef wasm_func_callback_t
    = ffi.Pointer<ffi.NativeFunction<wasm_func_callback_tFunction>>;
typedef wasm_func_callback_tFunction = ffi.Pointer<wasm_trap_t> Function(
    ffi.Pointer<wasm_val_vec_t> args, ffi.Pointer<wasm_val_vec_t> results);
typedef wasm_func_callback_with_env_t
    = ffi.Pointer<ffi.NativeFunction<wasm_func_callback_with_env_tFunction>>;
typedef wasm_func_callback_with_env_tFunction
    = ffi.Pointer<wasm_trap_t> Function(ffi.Pointer<ffi.Void> env,
        ffi.Pointer<wasm_val_vec_t> args, ffi.Pointer<wasm_val_vec_t> results);

final class wasm_global_t extends ffi.Opaque {}

final class wasm_table_t extends ffi.Opaque {}

typedef wasm_table_size_t = ffi.Uint32;
typedef Dartwasm_table_size_t = int;

final class wasm_memory_t extends ffi.Opaque {}

typedef wasm_memory_pages_t = ffi.Uint32;
typedef Dartwasm_memory_pages_t = int;

final class wasm_extern_t extends ffi.Opaque {}

final class wasm_extern_vec_t extends ffi.Struct {
  @ffi.Size()
  external int size;

  external ffi.Pointer<ffi.Pointer<wasm_extern_t>> data;
}

final class wasi_config_t extends ffi.Opaque {}

final class wasmtime_error extends ffi.Opaque {}

typedef wasmtime_error_t = wasmtime_error;

enum wasmtime_strategy_enum {
  WASMTIME_STRATEGY_AUTO(0),
  WASMTIME_STRATEGY_CRANELIFT(1);

  final int value;
  const wasmtime_strategy_enum(this.value);

  static wasmtime_strategy_enum fromValue(int value) => switch (value) {
        0 => WASMTIME_STRATEGY_AUTO,
        1 => WASMTIME_STRATEGY_CRANELIFT,
        _ => throw ArgumentError(
            "Unknown value for wasmtime_strategy_enum: $value"),
      };
}

enum wasmtime_opt_level_enum {
  WASMTIME_OPT_LEVEL_NONE(0),
  WASMTIME_OPT_LEVEL_SPEED(1),
  WASMTIME_OPT_LEVEL_SPEED_AND_SIZE(2);

  final int value;
  const wasmtime_opt_level_enum(this.value);

  static wasmtime_opt_level_enum fromValue(int value) => switch (value) {
        0 => WASMTIME_OPT_LEVEL_NONE,
        1 => WASMTIME_OPT_LEVEL_SPEED,
        2 => WASMTIME_OPT_LEVEL_SPEED_AND_SIZE,
        _ => throw ArgumentError(
            "Unknown value for wasmtime_opt_level_enum: $value"),
      };
}

enum wasmtime_profiling_strategy_enum {
  WASMTIME_PROFILING_STRATEGY_NONE(0),
  WASMTIME_PROFILING_STRATEGY_JITDUMP(1),
  WASMTIME_PROFILING_STRATEGY_VTUNE(2),
  WASMTIME_PROFILING_STRATEGY_PERFMAP(3);

  final int value;
  const wasmtime_profiling_strategy_enum(this.value);

  static wasmtime_profiling_strategy_enum fromValue(int value) =>
      switch (value) {
        0 => WASMTIME_PROFILING_STRATEGY_NONE,
        1 => WASMTIME_PROFILING_STRATEGY_JITDUMP,
        2 => WASMTIME_PROFILING_STRATEGY_VTUNE,
        3 => WASMTIME_PROFILING_STRATEGY_PERFMAP,
        _ => throw ArgumentError(
            "Unknown value for wasmtime_profiling_strategy_enum: $value"),
      };
}

typedef wasmtime_strategy_t = ffi.Uint8;
typedef Dartwasmtime_strategy_t = int;
typedef wasmtime_opt_level_t = ffi.Uint8;
typedef Dartwasmtime_opt_level_t = int;
typedef wasmtime_profiling_strategy_t = ffi.Uint8;
typedef Dartwasmtime_profiling_strategy_t = int;

final class wasmtime_linear_memory extends ffi.Struct {
  external ffi.Pointer<ffi.Void> env;

  external wasmtime_memory_get_callback_t get_memory;

  external wasmtime_memory_grow_callback_t grow_memory;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      finalizer;
}

typedef wasmtime_memory_get_callback_t
    = ffi.Pointer<ffi.NativeFunction<wasmtime_memory_get_callback_tFunction>>;
typedef wasmtime_memory_get_callback_tFunction
    = ffi.Pointer<ffi.Uint8> Function(
        ffi.Pointer<ffi.Void> env,
        ffi.Pointer<ffi.Size> byte_size,
        ffi.Pointer<ffi.Size> maximum_byte_size);
typedef wasmtime_memory_grow_callback_t
    = ffi.Pointer<ffi.NativeFunction<wasmtime_memory_grow_callback_tFunction>>;
typedef wasmtime_memory_grow_callback_tFunction = ffi.Pointer<wasmtime_error_t>
    Function(ffi.Pointer<ffi.Void> env, ffi.Size new_size);
typedef Dartwasmtime_memory_grow_callback_tFunction
    = ffi.Pointer<wasmtime_error_t> Function(
        ffi.Pointer<ffi.Void> env, int new_size);

final class wasmtime_memory_creator extends ffi.Struct {
  external ffi.Pointer<ffi.Void> env;

  external wasmtime_new_memory_callback_t new_memory;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      finalizer;
}

typedef wasmtime_new_memory_callback_t
    = ffi.Pointer<ffi.NativeFunction<wasmtime_new_memory_callback_tFunction>>;
typedef wasmtime_new_memory_callback_tFunction
    = ffi.Pointer<wasmtime_error_t> Function(
        ffi.Pointer<ffi.Void> env,
        ffi.Pointer<wasm_memorytype_t> ty,
        ffi.Size minimum,
        ffi.Size maximum,
        ffi.Size reserved_size_in_bytes,
        ffi.Size guard_size_in_bytes,
        ffi.Pointer<wasmtime_linear_memory_t> memory_ret);
typedef Dartwasmtime_new_memory_callback_tFunction
    = ffi.Pointer<wasmtime_error_t> Function(
        ffi.Pointer<ffi.Void> env,
        ffi.Pointer<wasm_memorytype_t> ty,
        int minimum,
        int maximum,
        int reserved_size_in_bytes,
        int guard_size_in_bytes,
        ffi.Pointer<wasmtime_linear_memory_t> memory_ret);
typedef wasmtime_linear_memory_t = wasmtime_linear_memory;
typedef wasmtime_memory_creator_t = wasmtime_memory_creator;

final class wasmtime_module extends ffi.Opaque {}

typedef wasmtime_module_t = wasmtime_module;

final class wasmtime_sharedmemory extends ffi.Opaque {}

typedef wasmtime_sharedmemory_t = wasmtime_sharedmemory;

final class wasmtime_store extends ffi.Opaque {}

final class wasmtime_context extends ffi.Opaque {}

typedef wasmtime_store_t = wasmtime_store;
typedef wasmtime_context_t = wasmtime_context;
typedef wasmtime_update_deadline_kind_t = ffi.Uint8;
typedef Dartwasmtime_update_deadline_kind_t = int;

final class wasmtime_func extends ffi.Struct {
  @ffi.Uint64()
  external int store_id;

  @ffi.Size()
  external int __private;
}

final class wasmtime_table extends ffi.Struct {
  @ffi.Uint64()
  external int store_id;

  @ffi.Size()
  external int __private;
}

final class wasmtime_memory extends ffi.Struct {
  @ffi.Uint64()
  external int store_id;

  @ffi.Size()
  external int __private;
}

final class wasmtime_global extends ffi.Struct {
  @ffi.Uint64()
  external int store_id;

  @ffi.Size()
  external int __private;
}

final class wasmtime_extern_union extends ffi.Union {
  external wasmtime_func_t func;

  external wasmtime_global_t global;

  external wasmtime_table_t table;

  external wasmtime_memory_t memory;

  external ffi.Pointer<wasmtime_sharedmemory> sharedmemory;
}

typedef wasmtime_func_t = wasmtime_func;
typedef wasmtime_global_t = wasmtime_global;
typedef wasmtime_table_t = wasmtime_table;
typedef wasmtime_memory_t = wasmtime_memory;

final class wasmtime_extern extends ffi.Struct {
  @wasmtime_extern_kind_t()
  external int kind;

  external wasmtime_extern_union_t of;
}

typedef wasmtime_extern_kind_t = ffi.Uint8;
typedef Dartwasmtime_extern_kind_t = int;
typedef wasmtime_extern_union_t = wasmtime_extern_union;
typedef wasmtime_extern_t = wasmtime_extern;

final class wasmtime_anyref extends ffi.Struct {
  @ffi.Uint64()
  external int store_id;

  @ffi.Uint32()
  external int __private1;

  @ffi.Uint32()
  external int __private2;
}

typedef wasmtime_anyref_t = wasmtime_anyref;

final class wasmtime_externref extends ffi.Struct {
  @ffi.Uint64()
  external int store_id;

  @ffi.Uint32()
  external int __private1;

  @ffi.Uint32()
  external int __private2;
}

typedef wasmtime_externref_t = wasmtime_externref;

final class wasmtime_valunion extends ffi.Union {
  @ffi.Int32()
  external int i32;

  @ffi.Int64()
  external int i64;

  @float32_t()
  external double f32;

  @float64_t()
  external double f64;

  external wasmtime_anyref_t anyref;

  external wasmtime_externref_t externref;

  external wasmtime_func_t funcref;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> v128;
}

final class wasmtime_val_raw extends ffi.Union {
  @ffi.Int32()
  external int i32;

  @ffi.Int64()
  external int i64;

  @float32_t()
  external double f32;

  @float64_t()
  external double f64;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> v128;

  @ffi.Uint32()
  external int anyref;

  @ffi.Uint32()
  external int externref;

  external ffi.Pointer<ffi.Void> funcref;
}

final class wasmtime_val extends ffi.Struct {
  @wasmtime_valkind_t()
  external int kind;

  external wasmtime_valunion_t of;
}

typedef wasmtime_valkind_t = ffi.Uint8;
typedef Dartwasmtime_valkind_t = int;
typedef wasmtime_valunion_t = wasmtime_valunion;
typedef wasmtime_val_t = wasmtime_val;

final class wasmtime_caller extends ffi.Opaque {}

typedef wasmtime_func_callback_t
    = ffi.Pointer<ffi.NativeFunction<wasmtime_func_callback_tFunction>>;
typedef wasmtime_func_callback_tFunction = ffi.Pointer<wasm_trap_t> Function(
    ffi.Pointer<ffi.Void> env,
    ffi.Pointer<wasmtime_caller_t> caller,
    ffi.Pointer<wasmtime_val_t> args,
    ffi.Size nargs,
    ffi.Pointer<wasmtime_val_t> results,
    ffi.Size nresults);
typedef Dartwasmtime_func_callback_tFunction
    = ffi.Pointer<wasm_trap_t> Function(
        ffi.Pointer<ffi.Void> env,
        ffi.Pointer<wasmtime_caller_t> caller,
        ffi.Pointer<wasmtime_val_t> args,
        int nargs,
        ffi.Pointer<wasmtime_val_t> results,
        int nresults);
typedef wasmtime_caller_t = wasmtime_caller;
typedef wasmtime_func_unchecked_callback_t = ffi
    .Pointer<ffi.NativeFunction<wasmtime_func_unchecked_callback_tFunction>>;
typedef wasmtime_func_unchecked_callback_tFunction
    = ffi.Pointer<wasm_trap_t> Function(
        ffi.Pointer<ffi.Void> env,
        ffi.Pointer<wasmtime_caller_t> caller,
        ffi.Pointer<wasmtime_val_raw_t> args_and_results,
        ffi.Size num_args_and_results);
typedef Dartwasmtime_func_unchecked_callback_tFunction
    = ffi.Pointer<wasm_trap_t> Function(
        ffi.Pointer<ffi.Void> env,
        ffi.Pointer<wasmtime_caller_t> caller,
        ffi.Pointer<wasmtime_val_raw_t> args_and_results,
        int num_args_and_results);
typedef wasmtime_val_raw_t = wasmtime_val_raw;

final class wasmtime_instance extends ffi.Struct {
  @ffi.Uint64()
  external int store_id;

  @ffi.Size()
  external int index;
}

typedef wasmtime_instance_t = wasmtime_instance;

final class wasmtime_instance_pre extends ffi.Opaque {}

typedef wasmtime_instance_pre_t = wasmtime_instance_pre;

final class wasmtime_linker extends ffi.Opaque {}

typedef wasmtime_linker_t = wasmtime_linker;

final class wasmtime_guestprofiler extends ffi.Opaque {}

typedef wasmtime_guestprofiler_t = wasmtime_guestprofiler;

final class wasmtime_guestprofiler_modules extends ffi.Struct {
  external ffi.Pointer<wasm_name_t> name;

  external ffi.Pointer<wasmtime_module_t> mod;
}

typedef wasmtime_guestprofiler_modules_t = wasmtime_guestprofiler_modules;

enum wasmtime_trap_code_enum {
  WASMTIME_TRAP_CODE_STACK_OVERFLOW(0),
  WASMTIME_TRAP_CODE_MEMORY_OUT_OF_BOUNDS(1),
  WASMTIME_TRAP_CODE_HEAP_MISALIGNED(2),
  WASMTIME_TRAP_CODE_TABLE_OUT_OF_BOUNDS(3),
  WASMTIME_TRAP_CODE_INDIRECT_CALL_TO_NULL(4),
  WASMTIME_TRAP_CODE_BAD_SIGNATURE(5),
  WASMTIME_TRAP_CODE_INTEGER_OVERFLOW(6),
  WASMTIME_TRAP_CODE_INTEGER_DIVISION_BY_ZERO(7),
  WASMTIME_TRAP_CODE_BAD_CONVERSION_TO_INTEGER(8),
  WASMTIME_TRAP_CODE_UNREACHABLE_CODE_REACHED(9),
  WASMTIME_TRAP_CODE_INTERRUPT(10),
  WASMTIME_TRAP_CODE_OUT_OF_FUEL(11);

  final int value;
  const wasmtime_trap_code_enum(this.value);

  static wasmtime_trap_code_enum fromValue(int value) => switch (value) {
        0 => WASMTIME_TRAP_CODE_STACK_OVERFLOW,
        1 => WASMTIME_TRAP_CODE_MEMORY_OUT_OF_BOUNDS,
        2 => WASMTIME_TRAP_CODE_HEAP_MISALIGNED,
        3 => WASMTIME_TRAP_CODE_TABLE_OUT_OF_BOUNDS,
        4 => WASMTIME_TRAP_CODE_INDIRECT_CALL_TO_NULL,
        5 => WASMTIME_TRAP_CODE_BAD_SIGNATURE,
        6 => WASMTIME_TRAP_CODE_INTEGER_OVERFLOW,
        7 => WASMTIME_TRAP_CODE_INTEGER_DIVISION_BY_ZERO,
        8 => WASMTIME_TRAP_CODE_BAD_CONVERSION_TO_INTEGER,
        9 => WASMTIME_TRAP_CODE_UNREACHABLE_CODE_REACHED,
        10 => WASMTIME_TRAP_CODE_INTERRUPT,
        11 => WASMTIME_TRAP_CODE_OUT_OF_FUEL,
        _ => throw ArgumentError(
            "Unknown value for wasmtime_trap_code_enum: $value"),
      };
}

typedef wasmtime_trap_code_t = ffi.Uint8;
typedef Dartwasmtime_trap_code_t = int;

final class wasmtime_async_continuation_t extends ffi.Struct {
  external wasmtime_func_async_continuation_callback_t callback;

  external ffi.Pointer<ffi.Void> env;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      finalizer;
}

typedef wasmtime_func_async_continuation_callback_t = ffi.Pointer<
    ffi.NativeFunction<wasmtime_func_async_continuation_callback_tFunction>>;
typedef wasmtime_func_async_continuation_callback_tFunction = ffi.Bool Function(
    ffi.Pointer<ffi.Void> env);
typedef Dartwasmtime_func_async_continuation_callback_tFunction = bool Function(
    ffi.Pointer<ffi.Void> env);

final class wasmtime_call_future extends ffi.Opaque {}

typedef wasmtime_call_future_t = wasmtime_call_future;
typedef wasmtime_func_async_callback_t
    = ffi.Pointer<ffi.NativeFunction<wasmtime_func_async_callback_tFunction>>;
typedef wasmtime_func_async_callback_tFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> env,
    ffi.Pointer<wasmtime_caller_t> caller,
    ffi.Pointer<wasmtime_val_t> args,
    ffi.Size nargs,
    ffi.Pointer<wasmtime_val_t> results,
    ffi.Size nresults,
    ffi.Pointer<ffi.Pointer<wasm_trap_t>> trap_ret,
    ffi.Pointer<wasmtime_async_continuation_t> continuation_ret);
typedef Dartwasmtime_func_async_callback_tFunction = void Function(
    ffi.Pointer<ffi.Void> env,
    ffi.Pointer<wasmtime_caller_t> caller,
    ffi.Pointer<wasmtime_val_t> args,
    int nargs,
    ffi.Pointer<wasmtime_val_t> results,
    int nresults,
    ffi.Pointer<ffi.Pointer<wasm_trap_t>> trap_ret,
    ffi.Pointer<wasmtime_async_continuation_t> continuation_ret);

final class wasmtime_stack_memory_t extends ffi.Struct {
  external ffi.Pointer<ffi.Void> env;

  external wasmtime_stack_memory_get_callback_t get_stack_memory;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      finalizer;
}

typedef wasmtime_stack_memory_get_callback_t = ffi
    .Pointer<ffi.NativeFunction<wasmtime_stack_memory_get_callback_tFunction>>;
typedef wasmtime_stack_memory_get_callback_tFunction = ffi.Pointer<ffi.Uint8>
    Function(ffi.Pointer<ffi.Void> env, ffi.Pointer<ffi.Size> out_len);

final class wasmtime_stack_creator_t extends ffi.Struct {
  external ffi.Pointer<ffi.Void> env;

  external wasmtime_new_stack_memory_callback_t new_stack;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      finalizer;
}

typedef wasmtime_new_stack_memory_callback_t = ffi
    .Pointer<ffi.NativeFunction<wasmtime_new_stack_memory_callback_tFunction>>;
typedef wasmtime_new_stack_memory_callback_tFunction
    = ffi.Pointer<wasmtime_error_t> Function(ffi.Pointer<ffi.Void> env,
        ffi.Size size, ffi.Pointer<wasmtime_stack_memory_t> stack_ret);
typedef Dartwasmtime_new_stack_memory_callback_tFunction
    = ffi.Pointer<wasmtime_error_t> Function(ffi.Pointer<ffi.Void> env,
        int size, ffi.Pointer<wasmtime_stack_memory_t> stack_ret);

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int __GLIBC_USE_C2X_STRTOL = 1;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 39;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int _BITS_STDINT_LEAST_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int true1 = 1;

const int false1 = 0;

const int _STRING_H = 1;

const int _BITS_TYPES_LOCALE_T_H = 1;

const int _BITS_TYPES___LOCALE_T_H = 1;

const int _STRINGS_H = 1;

const int _ASSERT_H = 1;

const int WASMTIME_UPDATE_DEADLINE_CONTINUE = 0;

const int WASMTIME_UPDATE_DEADLINE_YIELD = 1;

const int WASMTIME_EXTERN_FUNC = 0;

const int WASMTIME_EXTERN_GLOBAL = 1;

const int WASMTIME_EXTERN_TABLE = 2;

const int WASMTIME_EXTERN_MEMORY = 3;

const int WASMTIME_EXTERN_SHAREDMEMORY = 4;

const int WASMTIME_I32 = 0;

const int WASMTIME_I64 = 1;

const int WASMTIME_F32 = 2;

const int WASMTIME_F64 = 3;

const int WASMTIME_V128 = 4;

const int WASMTIME_FUNCREF = 5;

const int WASMTIME_EXTERNREF = 6;

const int WASMTIME_ANYREF = 7;

const String WASMTIME_VERSION = '23.0.1';

const int WASMTIME_VERSION_MAJOR = 23;

const int WASMTIME_VERSION_MINOR = 0;

const int WASMTIME_VERSION_PATCH = 1;
